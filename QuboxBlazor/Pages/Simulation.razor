@page "/simulation"
@using MathNet.Numerics.LinearAlgebra
@using Complex = System.Numerics.Complex
@implements IDisposable
@inject StateContainer StateContainer

<PageTitle>Simulation</PageTitle>

<h1>Quantum Circuit Simulator</h1>

<p>This component demonstrates the simulation of the provided circuit.</p>
<div class="alert alert-danger" role="alert">
    <b>Warning! </b>The simulation is not yet implemented. Coming soon!
</div>

<div class="info-body" style="justify-content: center; text-align: center">
    <p>@StateContainer.PrintState()</p>
    <h1 @onmouseover="@SimCircuit">Hover to simulate circuit!</h1>
</div>
<p>Here are the circuit simulation results:</p>
<span>@DisplayResults(results)</span>

<div class="music">
<div class="bar"></div>
<div class="bar"></div>
<div class="bar"></div>
<div class="bar"></div>
<div class="bar"></div>
<div class="bar"></div>
<div class="bar"></div>
<div class="bar"></div>
<div class="bar"></div>
<div class="bar"></div>
</div>


@code {
    private Vector<Complex>? results;

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
    
    private void SimCircuit()
    {
        var circuit = StateContainer.Property;
        if (circuit == null)
        {
            return;
        }
        var simulator = new Simulator(circuit);
        results = simulator.Run();
        
        StateHasChanged();
    }
    
    private string DisplayResults(Vector<Complex>? results )
    {
        if (results == null)
        {
            return "No results to display";
        }
        return results.ToString();
    }

}