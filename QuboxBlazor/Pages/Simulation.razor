@page "/simulation"
@using MathNet.Numerics.LinearAlgebra
@using Complex = System.Numerics.Complex
@implements IDisposable
@inject StateContainer StateContainer

<PageTitle>Simulation</PageTitle>

<h1>Quantum Circuit Simulator</h1>

<p>This component demonstrates the simulation of the provided circuit.</p>
<div class="alert alert-danger" role="alert">
    <b>Warning! </b>The simulation is in an early phase of implementation. Updates coming soon!
</div>

<div class="info-body" style="justify-content: center; text-align: center">
    <p>@StateContainer.PrintState()</p>
    <h1 @onmouseover="@SimCircuit">Hover to simulate circuit!</h1>
</div>

@{
    if (state == null)
    {
        <div class="music">
        <div class="bar"></div>
        <div class="bar"></div>
        <div class="bar"></div>
        <div class="bar"></div>
        <div class="bar"></div>
        <div class="bar"></div>
        <div class="bar"></div>
        <div class="bar"></div>
        <div class="bar"></div>
        <div class="bar"></div>
        </div>
    }
    else
    {
        <p>Here are the circuit simulation results:</p>
        <span style="display: flex; flex-direction: row; justify-content: space-between">
            <span>
                State Vector:
                <ul>
                    @{
                        var i = 0;
                        foreach (var x in state.StateVector)
                        {
                            <li> State |@Convert.ToString(i, 2)>: @Math.Round(x.Real,4) + i×@Math.Round(x.Imaginary,4)</li>
                            i++;
                        }
                    }
                </ul>
            </span>
            <span>
                Measurement Results (probabilities of each outcome):
                <ul>
                    @{
                        var j = 0;
                        foreach (var x in state.ProbeVector)
                        {
                            <li> State |@Convert.ToString(j, 2)>: @Math.Round(x*100, 4) %</li>
                            j++;
                        }
                    }
                </ul>
            </span>
        </span>        
    }
}


@code {
    private State state;
    
    
    /// <summary>
    /// Subscribe to the injected state container to be notified when the state changes.
    /// </summary>
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }
    
    /// <summary>
    /// Unsubscribe from the injected state container when the component is disposed.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
    
    /// <summary>
    /// Trigger an asynchronous task to execute the circuit simulation.
    /// </summary>
    private async void SimCircuit()
    {
        await Task.Delay(500);
        var circuit = StateContainer.Property;
        if (circuit == null)
        {
            return;
        }
        var simulator = new Simulator(circuit);
        state = simulator.Run();

        StateHasChanged();
    }
    
    /// <summary>
    /// Method to display the results of the simulation.
    /// </summary>
    private string DisplayResults(State results )
    {
        if (results == null)
        {
            return "No results to display";
        }
        return results.ToString();
    }

}