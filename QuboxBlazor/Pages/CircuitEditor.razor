@page "/circuit-editor"
@using QuboxSimulator.Circuits
@using System.IO
@using System.Text
@implements IDisposable
@inject StateContainer StateContainer
@inject IJSRuntime JsRuntime

<PageTitle>Circuit Sandbox</PageTitle>

<div style="min-height: 200px; overflow: hidden">
    <div style="float: left; width: 40%; text-align: center; color: rgb(255,236,69);
        align-content: center; background: rgb(15,24,88);">
        <h1>Circuit</h1>
        <div class="info-body">
            <h1 @onmouseover="@UpdateCircuit">Hover to update circuit!</h1> <p>@StateContainer.PrintState()</p>
        </div>
        <blockquote>If representations match, event callback works!</blockquote>
        
        @{
            if (Error != AST.Error.Success)
            {
                <div class="alert alert-danger" role="alert">
                    <span class="glyphicon glyphicon-alert" aria-hidden="true">
                        <b>Invalid! There's been an error detected in the code:</b> @Error.ToString()
                    </span>
                </div>
            }
            else
            {
                <div class="alert alert-success" role="alert">
                    <span class="glyphicon glyphicon-ok" aria-hidden="true">
                        <b>Successful!</b> The QuLang definition is syntactically and semantically correct.
                    </span>
                </div>
            }
        }
        <div style="position: relative; min-height: 130px; width: 100%;">
            <button class="download-button" @onclick="@DownloadFile">Download Q# code</button>
        </div>
        
    </div>
    <div style="float: right; width: 60%;">
        <QuLangEditor @bind-CodeContent="Content"></QuLangEditor>
    </div>
    
</div>
<SchemaVisual Circuit="@_circuit"></SchemaVisual>


@code {
    
    private Circuit? _circuit { get; set; }
    
    private AST.Error? Error { get; set; } = AST.Error.Success;

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    private void UpdateCircuit(MouseEventArgs e)
    {
        Interpreter.HandleLang(Content);
        Console.WriteLine(Content);
        var circuit = Interpreter.Interpret();
        Error = Interpreter.Error;
        if (circuit == null)
        {
            Console.WriteLine("Circuit is still missing!");
            return;
        }
        _circuit = circuit;
        StateContainer.Property = _circuit;
    }
    
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    private string Content { get; set; } = "...Try typing something in the editor or switch focus...";

    private Stream GetStreamData()
    {   
        var generator = new Generator(_circuit);       
        var ast = Generator.DestructCircuit();
        var compiled = Handler.compileCircuit(ast.Item1, ast.Item2);
        var wrapped = Handler.wrapQSharp(compiled);

        var fileStream = new MemoryStream(Encoding.UTF8.GetBytes(wrapped));
        return fileStream;
    }

    private async Task DownloadFile()
    {
        var stream = GetStreamData();
        var fileName = "circuit.qs";
        
        using var streamRef = new DotNetStreamReference(stream);
        await JsRuntime.InvokeVoidAsync("downloadFile", fileName, streamRef);
    }
    
}