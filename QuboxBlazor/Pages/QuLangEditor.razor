<div style="float: inherit; width: 100%; align-items: center">
    <h3>Code Editor</h3>
    <div>
        New Value: <input type="text" @bind="ValueToSet" /> <button @onclick="SetValue">Set Value</button>
    </div>
    <div style="color: rgb(255,236,69);">
        <button @onclick="GetValue">Get Value</button> Value obtained: <p style="color: #20c997">@CodeContent</p>
    </div>
</div>
<div class="qulang-editor" onmouseleave="@UpdateContent" style="text-align: left; float: right; width: 167%">
    <StandaloneCodeEditor @ref="_editor" Id="qulang-editor" ConstructionOptions="EditorConstructionOptions" 
                          OnDidInit="EditorOnDidInit" OnDidChangeCursorPosition="@EditorChangedPosition" 
                          OnDidChangeModelContent="@EditorChangedContent"/>
</div>

@code {

    [Parameter]
    public string CodeContent { get; set; } = "";
    
    private StandaloneCodeEditor _editor = null!;
    
    [Parameter]
    public EventCallback<string> CodeContentChanged { get; set; }
    
    [Parameter]
    public string ValueToSet { get; set; } = "";

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            GlyphMargin = true,
            AutomaticLayout = true,
            FontFamily = "CaskaydiaCove Nerd Font Mono",
            FontSize = 15,
            Language = "qulang",
            FontLigatures = true,
            Theme = "qubox",
            Value = "Qalloc q[2];\n" + "Calloc c[2];\n\n" + "H q[0];\n" +
                    "CNOT q[0], q[1];\n" + "H q[0];\n\n" + "P(5*Pi/2) q[1];\n\n" +
                    "Measure q[1] -> c[1];\n" + "Measure q[0] -> c[0];\n" +
                    "If (c[0] |> Click or false and 3>=5.0) Z q[0];\n",
        };
    }
    
    private async void EditorChangedPosition(CursorPositionChangedEvent eventArg)
    {
        CodeContent = await _editor.GetValue();
        //Console.WriteLine($"Cursor position changed to: {eventArg.Position.LineNumber}, {eventArg.Position.Column}");
        await UpdateContent(new MouseEventArgs());
    }
    
    private async Task EditorChangedContent(ModelContentChangedEvent eventArg)
    {
        CodeContent = await _editor.GetValue();
        //Console.WriteLine($"Content changed to: {CodeContent}");
        await UpdateContent(new MouseEventArgs());        
    }
    
    
    private Task UpdateContent(MouseEventArgs eventArg)
    {
        //Console.WriteLine("Content is updated!");
        return CodeContentChanged.InvokeAsync(CodeContent);
    }

    private async Task SetValue()
    {
        Console.WriteLine($"setting value to: {ValueToSet}");
        await _editor.SetValue(ValueToSet);
    }

    private async Task GetValue()
    {
        var val = await _editor.GetValue();
        CodeContent = val;
        Console.WriteLine($"value is: {val}");
    }

    private async Task EditorOnDidInit()
    {
        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ()
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        _decorationIds = await _editor.DeltaDecorations(null, newDecorations);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private string[] _decorationIds = new string[0];

    private async Task AddCommand()
    {
        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.Enter, (args) =>
        {
            Console.WriteLine("Ctrl+Enter : Editor command is triggered.");
        });
    }

    private async Task AddAction()
    {
        var actionDescriptor = new ActionDescriptor
        {
            Id = "testAction",
            Label = "Test Action",
            Keybindings = new int[] { (int)KeyMod.CtrlCmd | (int)KeyCode.KeyB },
            ContextMenuGroupId = "navigation",
            ContextMenuOrder = 1.5f,
            Run = (editor) =>
            {
                Console.WriteLine("Ctrl+B : Editor action is triggered.");
            }
        };
        await _editor.AddAction(actionDescriptor);
    }
}