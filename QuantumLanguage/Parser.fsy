// Open the file that defines the types used as AST in the QuLang-parser
%{
open Tags
open AST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <float> FLOAT
%token <string> VARIABLE
%token <bool> BOOL
%token TIMES DIV PLUS MINUS POW MOD LPAR RPAR MATHPI CLICK NOCLICK EOF LBRAK RBRAK
%token QUANTREG CLASSREG ASSIGN BASSIGN DEL SEP MEASURE MESHOST CONDITIONAL RESET PHASEDISK
%token BARRIER HADAMARD IDENTITY PAULIX PAULIY PAULIZ TDAGGER TGATE SGATE SDAGGER PHASE UNITARY
%token RZGATE RYGATE RXGATE SWAP TOFFOLI CTRLH CTRLS CTRLNOT SYMMRXX SYMMRZZ SYMMRYY SQRTNOT SQRTXDG
%token BVAR SAND SOR AND XOR OR NEG EQUAL ISQ NOTEQ GREATER LESS GREATEREQ LESSEQ
//Formats of these tokens are defined in the Lexer (.fsl) file as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left PLUS MINUS
%left TIMES DIV MOD
%right POW

%left OR SOR
%left AND SAND
%left XOR
%right NEG

%right SEP
%nonassoc LPAR RPAR

// Declare the initial non-terminal symbol
%start start
%start startArith
%start startBool

// Specify the return type of each of then non-terminal symbols
%type <AST.Circuit option> start
%type <AST.BoolExpr option> startBool
%type <AST.ArithExpr option> startArith
%type <AST.Allocation> allocation
%type <Statement> operator
%type <Statement list> statements
%type <Bit> bit
%type <Bit> bitsequence
%type <Result> result
%type <ArithExpr> arithmetic
%type <ArithExpr> arithmetic1
%type <BoolExpr> boolean

// Grammar productions
%%

// The first production in "formal" notation is start -> expression
start:
  | allocation statements EOF           { Some ($1, Flow $2) }
  | EOF                                 { None }
  
startArith:
  | arithmetic EOF                      { Some $1 }
  | EOF                                 { None }

startBool:
  | boolean EOF                         { Some $1 }
  | EOF                                 { None }
  
// Note that an End-Of-File (EOF) is inserted
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)


// Allocation productions - to simplify operators
allocation: qallocation callocation     { AllocQC($1, $2) }
// QALLC ::= Qalloc bit; | Qalloc bitseq;
qallocation:
  | QUANTREG bitsequence DEL      { $2 }
  | QUANTREG bit DEL              { $2 }

// CALLC ::= Calloc bit; | Calloc bitseq;
callocation:
  | CLASSREG bitsequence DEL      { $2 }
  | CLASSREG bit DEL              { $2 }
  
  
// The productions for expressions are grammar written in the yacc format:
// Arithmetic productions
//a ::= n | x | a + a | a - a | a * a | a / a | a ^ a | - a | (a)
arithmetic:
  | arithmetic TIMES arithmetic     { BinaryOp($1, Mul, $3) }
  | arithmetic DIV arithmetic       { BinaryOp($1, Div, $3) }
  | arithmetic PLUS arithmetic      { BinaryOp($1, Add, $3) }
  | arithmetic MINUS arithmetic     { BinaryOp($1, Sub, $3) }
  | arithmetic POW arithmetic       { BinaryOp($1, Pow, $3) }
  | arithmetic MOD arithmetic       { BinaryOp($1, Mod, $3) }
  | arithmetic1                     { $1 }

arithmetic1:
  | MATHPI                          { Pi }
  | NUM                             { Num($1) }
  | FLOAT                           { Float($1) }
  | MINUS arithmetic1               { UnaryOp(Minus, $2) }
  | PLUS arithmetic1                { UnaryOp(Plus, $2) }
  | LPAR arithmetic RPAR            { $2 }
  | str                             { VarA($1) }

// Variable string production
str:
  | VARIABLE                        { $1 }
  
// Statement terminator & chaining
statements:
    | statements statements         { $1 @ $2 }
    | operator DEL                  { [$1] }
    | /* EMPTY */                   { [] }

// Result production
// R ::= Click | NoClick
result:
  | CLICK                            { Click }
  | NOCLICK                          { NoClick }

// Qubit/Cbit production (can be either array or single var)
bit:
  | VARIABLE                        { BitS($1) }
  | str LBRAK NUM RBRAK             { BitA($1, $3) }

// Production for producing bit definition sequences  
bitsequence:
  | bit                         { $1 } 
  | bit SEP bitsequence         { BitSeq($1, $3) }

// Logical productions
//b ::= true | false | b and b | b or b | b && b | b || b | not b |
// | bit |> R | a == a | a != a | a > a | a >= a | a < a | a <= a | (b)
boolean:
  | BOOL                                { B ($1) }
  | boolean SAND boolean                { LogicOp($1, And, $3) }
  | boolean SOR boolean                 { LogicOp($1, Or, $3) }
  | boolean AND boolean                 { LogicOp($1, And, $3) }
  | boolean OR boolean                  { LogicOp($1, Or, $3) }
  | boolean XOR boolean                 { LogicOp($1, Xor, $3) }
  | NEG boolean                         { Not($2)}
  | bit ISQ result                      { Check($1,$3) }
  | arithmetic EQUAL arithmetic         { RelationOp($1, EQ, $3) }
  | arithmetic NOTEQ arithmetic         { RelationOp($1, NEQ, $3) }
  | arithmetic GREATER arithmetic       { RelationOp($1, GT, $3) }
  | arithmetic GREATEREQ arithmetic     { RelationOp($1, GTE, $3) }
  | arithmetic LESS arithmetic          { RelationOp($1, LT, $3) }
  | arithmetic LESSEQ arithmetic        { RelationOp($1, LTE, $3) }
  | LPAR boolean RPAR                   { $2 }
  | BVAR VARIABLE                       { VarB($2) }

// Operator productions
//O ::= x = a | y := b | Measure bit -> bit | Reset bit | If (b) C | 
//        Barrier bit | G bit | G bit, bit | G bit, bit, bit
operator:
  | str ASSIGN arithmetic                       { Assign($1, $3) }
  | boolean BASSIGN str                         { AssignB($3, $1) }
  | CONDITIONAL boolean operator                { Condition($2, $3) }
  | MEASURE bit MESHOST bit                     { Measure($2, $4) }
  | RESET bit                                   { Reset($2) }
  | BARRIER bit                                 { Barrier($2) }
  | PHASEDISK                                   { PhaseDisk }
// Quantum Gate productions ---- part of operators 
// G::= H | ID | X | Z | TDG | T | S | SDG | P | RZ | RY | RX
// ::= U | SWAP | CCX | CNOT | RXX | RZZ | SX | SXDG
  | HADAMARD bit            { UnaryGate(H, $2) }
  | IDENTITY bit            { UnaryGate(ID, $2) }
  | PAULIX bit              { UnaryGate(X, $2) }
  | PAULIY bit              { UnaryGate(Y, $2) }
  | PAULIZ bit              { UnaryGate(Z, $2) }
  | TDAGGER bit             { UnaryGate(TDG, $2) }
  | TGATE bit               { UnaryGate(T, $2) }
  | SGATE bit               { UnaryGate(S, $2) }
  | SDAGGER bit             { UnaryGate(SDG, $2) }
  | SQRTNOT bit             { UnaryGate(SX, $2) } 
  | SQRTXDG bit             { UnaryGate(SXDG, $2) }
// Parametric gates on one qubit
  | PHASE LPAR arithmetic RPAR bit     { ParamGate(P, $3, $5) }
  | RZGATE LPAR arithmetic RPAR bit    { ParamGate(RZ, $3, $5) }
  | RYGATE LPAR arithmetic RPAR bit    { ParamGate(RY, $3, $5) }
  | RXGATE LPAR arithmetic RPAR bit    { ParamGate(RX, $3, $5) }
  | UNITARY LPAR arithmetic SEP arithmetic SEP arithmetic RPAR bit { Unitary($3, $5, $7, $9) }
// Gates on multiple qubits
  | CTRLH bit SEP bit                   { BinaryGate(CH, $2, $4) }
  | CTRLS bit SEP bit                   { BinaryGate(CS, $2, $4) }
  | CTRLNOT bit SEP bit                 { BinaryGate(CNOT, $2, $4) }
  | TOFFOLI bit SEP bit SEP bit         { Toffoli($2, $4, $6) }
  | SWAP bit SEP bit                    { BinaryGate(Tags.SWAP, $2, $4) } // Conflict with some swap function
// Parametric gates on multiple qubits
  | SYMMRXX LPAR arithmetic RPAR bit SEP bit      { BinaryParamGate(RXX, $3, $5, $7) } 
  | SYMMRYY LPAR arithmetic RPAR bit SEP bit      { BinaryParamGate(RYY, $3, $5, $7) } 
  | SYMMRZZ LPAR arithmetic RPAR bit SEP bit      { BinaryParamGate(RZZ, $3, $5, $7) } 
   
// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%