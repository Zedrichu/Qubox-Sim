// Open the file that defines the different types we shall use as AST in out GCL-parser
%{
open QuantumAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <float> FLOAT
%token <string> VARIABLE
%token <bool> BOOL
%token TIMES DIV PLUS MINUS LPAR RPAR MATHPI EOF LBRAK RBRAK
%token QUANTREG CLASSREG ASSIGN ORDER MEASURE MESHOST CONDITIONAL RESET
%token BARRIER HADAMARD IDENTITY PAULIX PAULIZ TDAGGER TGATE SGATE SDAGGER PHASE UNITARY
%token RZGATE RYGATE RXGATE SWAP TOFFOLI CTRLNOT MOLMERSOR SYMMRZZ SQRTNOT SQRTXDAG
%token SAND SOR AND OR NEG EQUAL NOTEQ GREATER LESS GREATEREQ LESSEQ
//the actual formats of these tokens are defined in the lexer file as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)

%left PLUS MINUS
%left TIMES DIV

%left OR SOR
%left AND SAND
%right NEG

%right ORDER 
%nonassoc LPAR RPAR

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <command> start
%type <command> allocation
%type <arithExpr> expression
%type <arithExpr> expression1
%type <boolExpr> boolexpression
%type <gate> gate
%type <command> measurement
%type <command> command
// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start:  allocation command EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:


// Arithmetic productions
//a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | (a)
expression:
  | expression TIMES expression     { TimesExpr($1,$3) }
  | expression DIV expression       { DivExpr($1,$3) }
  | expression PLUS expression      { PlusExpr($1,$3) }
  | expression MINUS expression     { MinusExpr($1,$3) }
  | expression POW expression       { PowExpr($1,$3) }
  | expression1                     { $1 }

expression1:
  | NUM                             { Num($1) }
  | FLOAT                           { Float($1) }
  | MATHPI                          { Pi }
  | str                             { StrA($1) }
  | MINUS expression1               { UMinusExpr($2) }
  | PLUS expression1                { UPlusExpr($2) }
  | LPAR expression RPAR            { $2 }

// Variable string production
str:
  | VARIABLE                        { $1 }


// Boolean productions
//b ::= true | false | b and b | b or b | b && b | b || b | not b |
//  | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)
boolexpression:
  | BOOL                                    { Bool($1) }
  | str                                     { StrB($1) }
  | boolexpression SAND boolexpression      { ShortCircuitAnd($1,$3) }
  | boolexpression SOR boolexpression       { ShortCircuitOr($1,$3) }
  | boolexpression AND boolexpression       { LogAnd($1,$3) }
  | boolexpression OR boolexpression        { LogOr($1,$3) }
  | NEG boolexpression                      { Neg($2)}
  | expression EQUAL expression             { Equal($1,$3) }
  | expression NOTEQ expression             { NotEqual($1,$3) }
  | expression GREATER expression           { Greater($1,$3) }
  | expression GREATEREQ expression         { GreaterEqual($1,$3) }
  | expression LESS expression              { Less($1,$3) }
  | expression LESSEQ expression            { LessEqual($1,$3) }
  | LPAR boolexpression RPAR                { $2 }

// Allocation production
// ALLC ::= Qalloc str n; Calloc str n; 
allocation:
  | QUANTREG str NUM ORDER CLASSREG str NUM ORDER { Alloc($2, $3, $4, $5) }

// M::= Measure q[n] -> c[n]
measurement:
  | MEASURE str LBRAK NUM RBRAK MESHOST str LBRAK NUM RBRAK { Measure($2, $4, $7, $9) }

// Commands productions
//C ::= x := a | C ; C | M | Reset q[n] | If (b) C | Barrier q[n] | G 
command:
  | str ASSIGN expression                         { Assign($1, $3) }
  | command ORDER command                         { Order($1,$3)}
  | 
  | #TODO!
  
// Quantum Gate production
// G::= H | 
  #TODO!
gate:
  | 
  
// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%