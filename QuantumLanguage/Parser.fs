// Implementation file for parser generated by fsyacc
module QuantumLanguage.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SAND
  | SOR
  | AND
  | OR
  | NEG
  | EQUAL
  | ISQ
  | NOTEQ
  | GREATER
  | LESS
  | GREATEREQ
  | LESSEQ
  | RZGATE
  | RYGATE
  | RXGATE
  | SWAP
  | TOFFOLI
  | CTRLNOT
  | SYMMRXX
  | SYMMRZZ
  | SQRTNOT
  | SQRTXDG
  | BARRIER
  | HADAMARD
  | IDENTITY
  | PAULIX
  | PAULIY
  | PAULIZ
  | TDAGGER
  | TGATE
  | SGATE
  | SDAGGER
  | PHASE
  | UNITARY
  | QUANTREG
  | CLASSREG
  | ASSIGN
  | BASSIGN
  | ORDER
  | COMMA
  | MEASURE
  | MESHOST
  | CONDITIONAL
  | RESET
  | PHASEDISK
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | LPAR
  | RPAR
  | MATHPI
  | CLICK
  | NOCLICK
  | EOF
  | LBRAK
  | RBRAK
  | BOOL of (bool)
  | VARIABLE of (string)
  | FLOAT of (float)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_ISQ
    | TOKEN_NOTEQ
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATEREQ
    | TOKEN_LESSEQ
    | TOKEN_RZGATE
    | TOKEN_RYGATE
    | TOKEN_RXGATE
    | TOKEN_SWAP
    | TOKEN_TOFFOLI
    | TOKEN_CTRLNOT
    | TOKEN_SYMMRXX
    | TOKEN_SYMMRZZ
    | TOKEN_SQRTNOT
    | TOKEN_SQRTXDG
    | TOKEN_BARRIER
    | TOKEN_HADAMARD
    | TOKEN_IDENTITY
    | TOKEN_PAULIX
    | TOKEN_PAULIY
    | TOKEN_PAULIZ
    | TOKEN_TDAGGER
    | TOKEN_TGATE
    | TOKEN_SGATE
    | TOKEN_SDAGGER
    | TOKEN_PHASE
    | TOKEN_UNITARY
    | TOKEN_QUANTREG
    | TOKEN_CLASSREG
    | TOKEN_ASSIGN
    | TOKEN_BASSIGN
    | TOKEN_ORDER
    | TOKEN_COMMA
    | TOKEN_MEASURE
    | TOKEN_MESHOST
    | TOKEN_CONDITIONAL
    | TOKEN_RESET
    | TOKEN_PHASEDISK
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MATHPI
    | TOKEN_CLICK
    | TOKEN_NOCLICK
    | TOKEN_EOF
    | TOKEN_LBRAK
    | TOKEN_RBRAK
    | TOKEN_BOOL
    | TOKEN_VARIABLE
    | TOKEN_FLOAT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_allocation
    | NONTERM_qallocation
    | NONTERM_callocation
    | NONTERM_expression
    | NONTERM_expression1
    | NONTERM_str
    | NONTERM_statement
    | NONTERM_result
    | NONTERM_bit
    | NONTERM_bitsequence
    | NONTERM_boolexpression
    | NONTERM_measurement
    | NONTERM_operator

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | SAND  -> 0 
  | SOR  -> 1 
  | AND  -> 2 
  | OR  -> 3 
  | NEG  -> 4 
  | EQUAL  -> 5 
  | ISQ  -> 6 
  | NOTEQ  -> 7 
  | GREATER  -> 8 
  | LESS  -> 9 
  | GREATEREQ  -> 10 
  | LESSEQ  -> 11 
  | RZGATE  -> 12 
  | RYGATE  -> 13 
  | RXGATE  -> 14 
  | SWAP  -> 15 
  | TOFFOLI  -> 16 
  | CTRLNOT  -> 17 
  | SYMMRXX  -> 18 
  | SYMMRZZ  -> 19 
  | SQRTNOT  -> 20 
  | SQRTXDG  -> 21 
  | BARRIER  -> 22 
  | HADAMARD  -> 23 
  | IDENTITY  -> 24 
  | PAULIX  -> 25 
  | PAULIY  -> 26 
  | PAULIZ  -> 27 
  | TDAGGER  -> 28 
  | TGATE  -> 29 
  | SGATE  -> 30 
  | SDAGGER  -> 31 
  | PHASE  -> 32 
  | UNITARY  -> 33 
  | QUANTREG  -> 34 
  | CLASSREG  -> 35 
  | ASSIGN  -> 36 
  | BASSIGN  -> 37 
  | ORDER  -> 38 
  | COMMA  -> 39 
  | MEASURE  -> 40 
  | MESHOST  -> 41 
  | CONDITIONAL  -> 42 
  | RESET  -> 43 
  | PHASEDISK  -> 44 
  | TIMES  -> 45 
  | DIV  -> 46 
  | PLUS  -> 47 
  | MINUS  -> 48 
  | LPAR  -> 49 
  | RPAR  -> 50 
  | MATHPI  -> 51 
  | CLICK  -> 52 
  | NOCLICK  -> 53 
  | EOF  -> 54 
  | LBRAK  -> 55 
  | RBRAK  -> 56 
  | BOOL _ -> 57 
  | VARIABLE _ -> 58 
  | FLOAT _ -> 59 
  | NUM _ -> 60 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SAND 
  | 1 -> TOKEN_SOR 
  | 2 -> TOKEN_AND 
  | 3 -> TOKEN_OR 
  | 4 -> TOKEN_NEG 
  | 5 -> TOKEN_EQUAL 
  | 6 -> TOKEN_ISQ 
  | 7 -> TOKEN_NOTEQ 
  | 8 -> TOKEN_GREATER 
  | 9 -> TOKEN_LESS 
  | 10 -> TOKEN_GREATEREQ 
  | 11 -> TOKEN_LESSEQ 
  | 12 -> TOKEN_RZGATE 
  | 13 -> TOKEN_RYGATE 
  | 14 -> TOKEN_RXGATE 
  | 15 -> TOKEN_SWAP 
  | 16 -> TOKEN_TOFFOLI 
  | 17 -> TOKEN_CTRLNOT 
  | 18 -> TOKEN_SYMMRXX 
  | 19 -> TOKEN_SYMMRZZ 
  | 20 -> TOKEN_SQRTNOT 
  | 21 -> TOKEN_SQRTXDG 
  | 22 -> TOKEN_BARRIER 
  | 23 -> TOKEN_HADAMARD 
  | 24 -> TOKEN_IDENTITY 
  | 25 -> TOKEN_PAULIX 
  | 26 -> TOKEN_PAULIY 
  | 27 -> TOKEN_PAULIZ 
  | 28 -> TOKEN_TDAGGER 
  | 29 -> TOKEN_TGATE 
  | 30 -> TOKEN_SGATE 
  | 31 -> TOKEN_SDAGGER 
  | 32 -> TOKEN_PHASE 
  | 33 -> TOKEN_UNITARY 
  | 34 -> TOKEN_QUANTREG 
  | 35 -> TOKEN_CLASSREG 
  | 36 -> TOKEN_ASSIGN 
  | 37 -> TOKEN_BASSIGN 
  | 38 -> TOKEN_ORDER 
  | 39 -> TOKEN_COMMA 
  | 40 -> TOKEN_MEASURE 
  | 41 -> TOKEN_MESHOST 
  | 42 -> TOKEN_CONDITIONAL 
  | 43 -> TOKEN_RESET 
  | 44 -> TOKEN_PHASEDISK 
  | 45 -> TOKEN_TIMES 
  | 46 -> TOKEN_DIV 
  | 47 -> TOKEN_PLUS 
  | 48 -> TOKEN_MINUS 
  | 49 -> TOKEN_LPAR 
  | 50 -> TOKEN_RPAR 
  | 51 -> TOKEN_MATHPI 
  | 52 -> TOKEN_CLICK 
  | 53 -> TOKEN_NOCLICK 
  | 54 -> TOKEN_EOF 
  | 55 -> TOKEN_LBRAK 
  | 56 -> TOKEN_RBRAK 
  | 57 -> TOKEN_BOOL 
  | 58 -> TOKEN_VARIABLE 
  | 59 -> TOKEN_FLOAT 
  | 60 -> TOKEN_NUM 
  | 63 -> TOKEN_end_of_input
  | 61 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_allocation 
    | 4 -> NONTERM_qallocation 
    | 5 -> NONTERM_qallocation 
    | 6 -> NONTERM_callocation 
    | 7 -> NONTERM_callocation 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression 
    | 13 -> NONTERM_expression1 
    | 14 -> NONTERM_expression1 
    | 15 -> NONTERM_expression1 
    | 16 -> NONTERM_expression1 
    | 17 -> NONTERM_expression1 
    | 18 -> NONTERM_expression1 
    | 19 -> NONTERM_expression1 
    | 20 -> NONTERM_str 
    | 21 -> NONTERM_statement 
    | 22 -> NONTERM_statement 
    | 23 -> NONTERM_statement 
    | 24 -> NONTERM_result 
    | 25 -> NONTERM_result 
    | 26 -> NONTERM_bit 
    | 27 -> NONTERM_bit 
    | 28 -> NONTERM_bitsequence 
    | 29 -> NONTERM_bitsequence 
    | 30 -> NONTERM_boolexpression 
    | 31 -> NONTERM_boolexpression 
    | 32 -> NONTERM_boolexpression 
    | 33 -> NONTERM_boolexpression 
    | 34 -> NONTERM_boolexpression 
    | 35 -> NONTERM_boolexpression 
    | 36 -> NONTERM_boolexpression 
    | 37 -> NONTERM_boolexpression 
    | 38 -> NONTERM_boolexpression 
    | 39 -> NONTERM_boolexpression 
    | 40 -> NONTERM_boolexpression 
    | 41 -> NONTERM_boolexpression 
    | 42 -> NONTERM_boolexpression 
    | 43 -> NONTERM_boolexpression 
    | 44 -> NONTERM_measurement 
    | 45 -> NONTERM_operator 
    | 46 -> NONTERM_operator 
    | 47 -> NONTERM_operator 
    | 48 -> NONTERM_operator 
    | 49 -> NONTERM_operator 
    | 50 -> NONTERM_operator 
    | 51 -> NONTERM_operator 
    | 52 -> NONTERM_operator 
    | 53 -> NONTERM_operator 
    | 54 -> NONTERM_operator 
    | 55 -> NONTERM_operator 
    | 56 -> NONTERM_operator 
    | 57 -> NONTERM_operator 
    | 58 -> NONTERM_operator 
    | 59 -> NONTERM_operator 
    | 60 -> NONTERM_operator 
    | 61 -> NONTERM_operator 
    | 62 -> NONTERM_operator 
    | 63 -> NONTERM_operator 
    | 64 -> NONTERM_operator 
    | 65 -> NONTERM_operator 
    | 66 -> NONTERM_operator 
    | 67 -> NONTERM_operator 
    | 68 -> NONTERM_operator 
    | 69 -> NONTERM_operator 
    | 70 -> NONTERM_operator 
    | 71 -> NONTERM_operator 
    | 72 -> NONTERM_operator 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 63 
let _fsyacc_tagOfErrorTerminal = 61

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | ISQ  -> "ISQ" 
  | NOTEQ  -> "NOTEQ" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATEREQ  -> "GREATEREQ" 
  | LESSEQ  -> "LESSEQ" 
  | RZGATE  -> "RZGATE" 
  | RYGATE  -> "RYGATE" 
  | RXGATE  -> "RXGATE" 
  | SWAP  -> "SWAP" 
  | TOFFOLI  -> "TOFFOLI" 
  | CTRLNOT  -> "CTRLNOT" 
  | SYMMRXX  -> "SYMMRXX" 
  | SYMMRZZ  -> "SYMMRZZ" 
  | SQRTNOT  -> "SQRTNOT" 
  | SQRTXDG  -> "SQRTXDG" 
  | BARRIER  -> "BARRIER" 
  | HADAMARD  -> "HADAMARD" 
  | IDENTITY  -> "IDENTITY" 
  | PAULIX  -> "PAULIX" 
  | PAULIY  -> "PAULIY" 
  | PAULIZ  -> "PAULIZ" 
  | TDAGGER  -> "TDAGGER" 
  | TGATE  -> "TGATE" 
  | SGATE  -> "SGATE" 
  | SDAGGER  -> "SDAGGER" 
  | PHASE  -> "PHASE" 
  | UNITARY  -> "UNITARY" 
  | QUANTREG  -> "QUANTREG" 
  | CLASSREG  -> "CLASSREG" 
  | ASSIGN  -> "ASSIGN" 
  | BASSIGN  -> "BASSIGN" 
  | ORDER  -> "ORDER" 
  | COMMA  -> "COMMA" 
  | MEASURE  -> "MEASURE" 
  | MESHOST  -> "MESHOST" 
  | CONDITIONAL  -> "CONDITIONAL" 
  | RESET  -> "RESET" 
  | PHASEDISK  -> "PHASEDISK" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | MATHPI  -> "MATHPI" 
  | CLICK  -> "CLICK" 
  | NOCLICK  -> "NOCLICK" 
  | EOF  -> "EOF" 
  | LBRAK  -> "LBRAK" 
  | RBRAK  -> "RBRAK" 
  | BOOL _ -> "BOOL" 
  | VARIABLE _ -> "VARIABLE" 
  | FLOAT _ -> "FLOAT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | ISQ  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATEREQ  -> (null : System.Object) 
  | LESSEQ  -> (null : System.Object) 
  | RZGATE  -> (null : System.Object) 
  | RYGATE  -> (null : System.Object) 
  | RXGATE  -> (null : System.Object) 
  | SWAP  -> (null : System.Object) 
  | TOFFOLI  -> (null : System.Object) 
  | CTRLNOT  -> (null : System.Object) 
  | SYMMRXX  -> (null : System.Object) 
  | SYMMRZZ  -> (null : System.Object) 
  | SQRTNOT  -> (null : System.Object) 
  | SQRTXDG  -> (null : System.Object) 
  | BARRIER  -> (null : System.Object) 
  | HADAMARD  -> (null : System.Object) 
  | IDENTITY  -> (null : System.Object) 
  | PAULIX  -> (null : System.Object) 
  | PAULIY  -> (null : System.Object) 
  | PAULIZ  -> (null : System.Object) 
  | TDAGGER  -> (null : System.Object) 
  | TGATE  -> (null : System.Object) 
  | SGATE  -> (null : System.Object) 
  | SDAGGER  -> (null : System.Object) 
  | PHASE  -> (null : System.Object) 
  | UNITARY  -> (null : System.Object) 
  | QUANTREG  -> (null : System.Object) 
  | CLASSREG  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | BASSIGN  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MEASURE  -> (null : System.Object) 
  | MESHOST  -> (null : System.Object) 
  | CONDITIONAL  -> (null : System.Object) 
  | RESET  -> (null : System.Object) 
  | PHASEDISK  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | MATHPI  -> (null : System.Object) 
  | CLICK  -> (null : System.Object) 
  | NOCLICK  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LBRAK  -> (null : System.Object) 
  | RBRAK  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;1us;65535us;0us;6us;1us;65535us;6us;7us;16us;65535us;33us;18us;34us;19us;35us;20us;36us;21us;46us;22us;47us;22us;103us;23us;136us;24us;140us;25us;144us;26us;148us;27us;152us;28us;153us;29us;154us;30us;172us;31us;178us;32us;34us;65535us;2us;82us;3us;82us;33us;37us;34us;37us;35us;37us;36us;37us;42us;43us;44us;45us;46us;37us;47us;38us;54us;82us;74us;82us;75us;82us;76us;82us;77us;82us;78us;82us;83us;84us;85us;86us;87us;88us;89us;90us;91us;92us;93us;94us;103us;37us;107us;82us;108us;82us;136us;37us;140us;37us;144us;37us;148us;37us;152us;37us;153us;37us;154us;37us;172us;37us;178us;37us;69us;65535us;2us;51us;3us;51us;8us;59us;13us;59us;33us;49us;34us;49us;35us;49us;36us;49us;42us;49us;44us;49us;46us;49us;47us;50us;54us;51us;63us;59us;74us;50us;75us;50us;76us;50us;77us;50us;78us;50us;83us;49us;85us;49us;87us;49us;89us;49us;91us;49us;93us;49us;96us;59us;98us;59us;101us;59us;103us;49us;104us;105us;107us;50us;108us;51us;110us;59us;113us;59us;115us;59us;117us;59us;119us;59us;121us;59us;123us;59us;125us;59us;127us;59us;129us;59us;131us;59us;133us;59us;136us;49us;137us;59us;140us;49us;141us;59us;144us;49us;145us;59us;148us;49us;149us;59us;152us;49us;153us;49us;154us;49us;155us;59us;157us;59us;159us;59us;161us;59us;163us;59us;165us;59us;167us;59us;169us;59us;172us;49us;173us;59us;175us;59us;178us;49us;179us;59us;181us;59us;3us;65535us;2us;3us;3us;54us;54us;54us;1us;65535us;80us;81us;45us;65535us;2us;79us;3us;79us;8us;11us;13us;16us;47us;79us;54us;79us;63us;64us;74us;79us;75us;79us;76us;79us;77us;79us;78us;79us;96us;97us;98us;99us;101us;102us;107us;79us;108us;79us;110us;111us;113us;114us;115us;116us;117us;118us;119us;120us;121us;122us;123us;124us;125us;126us;127us;128us;129us;130us;131us;132us;133us;134us;137us;138us;141us;142us;145us;146us;149us;150us;155us;156us;157us;158us;159us;160us;161us;162us;163us;164us;165us;166us;167us;168us;169us;170us;173us;174us;175us;176us;179us;180us;181us;182us;2us;65535us;8us;9us;13us;14us;11us;65535us;2us;72us;3us;72us;47us;71us;54us;72us;74us;66us;75us;67us;76us;68us;77us;69us;78us;70us;107us;73us;108us;72us;4us;65535us;2us;100us;3us;100us;54us;100us;108us;100us;4us;65535us;2us;55us;3us;55us;54us;55us;108us;109us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;7us;9us;26us;61us;131us;135us;137us;183us;186us;198us;203us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;1us;21us;1us;1us;1us;2us;1us;3us;1us;3us;2us;4us;5us;1us;4us;1us;4us;3us;5us;28us;29us;1us;5us;2us;6us;7us;1us;6us;1us;6us;3us;7us;28us;29us;1us;7us;5us;8us;8us;9us;10us;11us;5us;8us;9us;9us;10us;11us;5us;8us;9us;10us;10us;11us;5us;8us;9us;10us;11us;11us;5us;8us;9us;10us;11us;18us;5us;8us;9us;10us;11us;47us;5us;8us;9us;10us;11us;63us;5us;8us;9us;10us;11us;64us;5us;8us;9us;10us;11us;65us;5us;8us;9us;10us;11us;66us;5us;8us;9us;10us;11us;67us;5us;8us;9us;10us;11us;67us;5us;8us;9us;10us;11us;67us;5us;8us;9us;10us;11us;71us;5us;8us;9us;10us;11us;72us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;7us;12us;37us;38us;39us;40us;41us;42us;1us;13us;1us;14us;1us;15us;1us;16us;1us;16us;1us;17us;1us;17us;1us;18us;2us;18us;43us;1us;18us;1us;19us;2us;19us;27us;3us;19us;27us;47us;1us;20us;2us;20us;26us;2us;21us;21us;1us;22us;1us;22us;1us;24us;1us;25us;1us;27us;1us;27us;1us;27us;1us;27us;1us;29us;1us;29us;1us;30us;5us;31us;31us;32us;33us;34us;5us;31us;32us;32us;33us;34us;5us;31us;32us;33us;33us;34us;5us;31us;32us;33us;34us;34us;5us;31us;32us;33us;34us;35us;5us;31us;32us;33us;34us;43us;5us;31us;32us;33us;34us;48us;5us;31us;32us;33us;34us;49us;1us;31us;1us;32us;1us;33us;1us;34us;1us;35us;1us;36us;1us;36us;1us;36us;6us;37us;38us;39us;40us;41us;42us;1us;37us;1us;37us;1us;38us;1us;38us;1us;39us;1us;39us;1us;40us;1us;40us;1us;41us;1us;41us;1us;42us;1us;42us;1us;43us;1us;44us;1us;44us;1us;44us;1us;44us;1us;45us;1us;46us;1us;46us;1us;47us;1us;48us;1us;48us;1us;49us;1us;49us;1us;49us;1us;49us;1us;50us;1us;50us;1us;51us;1us;52us;1us;52us;1us;53us;1us;53us;1us;54us;1us;54us;1us;55us;1us;55us;1us;56us;1us;56us;1us;57us;1us;57us;1us;58us;1us;58us;1us;59us;1us;59us;1us;60us;1us;60us;1us;61us;1us;61us;1us;62us;1us;62us;1us;63us;1us;63us;1us;63us;1us;63us;1us;64us;1us;64us;1us;64us;1us;64us;1us;65us;1us;65us;1us;65us;1us;65us;1us;66us;1us;66us;1us;66us;1us;66us;1us;67us;1us;67us;1us;67us;1us;67us;1us;67us;1us;67us;1us;68us;1us;68us;1us;68us;1us;68us;1us;69us;1us;69us;1us;69us;1us;69us;1us;69us;1us;69us;1us;70us;1us;70us;1us;70us;1us;70us;1us;71us;1us;71us;1us;71us;1us;71us;1us;71us;1us;71us;1us;72us;1us;72us;1us;72us;1us;72us;1us;72us;1us;72us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;13us;15us;17us;20us;22us;24us;28us;30us;33us;35us;37us;41us;43us;49us;55us;61us;67us;73us;79us;85us;91us;97us;103us;109us;115us;121us;127us;133us;135us;137us;139us;141us;143us;151us;153us;155us;157us;159us;161us;163us;165us;167us;170us;172us;174us;177us;181us;183us;186us;189us;191us;193us;195us;197us;199us;201us;203us;205us;207us;209us;211us;217us;223us;229us;235us;241us;247us;253us;259us;261us;263us;265us;267us;269us;271us;273us;275us;282us;284us;286us;288us;290us;292us;294us;296us;298us;300us;302us;304us;306us;308us;310us;312us;314us;316us;318us;320us;322us;324us;326us;328us;330us;332us;334us;336us;338us;340us;342us;344us;346us;348us;350us;352us;354us;356us;358us;360us;362us;364us;366us;368us;370us;372us;374us;376us;378us;380us;382us;384us;386us;388us;390us;392us;394us;396us;398us;400us;402us;404us;406us;408us;410us;412us;414us;416us;418us;420us;422us;424us;426us;428us;430us;432us;434us;436us;438us;440us;442us;444us;446us;448us;450us;452us;454us;456us;458us;460us;462us;464us;466us;468us;470us;472us;474us;476us;478us;480us;|]
let _fsyacc_action_rows = 183
let _fsyacc_actionTableElements = [|2us;32768us;34us;8us;54us;5us;0us;49152us;35us;16407us;4us;78us;12us;139us;13us;143us;14us;147us;15us;167us;16us;161us;17us;157us;18us;171us;19us;177us;20us;131us;21us;133us;22us;110us;23us;113us;24us;115us;25us;117us;26us;119us;27us;121us;28us;123us;29us;125us;30us;127us;31us;129us;32us;135us;33us;151us;40us;96us;42us;106us;43us;101us;44us;112us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;36us;16407us;4us;78us;12us;139us;13us;143us;14us;147us;15us;167us;16us;161us;17us;157us;18us;171us;19us;177us;20us;131us;21us;133us;22us;110us;23us;113us;24us;115us;25us;117us;26us;119us;27us;121us;28us;123us;29us;125us;30us;127us;31us;129us;32us;135us;33us;151us;40us;96us;42us;106us;43us;101us;44us;112us;47us;44us;48us;42us;49us;47us;51us;39us;54us;4us;57us;65us;58us;53us;59us;41us;60us;40us;0us;16385us;0us;16386us;1us;32768us;35us;13us;0us;16387us;1us;32768us;58us;53us;1us;32768us;38us;10us;0us;16388us;2us;16412us;38us;12us;39us;63us;0us;16389us;1us;32768us;58us;53us;1us;32768us;38us;15us;0us;16390us;2us;16412us;38us;17us;39us;63us;0us;16391us;0us;16392us;0us;16393us;2us;16394us;45us;33us;46us;34us;2us;16395us;45us;33us;46us;34us;5us;32768us;45us;33us;46us;34us;47us;35us;48us;36us;50us;48us;4us;16431us;45us;33us;46us;34us;47us;35us;48us;36us;5us;32768us;45us;33us;46us;34us;47us;35us;48us;36us;50us;137us;5us;32768us;45us;33us;46us;34us;47us;35us;48us;36us;50us;141us;5us;32768us;45us;33us;46us;34us;47us;35us;48us;36us;50us;145us;5us;32768us;45us;33us;46us;34us;47us;35us;48us;36us;50us;149us;5us;32768us;39us;153us;45us;33us;46us;34us;47us;35us;48us;36us;5us;32768us;39us;154us;45us;33us;46us;34us;47us;35us;48us;36us;5us;32768us;45us;33us;46us;34us;47us;35us;48us;36us;50us;155us;5us;32768us;45us;33us;46us;34us;47us;35us;48us;36us;50us;173us;5us;32768us;45us;33us;46us;34us;47us;35us;48us;36us;50us;179us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16396us;6us;16396us;5us;83us;7us;85us;8us;87us;9us;91us;10us;89us;11us;93us;0us;16397us;0us;16398us;0us;16399us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16400us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16401us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;9us;32768us;4us;78us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;0us;16402us;0us;16403us;1us;16403us;55us;60us;2us;16403us;36us;103us;55us;60us;0us;16404us;4us;16404us;6us;16410us;38us;16410us;39us;16410us;41us;16410us;35us;16405us;4us;78us;12us;139us;13us;143us;14us;147us;15us;167us;16us;161us;17us;157us;18us;171us;19us;177us;20us;131us;21us;133us;22us;110us;23us;113us;24us;115us;25us;117us;26us;119us;27us;121us;28us;123us;29us;125us;30us;127us;31us;129us;32us;135us;33us;151us;40us;96us;42us;106us;43us;101us;44us;112us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;1us;32768us;38us;56us;0us;16406us;0us;16408us;0us;16409us;1us;32768us;55us;60us;1us;32768us;60us;61us;1us;32768us;56us;62us;0us;16411us;1us;32768us;58us;53us;0us;16413us;0us;16414us;0us;16415us;2us;16416us;0us;74us;2us;76us;0us;16417us;2us;16418us;0us;74us;2us;76us;0us;16419us;5us;32768us;0us;74us;1us;75us;2us;76us;3us;77us;50us;95us;5us;32768us;0us;74us;1us;75us;2us;76us;3us;77us;37us;104us;5us;32768us;0us;74us;1us;75us;2us;76us;3us;77us;50us;108us;9us;32768us;4us;78us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;9us;32768us;4us;78us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;9us;32768us;4us;78us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;9us;32768us;4us;78us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;9us;32768us;4us;78us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;1us;32768us;6us;80us;2us;32768us;52us;57us;53us;58us;0us;16420us;6us;32768us;5us;83us;7us;85us;8us;87us;9us;91us;10us;89us;11us;93us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16421us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16422us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16423us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16424us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16425us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;0us;16426us;0us;16427us;1us;32768us;58us;53us;1us;32768us;41us;98us;1us;32768us;58us;53us;0us;16428us;0us;16429us;1us;32768us;58us;53us;0us;16430us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;1us;32768us;58us;52us;0us;16432us;1us;32768us;49us;107us;9us;32768us;4us;78us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;35us;32768us;4us;78us;12us;139us;13us;143us;14us;147us;15us;167us;16us;161us;17us;157us;18us;171us;19us;177us;20us;131us;21us;133us;22us;110us;23us;113us;24us;115us;25us;117us;26us;119us;27us;121us;28us;123us;29us;125us;30us;127us;31us;129us;32us;135us;33us;151us;40us;96us;42us;106us;43us;101us;44us;112us;47us;44us;48us;42us;49us;47us;51us;39us;57us;65us;58us;53us;59us;41us;60us;40us;0us;16433us;1us;32768us;58us;53us;0us;16434us;0us;16435us;1us;32768us;58us;53us;0us;16436us;1us;32768us;58us;53us;0us;16437us;1us;32768us;58us;53us;0us;16438us;1us;32768us;58us;53us;0us;16439us;1us;32768us;58us;53us;0us;16440us;1us;32768us;58us;53us;0us;16441us;1us;32768us;58us;53us;0us;16442us;1us;32768us;58us;53us;0us;16443us;1us;32768us;58us;53us;0us;16444us;1us;32768us;58us;53us;0us;16445us;1us;32768us;58us;53us;0us;16446us;1us;32768us;49us;136us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;1us;32768us;58us;53us;0us;16447us;1us;32768us;49us;140us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;1us;32768us;58us;53us;0us;16448us;1us;32768us;49us;144us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;1us;32768us;58us;53us;0us;16449us;1us;32768us;49us;148us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;1us;32768us;58us;53us;0us;16450us;1us;32768us;49us;152us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;1us;32768us;58us;53us;0us;16451us;1us;32768us;58us;53us;1us;32768us;39us;159us;1us;32768us;58us;53us;0us;16452us;1us;32768us;58us;53us;1us;32768us;39us;163us;1us;32768us;58us;53us;1us;32768us;39us;165us;1us;32768us;58us;53us;0us;16453us;1us;32768us;58us;53us;1us;32768us;39us;169us;1us;32768us;58us;53us;0us;16454us;1us;32768us;49us;172us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;1us;32768us;58us;53us;1us;32768us;39us;175us;1us;32768us;58us;53us;0us;16455us;1us;32768us;49us;178us;7us;32768us;47us;44us;48us;42us;49us;46us;51us;39us;58us;52us;59us;41us;60us;40us;1us;32768us;58us;53us;1us;32768us;39us;181us;1us;32768us;58us;53us;0us;16456us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;40us;77us;78us;79us;81us;82us;84us;86us;87us;90us;91us;93us;95us;96us;99us;100us;101us;102us;105us;108us;114us;119us;125us;131us;137us;143us;149us;155us;161us;167us;173us;181us;189us;197us;205us;206us;213us;214us;215us;216us;224us;225us;233us;234us;242us;252us;253us;254us;256us;259us;260us;265us;301us;303us;304us;305us;306us;308us;310us;312us;313us;315us;316us;317us;318us;321us;322us;325us;326us;332us;338us;344us;354us;364us;374us;384us;394us;396us;399us;400us;407us;415us;416us;424us;425us;433us;434us;442us;443us;451us;452us;460us;461us;462us;464us;466us;468us;469us;470us;472us;473us;481us;483us;484us;486us;496us;532us;533us;535us;536us;537us;539us;540us;542us;543us;545us;546us;548us;549us;551us;552us;554us;555us;557us;558us;560us;561us;563us;564us;566us;567us;569us;570us;572us;580us;582us;583us;585us;593us;595us;596us;598us;606us;608us;609us;611us;619us;621us;622us;624us;632us;640us;648us;650us;651us;653us;655us;657us;658us;660us;662us;664us;666us;668us;669us;671us;673us;675us;676us;678us;686us;688us;690us;692us;693us;695us;703us;705us;707us;709us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;1us;2us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;1us;1us;2us;2us;3us;1us;1us;2us;2us;0us;1us;1us;1us;4us;1us;3us;1us;3us;3us;3us;3us;2us;3us;3us;3us;3us;3us;3us;3us;3us;4us;1us;2us;3us;3us;5us;2us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;5us;5us;5us;5us;9us;4us;6us;4us;7us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;3us;3us;4us;4us;5us;5us;5us;5us;5us;6us;6us;6us;6us;6us;6us;6us;7us;8us;8us;8us;9us;9us;10us;10us;11us;11us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;13us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;16385us;16386us;65535us;16387us;65535us;65535us;16388us;65535us;16389us;65535us;65535us;16390us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16396us;65535us;16397us;16398us;16399us;65535us;16400us;65535us;16401us;65535us;65535us;16402us;16403us;65535us;65535us;16404us;65535us;65535us;65535us;16406us;16408us;16409us;65535us;65535us;65535us;16411us;65535us;16413us;16414us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16420us;65535us;65535us;16421us;65535us;16422us;65535us;16423us;65535us;16424us;65535us;16425us;65535us;16426us;16427us;65535us;65535us;65535us;16428us;16429us;65535us;16430us;65535us;65535us;16432us;65535us;65535us;65535us;16433us;65535us;16434us;16435us;65535us;16436us;65535us;16437us;65535us;16438us;65535us;16439us;65535us;16440us;65535us;16441us;65535us;16442us;65535us;16443us;65535us;16444us;65535us;16445us;65535us;16446us;65535us;65535us;65535us;16447us;65535us;65535us;65535us;16448us;65535us;65535us;65535us;16449us;65535us;65535us;65535us;16450us;65535us;65535us;65535us;65535us;65535us;16451us;65535us;65535us;65535us;16452us;65535us;65535us;65535us;65535us;65535us;16453us;65535us;65535us;65535us;16454us;65535us;65535us;65535us;65535us;65535us;16455us;65535us;65535us;65535us;65535us;65535us;16456us;|]
let _fsyacc_reductions = lazy [|
# 511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.operator * AST.operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 520 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            let _2 = parseState.GetInput(2) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                     (_1, _2) 
                   )
# 50 "Parser.fsy"
                 : AST.operator * AST.operator));
# 532 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                     (NOP, NOP) 
                   )
# 51 "Parser.fsy"
                 : AST.operator * AST.operator));
# 542 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qallocation in
            let _2 = parseState.GetInput(2) :?> 'gentype_callocation in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                               AllocQC(_1, _2) 
                   )
# 60 "Parser.fsy"
                 : operator));
# 554 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                           _2 
                   )
# 63 "Parser.fsy"
                 : 'gentype_qallocation));
# 565 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                           _2 
                   )
# 64 "Parser.fsy"
                 : 'gentype_qallocation));
# 576 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                           _2 
                   )
# 68 "Parser.fsy"
                 : 'gentype_callocation));
# 587 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                           _2 
                   )
# 69 "Parser.fsy"
                 : 'gentype_callocation));
# 598 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                           TimesExpr(_1,_3) 
                   )
# 76 "Parser.fsy"
                 : arithExpr));
# 610 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                           DivExpr(_1,_3) 
                   )
# 77 "Parser.fsy"
                 : arithExpr));
# 622 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                           PlusExpr(_1,_3) 
                   )
# 78 "Parser.fsy"
                 : arithExpr));
# 634 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                           MinusExpr(_1,_3) 
                   )
# 79 "Parser.fsy"
                 : arithExpr));
# 646 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                           _1 
                   )
# 80 "Parser.fsy"
                 : arithExpr));
# 657 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                           Pi 
                   )
# 83 "Parser.fsy"
                 : arithExpr));
# 667 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                           Num(_1) 
                   )
# 84 "Parser.fsy"
                 : arithExpr));
# 678 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                           Float(_1) 
                   )
# 85 "Parser.fsy"
                 : arithExpr));
# 689 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                           UMinusExpr(_2) 
                   )
# 86 "Parser.fsy"
                 : arithExpr));
# 700 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                           UPlusExpr(_2) 
                   )
# 87 "Parser.fsy"
                 : arithExpr));
# 711 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                           _2 
                   )
# 88 "Parser.fsy"
                 : arithExpr));
# 722 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                           StrA(_1) 
                   )
# 89 "Parser.fsy"
                 : arithExpr));
# 733 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                           _1 
                   )
# 93 "Parser.fsy"
                 : 'gentype_str));
# 744 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            let _2 = parseState.GetInput(2) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                         Order(_1, _2) 
                   )
# 97 "Parser.fsy"
                 : 'gentype_statement));
# 756 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                         _1 
                   )
# 98 "Parser.fsy"
                 : 'gentype_statement));
# 767 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                         NOP 
                   )
# 99 "Parser.fsy"
                 : 'gentype_statement));
# 777 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                            Click 
                   )
# 104 "Parser.fsy"
                 : result));
# 787 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                            NoClick 
                   )
# 105 "Parser.fsy"
                 : result));
# 797 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                           BitS(_1) 
                   )
# 109 "Parser.fsy"
                 : bit));
# 808 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                           BitA(_1, _3) 
                   )
# 110 "Parser.fsy"
                 : bit));
# 820 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                               _1 
                   )
# 114 "Parser.fsy"
                 : bit));
# 831 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            let _3 = parseState.GetInput(3) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                               BitSeq(_1, _3) 
                   )
# 115 "Parser.fsy"
                 : bit));
# 843 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                   Bool(_1) 
                   )
# 121 "Parser.fsy"
                 : boolExpr));
# 854 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                                   LogAnd(_1,_3) 
                   )
# 122 "Parser.fsy"
                 : boolExpr));
# 866 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                   LogOr(_1,_3) 
                   )
# 123 "Parser.fsy"
                 : boolExpr));
# 878 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                                   LogAnd(_1,_3) 
                   )
# 124 "Parser.fsy"
                 : boolExpr));
# 890 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                                   LogOr(_1,_3) 
                   )
# 125 "Parser.fsy"
                 : boolExpr));
# 902 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                   Neg(_2)
                   )
# 126 "Parser.fsy"
                 : boolExpr));
# 913 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            let _3 = parseState.GetInput(3) :?> result in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                                   Check(_1,_3) 
                   )
# 127 "Parser.fsy"
                 : boolExpr));
# 925 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                                   Equal(_1,_3) 
                   )
# 128 "Parser.fsy"
                 : boolExpr));
# 937 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                                   NotEqual(_1,_3) 
                   )
# 129 "Parser.fsy"
                 : boolExpr));
# 949 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                                   Greater(_1,_3) 
                   )
# 130 "Parser.fsy"
                 : boolExpr));
# 961 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                                   GreaterEqual(_1,_3) 
                   )
# 131 "Parser.fsy"
                 : boolExpr));
# 973 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                                   Less(_1,_3) 
                   )
# 132 "Parser.fsy"
                 : boolExpr));
# 985 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                                   LessEqual(_1,_3) 
                   )
# 133 "Parser.fsy"
                 : boolExpr));
# 997 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                                   _2 
                   )
# 134 "Parser.fsy"
                 : boolExpr));
# 1008 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                   Measure(_2, _4) 
                   )
# 140 "Parser.fsy"
                 : operator));
# 1020 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                                         _1 
                   )
# 145 "Parser.fsy"
                 : operator));
# 1031 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                                         Reset(_2) 
                   )
# 146 "Parser.fsy"
                 : operator));
# 1042 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                                         Assign(_1, _3) 
                   )
# 147 "Parser.fsy"
                 : operator));
# 1054 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                                         AssignB(_3, _1) 
                   )
# 148 "Parser.fsy"
                 : operator));
# 1066 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> boolExpr in
            let _5 = parseState.GetInput(5) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                                         Condition(_3, _5) 
                   )
# 149 "Parser.fsy"
                 : operator));
# 1078 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                                         Barrier(_2) 
                   )
# 150 "Parser.fsy"
                 : operator));
# 1089 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                                         PhaseDisk 
                   )
# 151 "Parser.fsy"
                 : operator));
# 1099 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                   H(_2) 
                   )
# 155 "Parser.fsy"
                 : operator));
# 1110 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                                   I(_2) 
                   )
# 156 "Parser.fsy"
                 : operator));
# 1121 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                   X(_2) 
                   )
# 157 "Parser.fsy"
                 : operator));
# 1132 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                   Y(_2) 
                   )
# 158 "Parser.fsy"
                 : operator));
# 1143 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                   Z(_2) 
                   )
# 159 "Parser.fsy"
                 : operator));
# 1154 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                   TDG(_2) 
                   )
# 160 "Parser.fsy"
                 : operator));
# 1165 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                   T(_2) 
                   )
# 161 "Parser.fsy"
                 : operator));
# 1176 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                   S(_2) 
                   )
# 162 "Parser.fsy"
                 : operator));
# 1187 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                   SDG(_2) 
                   )
# 163 "Parser.fsy"
                 : operator));
# 1198 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                   SX(_2) 
                   )
# 164 "Parser.fsy"
                 : operator));
# 1209 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                   SXDG(_2) 
                   )
# 165 "Parser.fsy"
                 : operator));
# 1220 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                              P(_3, _5) 
                   )
# 167 "Parser.fsy"
                 : operator));
# 1232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                              RZ(_3, _5) 
                   )
# 168 "Parser.fsy"
                 : operator));
# 1244 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                              RY(_3, _5) 
                   )
# 169 "Parser.fsy"
                 : operator));
# 1256 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                              RX(_3, _5) 
                   )
# 170 "Parser.fsy"
                 : operator));
# 1268 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> arithExpr in
            let _7 = parseState.GetInput(7) :?> arithExpr in
            let _9 = parseState.GetInput(9) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                                                              U(_3, _5, _7, _9) 
                   )
# 171 "Parser.fsy"
                 : operator));
# 1282 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                              CNOT(_2, _4) 
                   )
# 173 "Parser.fsy"
                 : operator));
# 1294 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            let _6 = parseState.GetInput(6) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                              CCX(_2, _4, _6) 
                   )
# 174 "Parser.fsy"
                 : operator));
# 1307 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                              AST.SWAP(_2, _4) 
                   )
# 175 "Parser.fsy"
                 : operator));
# 1319 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            let _7 = parseState.GetInput(7) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                                           RXX(_3, _5, _7) 
                   )
# 177 "Parser.fsy"
                 : operator));
# 1332 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            let _7 = parseState.GetInput(7) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                                           RZZ(_3, _5, _7) 
                   )
# 178 "Parser.fsy"
                 : operator));
|]
# 1346 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 64;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : AST.operator * AST.operator =
    engine lexer lexbuf 0 :?> _
