// Implementation file for parser generated by fsyacc
module QuantumLanguage.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SAND
  | SOR
  | AND
  | OR
  | NEG
  | EQUAL
  | NOTEQ
  | GREATER
  | LESS
  | GREATEREQ
  | LESSEQ
  | RZGATE
  | RYGATE
  | RXGATE
  | SWAP
  | TOFFOLI
  | CTRLNOT
  | SYMMRXX
  | SYMMRZZ
  | SQRTNOT
  | SQRTXDG
  | BARRIER
  | HADAMARD
  | IDENTITY
  | PAULIX
  | PAULIY
  | PAULIZ
  | TDAGGER
  | TGATE
  | SGATE
  | SDAGGER
  | PHASE
  | UNITARY
  | QUANTREG
  | CLASSREG
  | ASSIGN
  | ORDER
  | COMMA
  | MEASURE
  | MESHOST
  | CONDITIONAL
  | RESET
  | PHASEDISK
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | LPAR
  | RPAR
  | MATHPI
  | EOF
  | LBRAK
  | RBRAK
  | BOOL of (bool)
  | VARIABLE of (string)
  | FLOAT of (float)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATEREQ
    | TOKEN_LESSEQ
    | TOKEN_RZGATE
    | TOKEN_RYGATE
    | TOKEN_RXGATE
    | TOKEN_SWAP
    | TOKEN_TOFFOLI
    | TOKEN_CTRLNOT
    | TOKEN_SYMMRXX
    | TOKEN_SYMMRZZ
    | TOKEN_SQRTNOT
    | TOKEN_SQRTXDG
    | TOKEN_BARRIER
    | TOKEN_HADAMARD
    | TOKEN_IDENTITY
    | TOKEN_PAULIX
    | TOKEN_PAULIY
    | TOKEN_PAULIZ
    | TOKEN_TDAGGER
    | TOKEN_TGATE
    | TOKEN_SGATE
    | TOKEN_SDAGGER
    | TOKEN_PHASE
    | TOKEN_UNITARY
    | TOKEN_QUANTREG
    | TOKEN_CLASSREG
    | TOKEN_ASSIGN
    | TOKEN_ORDER
    | TOKEN_COMMA
    | TOKEN_MEASURE
    | TOKEN_MESHOST
    | TOKEN_CONDITIONAL
    | TOKEN_RESET
    | TOKEN_PHASEDISK
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MATHPI
    | TOKEN_EOF
    | TOKEN_LBRAK
    | TOKEN_RBRAK
    | TOKEN_BOOL
    | TOKEN_VARIABLE
    | TOKEN_FLOAT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_expression1
    | NONTERM_str
    | NONTERM_bit
    | NONTERM_bitsequence
    | NONTERM_boolexpression
    | NONTERM_allocation
    | NONTERM_measurement
    | NONTERM_operator

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | SAND  -> 0 
  | SOR  -> 1 
  | AND  -> 2 
  | OR  -> 3 
  | NEG  -> 4 
  | EQUAL  -> 5 
  | NOTEQ  -> 6 
  | GREATER  -> 7 
  | LESS  -> 8 
  | GREATEREQ  -> 9 
  | LESSEQ  -> 10 
  | RZGATE  -> 11 
  | RYGATE  -> 12 
  | RXGATE  -> 13 
  | SWAP  -> 14 
  | TOFFOLI  -> 15 
  | CTRLNOT  -> 16 
  | SYMMRXX  -> 17 
  | SYMMRZZ  -> 18 
  | SQRTNOT  -> 19 
  | SQRTXDG  -> 20 
  | BARRIER  -> 21 
  | HADAMARD  -> 22 
  | IDENTITY  -> 23 
  | PAULIX  -> 24 
  | PAULIY  -> 25 
  | PAULIZ  -> 26 
  | TDAGGER  -> 27 
  | TGATE  -> 28 
  | SGATE  -> 29 
  | SDAGGER  -> 30 
  | PHASE  -> 31 
  | UNITARY  -> 32 
  | QUANTREG  -> 33 
  | CLASSREG  -> 34 
  | ASSIGN  -> 35 
  | ORDER  -> 36 
  | COMMA  -> 37 
  | MEASURE  -> 38 
  | MESHOST  -> 39 
  | CONDITIONAL  -> 40 
  | RESET  -> 41 
  | PHASEDISK  -> 42 
  | TIMES  -> 43 
  | DIV  -> 44 
  | PLUS  -> 45 
  | MINUS  -> 46 
  | LPAR  -> 47 
  | RPAR  -> 48 
  | MATHPI  -> 49 
  | EOF  -> 50 
  | LBRAK  -> 51 
  | RBRAK  -> 52 
  | BOOL _ -> 53 
  | VARIABLE _ -> 54 
  | FLOAT _ -> 55 
  | NUM _ -> 56 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SAND 
  | 1 -> TOKEN_SOR 
  | 2 -> TOKEN_AND 
  | 3 -> TOKEN_OR 
  | 4 -> TOKEN_NEG 
  | 5 -> TOKEN_EQUAL 
  | 6 -> TOKEN_NOTEQ 
  | 7 -> TOKEN_GREATER 
  | 8 -> TOKEN_LESS 
  | 9 -> TOKEN_GREATEREQ 
  | 10 -> TOKEN_LESSEQ 
  | 11 -> TOKEN_RZGATE 
  | 12 -> TOKEN_RYGATE 
  | 13 -> TOKEN_RXGATE 
  | 14 -> TOKEN_SWAP 
  | 15 -> TOKEN_TOFFOLI 
  | 16 -> TOKEN_CTRLNOT 
  | 17 -> TOKEN_SYMMRXX 
  | 18 -> TOKEN_SYMMRZZ 
  | 19 -> TOKEN_SQRTNOT 
  | 20 -> TOKEN_SQRTXDG 
  | 21 -> TOKEN_BARRIER 
  | 22 -> TOKEN_HADAMARD 
  | 23 -> TOKEN_IDENTITY 
  | 24 -> TOKEN_PAULIX 
  | 25 -> TOKEN_PAULIY 
  | 26 -> TOKEN_PAULIZ 
  | 27 -> TOKEN_TDAGGER 
  | 28 -> TOKEN_TGATE 
  | 29 -> TOKEN_SGATE 
  | 30 -> TOKEN_SDAGGER 
  | 31 -> TOKEN_PHASE 
  | 32 -> TOKEN_UNITARY 
  | 33 -> TOKEN_QUANTREG 
  | 34 -> TOKEN_CLASSREG 
  | 35 -> TOKEN_ASSIGN 
  | 36 -> TOKEN_ORDER 
  | 37 -> TOKEN_COMMA 
  | 38 -> TOKEN_MEASURE 
  | 39 -> TOKEN_MESHOST 
  | 40 -> TOKEN_CONDITIONAL 
  | 41 -> TOKEN_RESET 
  | 42 -> TOKEN_PHASEDISK 
  | 43 -> TOKEN_TIMES 
  | 44 -> TOKEN_DIV 
  | 45 -> TOKEN_PLUS 
  | 46 -> TOKEN_MINUS 
  | 47 -> TOKEN_LPAR 
  | 48 -> TOKEN_RPAR 
  | 49 -> TOKEN_MATHPI 
  | 50 -> TOKEN_EOF 
  | 51 -> TOKEN_LBRAK 
  | 52 -> TOKEN_RBRAK 
  | 53 -> TOKEN_BOOL 
  | 54 -> TOKEN_VARIABLE 
  | 55 -> TOKEN_FLOAT 
  | 56 -> TOKEN_NUM 
  | 59 -> TOKEN_end_of_input
  | 57 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression1 
    | 8 -> NONTERM_expression1 
    | 9 -> NONTERM_expression1 
    | 10 -> NONTERM_expression1 
    | 11 -> NONTERM_expression1 
    | 12 -> NONTERM_expression1 
    | 13 -> NONTERM_expression1 
    | 14 -> NONTERM_str 
    | 15 -> NONTERM_bit 
    | 16 -> NONTERM_bit 
    | 17 -> NONTERM_bitsequence 
    | 18 -> NONTERM_bitsequence 
    | 19 -> NONTERM_boolexpression 
    | 20 -> NONTERM_boolexpression 
    | 21 -> NONTERM_boolexpression 
    | 22 -> NONTERM_boolexpression 
    | 23 -> NONTERM_boolexpression 
    | 24 -> NONTERM_boolexpression 
    | 25 -> NONTERM_boolexpression 
    | 26 -> NONTERM_boolexpression 
    | 27 -> NONTERM_boolexpression 
    | 28 -> NONTERM_boolexpression 
    | 29 -> NONTERM_boolexpression 
    | 30 -> NONTERM_boolexpression 
    | 31 -> NONTERM_boolexpression 
    | 32 -> NONTERM_boolexpression 
    | 33 -> NONTERM_allocation 
    | 34 -> NONTERM_allocation 
    | 35 -> NONTERM_measurement 
    | 36 -> NONTERM_operator 
    | 37 -> NONTERM_operator 
    | 38 -> NONTERM_operator 
    | 39 -> NONTERM_operator 
    | 40 -> NONTERM_operator 
    | 41 -> NONTERM_operator 
    | 42 -> NONTERM_operator 
    | 43 -> NONTERM_operator 
    | 44 -> NONTERM_operator 
    | 45 -> NONTERM_operator 
    | 46 -> NONTERM_operator 
    | 47 -> NONTERM_operator 
    | 48 -> NONTERM_operator 
    | 49 -> NONTERM_operator 
    | 50 -> NONTERM_operator 
    | 51 -> NONTERM_operator 
    | 52 -> NONTERM_operator 
    | 53 -> NONTERM_operator 
    | 54 -> NONTERM_operator 
    | 55 -> NONTERM_operator 
    | 56 -> NONTERM_operator 
    | 57 -> NONTERM_operator 
    | 58 -> NONTERM_operator 
    | 59 -> NONTERM_operator 
    | 60 -> NONTERM_operator 
    | 61 -> NONTERM_operator 
    | 62 -> NONTERM_operator 
    | 63 -> NONTERM_operator 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 59 
let _fsyacc_tagOfErrorTerminal = 57

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | NOTEQ  -> "NOTEQ" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATEREQ  -> "GREATEREQ" 
  | LESSEQ  -> "LESSEQ" 
  | RZGATE  -> "RZGATE" 
  | RYGATE  -> "RYGATE" 
  | RXGATE  -> "RXGATE" 
  | SWAP  -> "SWAP" 
  | TOFFOLI  -> "TOFFOLI" 
  | CTRLNOT  -> "CTRLNOT" 
  | SYMMRXX  -> "SYMMRXX" 
  | SYMMRZZ  -> "SYMMRZZ" 
  | SQRTNOT  -> "SQRTNOT" 
  | SQRTXDG  -> "SQRTXDG" 
  | BARRIER  -> "BARRIER" 
  | HADAMARD  -> "HADAMARD" 
  | IDENTITY  -> "IDENTITY" 
  | PAULIX  -> "PAULIX" 
  | PAULIY  -> "PAULIY" 
  | PAULIZ  -> "PAULIZ" 
  | TDAGGER  -> "TDAGGER" 
  | TGATE  -> "TGATE" 
  | SGATE  -> "SGATE" 
  | SDAGGER  -> "SDAGGER" 
  | PHASE  -> "PHASE" 
  | UNITARY  -> "UNITARY" 
  | QUANTREG  -> "QUANTREG" 
  | CLASSREG  -> "CLASSREG" 
  | ASSIGN  -> "ASSIGN" 
  | ORDER  -> "ORDER" 
  | COMMA  -> "COMMA" 
  | MEASURE  -> "MEASURE" 
  | MESHOST  -> "MESHOST" 
  | CONDITIONAL  -> "CONDITIONAL" 
  | RESET  -> "RESET" 
  | PHASEDISK  -> "PHASEDISK" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | MATHPI  -> "MATHPI" 
  | EOF  -> "EOF" 
  | LBRAK  -> "LBRAK" 
  | RBRAK  -> "RBRAK" 
  | BOOL _ -> "BOOL" 
  | VARIABLE _ -> "VARIABLE" 
  | FLOAT _ -> "FLOAT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATEREQ  -> (null : System.Object) 
  | LESSEQ  -> (null : System.Object) 
  | RZGATE  -> (null : System.Object) 
  | RYGATE  -> (null : System.Object) 
  | RXGATE  -> (null : System.Object) 
  | SWAP  -> (null : System.Object) 
  | TOFFOLI  -> (null : System.Object) 
  | CTRLNOT  -> (null : System.Object) 
  | SYMMRXX  -> (null : System.Object) 
  | SYMMRZZ  -> (null : System.Object) 
  | SQRTNOT  -> (null : System.Object) 
  | SQRTXDG  -> (null : System.Object) 
  | BARRIER  -> (null : System.Object) 
  | HADAMARD  -> (null : System.Object) 
  | IDENTITY  -> (null : System.Object) 
  | PAULIX  -> (null : System.Object) 
  | PAULIY  -> (null : System.Object) 
  | PAULIZ  -> (null : System.Object) 
  | TDAGGER  -> (null : System.Object) 
  | TGATE  -> (null : System.Object) 
  | SGATE  -> (null : System.Object) 
  | SDAGGER  -> (null : System.Object) 
  | PHASE  -> (null : System.Object) 
  | UNITARY  -> (null : System.Object) 
  | QUANTREG  -> (null : System.Object) 
  | CLASSREG  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MEASURE  -> (null : System.Object) 
  | MESHOST  -> (null : System.Object) 
  | CONDITIONAL  -> (null : System.Object) 
  | RESET  -> (null : System.Object) 
  | PHASEDISK  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | MATHPI  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LBRAK  -> (null : System.Object) 
  | RBRAK  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;28us;65535us;28us;5us;29us;6us;30us;7us;31us;8us;42us;9us;43us;10us;63us;11us;64us;11us;65us;11us;66us;11us;67us;11us;68us;12us;69us;13us;70us;14us;71us;15us;72us;16us;73us;17us;89us;18us;97us;11us;125us;19us;129us;20us;133us;21us;137us;22us;141us;23us;142us;24us;143us;25us;161us;26us;167us;27us;30us;65535us;28us;32us;29us;32us;30us;32us;31us;32us;38us;39us;40us;41us;42us;32us;43us;32us;63us;32us;64us;32us;65us;32us;66us;32us;67us;32us;68us;32us;69us;32us;70us;32us;71us;32us;72us;32us;73us;32us;89us;32us;97us;32us;125us;32us;129us;32us;133us;32us;137us;32us;141us;32us;142us;32us;143us;32us;161us;32us;167us;32us;68us;65535us;2us;88us;28us;36us;29us;36us;30us;36us;31us;36us;38us;36us;40us;36us;42us;36us;43us;37us;53us;47us;63us;37us;64us;37us;65us;37us;66us;37us;67us;37us;68us;36us;69us;36us;70us;36us;71us;36us;72us;36us;73us;36us;75us;47us;78us;47us;81us;47us;84us;47us;86us;47us;89us;36us;92us;88us;94us;47us;97us;37us;98us;88us;99us;47us;102us;47us;104us;47us;106us;47us;108us;47us;110us;47us;112us;47us;114us;47us;116us;47us;118us;47us;120us;47us;122us;47us;125us;36us;126us;47us;129us;36us;130us;47us;133us;36us;134us;47us;137us;36us;138us;47us;141us;36us;142us;36us;143us;36us;144us;47us;146us;47us;148us;47us;150us;47us;152us;47us;154us;47us;156us;47us;158us;47us;161us;36us;162us;47us;164us;47us;167us;36us;168us;47us;170us;47us;35us;65535us;53us;54us;75us;52us;78us;51us;81us;82us;84us;85us;86us;87us;94us;95us;99us;100us;102us;103us;104us;105us;106us;107us;108us;109us;110us;111us;112us;113us;114us;115us;116us;117us;118us;119us;120us;121us;122us;123us;126us;127us;130us;131us;134us;135us;138us;139us;144us;145us;146us;147us;148us;149us;150us;151us;152us;153us;154us;155us;156us;157us;158us;159us;162us;163us;164us;165us;168us;169us;170us;171us;2us;65535us;75us;76us;78us;79us;7us;65535us;43us;61us;63us;56us;64us;57us;65us;58us;66us;59us;67us;60us;97us;62us;1us;65535us;0us;2us;3us;65535us;2us;93us;92us;93us;98us;93us;3us;65535us;2us;3us;92us;90us;98us;91us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;32us;63us;132us;168us;171us;179us;181us;185us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;1us;37us;1us;1us;5us;2us;2us;3us;4us;5us;5us;2us;3us;3us;4us;5us;5us;2us;3us;4us;4us;5us;5us;2us;3us;4us;5us;5us;5us;2us;3us;4us;5us;13us;11us;2us;3us;4us;5us;13us;26us;27us;28us;29us;30us;31us;10us;2us;3us;4us;5us;26us;27us;28us;29us;30us;31us;5us;2us;3us;4us;5us;26us;5us;2us;3us;4us;5us;27us;5us;2us;3us;4us;5us;28us;5us;2us;3us;4us;5us;29us;5us;2us;3us;4us;5us;30us;5us;2us;3us;4us;5us;31us;5us;2us;3us;4us;5us;36us;5us;2us;3us;4us;5us;54us;5us;2us;3us;4us;5us;55us;5us;2us;3us;4us;5us;56us;5us;2us;3us;4us;5us;57us;5us;2us;3us;4us;5us;58us;5us;2us;3us;4us;5us;58us;5us;2us;3us;4us;5us;58us;5us;2us;3us;4us;5us;62us;5us;2us;3us;4us;5us;63us;1us;2us;1us;3us;1us;4us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;2us;10us;20us;1us;11us;1us;11us;1us;12us;1us;12us;1us;13us;2us;13us;32us;1us;13us;1us;14us;2us;14us;15us;1us;16us;1us;16us;1us;16us;1us;16us;2us;17us;18us;3us;17us;18us;34us;1us;18us;1us;18us;1us;19us;5us;21us;21us;22us;23us;24us;5us;21us;22us;22us;23us;24us;5us;21us;22us;23us;23us;24us;5us;21us;22us;23us;24us;24us;5us;21us;22us;23us;24us;25us;5us;21us;22us;23us;24us;32us;5us;21us;22us;23us;24us;40us;1us;21us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;30us;1us;31us;1us;32us;2us;33us;34us;1us;33us;1us;33us;1us;33us;1us;33us;1us;34us;1us;34us;1us;34us;1us;34us;1us;35us;1us;35us;1us;35us;1us;35us;1us;36us;1us;36us;2us;37us;37us;2us;37us;40us;1us;37us;1us;38us;1us;39us;1us;39us;1us;40us;1us;40us;1us;40us;1us;41us;1us;41us;1us;42us;1us;43us;1us;43us;1us;44us;1us;44us;1us;45us;1us;45us;1us;46us;1us;46us;1us;47us;1us;47us;1us;48us;1us;48us;1us;49us;1us;49us;1us;50us;1us;50us;1us;51us;1us;51us;1us;52us;1us;52us;1us;53us;1us;53us;1us;54us;1us;54us;1us;54us;1us;54us;1us;55us;1us;55us;1us;55us;1us;55us;1us;56us;1us;56us;1us;56us;1us;56us;1us;57us;1us;57us;1us;57us;1us;57us;1us;58us;1us;58us;1us;58us;1us;58us;1us;58us;1us;58us;1us;59us;1us;59us;1us;59us;1us;59us;1us;60us;1us;60us;1us;60us;1us;60us;1us;60us;1us;60us;1us;61us;1us;61us;1us;61us;1us;61us;1us;62us;1us;62us;1us;62us;1us;62us;1us;62us;1us;62us;1us;63us;1us;63us;1us;63us;1us;63us;1us;63us;1us;63us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;17us;23us;29us;35us;41us;53us;64us;70us;76us;82us;88us;94us;100us;106us;112us;118us;124us;130us;136us;142us;148us;154us;160us;162us;164us;166us;168us;170us;172us;174us;176us;178us;181us;183us;185us;187us;189us;191us;194us;196us;198us;201us;203us;205us;207us;209us;212us;216us;218us;220us;222us;228us;234us;240us;246us;252us;258us;264us;266us;268us;270us;272us;274us;276us;278us;280us;282us;284us;286us;288us;291us;293us;295us;297us;299us;301us;303us;305us;307us;309us;311us;313us;315us;317us;319us;322us;325us;327us;329us;331us;333us;335us;337us;339us;341us;343us;345us;347us;349us;351us;353us;355us;357us;359us;361us;363us;365us;367us;369us;371us;373us;375us;377us;379us;381us;383us;385us;387us;389us;391us;393us;395us;397us;399us;401us;403us;405us;407us;409us;411us;413us;415us;417us;419us;421us;423us;425us;427us;429us;431us;433us;435us;437us;439us;441us;443us;445us;447us;449us;451us;453us;455us;457us;459us;461us;463us;465us;467us;469us;471us;473us;475us;477us;479us;481us;483us;|]
let _fsyacc_action_rows = 172
let _fsyacc_actionTableElements = [|1us;32768us;33us;75us;0us;49152us;27us;32768us;11us;128us;12us;132us;13us;136us;14us;156us;15us;150us;16us;146us;17us;160us;18us;166us;19us;120us;20us;122us;21us;99us;22us;102us;23us;104us;24us;106us;25us;108us;26us;110us;27us;112us;28us;114us;29us;116us;30us;118us;31us;124us;32us;140us;38us;84us;40us;96us;41us;94us;42us;101us;54us;45us;2us;32768us;36us;92us;50us;4us;0us;16385us;0us;16386us;0us;16387us;2us;16388us;43us;28us;44us;29us;2us;16389us;43us;28us;44us;29us;5us;32768us;43us;28us;44us;29us;45us;30us;46us;31us;48us;44us;11us;32768us;5us;68us;6us;69us;7us;70us;8us;72us;9us;71us;10us;73us;43us;28us;44us;29us;45us;30us;46us;31us;48us;44us;10us;32768us;5us;68us;6us;69us;7us;70us;8us;72us;9us;71us;10us;73us;43us;28us;44us;29us;45us;30us;46us;31us;4us;16410us;43us;28us;44us;29us;45us;30us;46us;31us;4us;16411us;43us;28us;44us;29us;45us;30us;46us;31us;4us;16412us;43us;28us;44us;29us;45us;30us;46us;31us;4us;16413us;43us;28us;44us;29us;45us;30us;46us;31us;4us;16414us;43us;28us;44us;29us;45us;30us;46us;31us;4us;16415us;43us;28us;44us;29us;45us;30us;46us;31us;4us;16420us;43us;28us;44us;29us;45us;30us;46us;31us;5us;32768us;43us;28us;44us;29us;45us;30us;46us;31us;48us;126us;5us;32768us;43us;28us;44us;29us;45us;30us;46us;31us;48us;130us;5us;32768us;43us;28us;44us;29us;45us;30us;46us;31us;48us;134us;5us;32768us;43us;28us;44us;29us;45us;30us;46us;31us;48us;138us;5us;32768us;37us;142us;43us;28us;44us;29us;45us;30us;46us;31us;5us;32768us;37us;143us;43us;28us;44us;29us;45us;30us;46us;31us;5us;32768us;43us;28us;44us;29us;45us;30us;46us;31us;48us;144us;5us;32768us;43us;28us;44us;29us;45us;30us;46us;31us;48us;162us;5us;32768us;43us;28us;44us;29us;45us;30us;46us;31us;48us;168us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;0us;16390us;0us;16391us;0us;16392us;0us;16393us;0us;16394us;4us;16394us;0us;16404us;1us;16404us;2us;16404us;3us;16404us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;0us;16395us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;0us;16396us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;9us;32768us;4us;67us;45us;40us;46us;38us;47us;43us;49us;35us;53us;55us;54us;45us;55us;34us;56us;33us;0us;16397us;0us;16398us;29us;16399us;0us;16398us;1us;16398us;2us;16398us;3us;16398us;4us;16398us;5us;16398us;6us;16398us;7us;16398us;8us;16398us;9us;16398us;10us;16398us;33us;16398us;34us;16398us;35us;16398us;43us;16398us;44us;16398us;45us;16398us;46us;16398us;47us;16398us;48us;16398us;49us;16398us;51us;16398us;52us;16398us;53us;16398us;55us;16398us;56us;16398us;57us;16398us;58us;16398us;59us;16398us;1us;32768us;51us;48us;1us;32768us;56us;49us;1us;32768us;52us;50us;0us;16400us;1us;16401us;37us;53us;2us;16401us;36us;80us;37us;53us;1us;32768us;54us;46us;0us;16402us;0us;16403us;0us;16405us;2us;16406us;0us;63us;2us;65us;0us;16407us;2us;16408us;0us;63us;2us;65us;0us;16409us;5us;32768us;0us;63us;1us;64us;2us;65us;3us;66us;48us;74us;5us;32768us;0us;63us;1us;64us;2us;65us;3us;66us;48us;98us;9us;32768us;4us;67us;45us;40us;46us;38us;47us;43us;49us;35us;53us;55us;54us;45us;55us;34us;56us;33us;9us;32768us;4us;67us;45us;40us;46us;38us;47us;43us;49us;35us;53us;55us;54us;45us;55us;34us;56us;33us;9us;32768us;4us;67us;45us;40us;46us;38us;47us;43us;49us;35us;53us;55us;54us;45us;55us;34us;56us;33us;9us;32768us;4us;67us;45us;40us;46us;38us;47us;43us;49us;35us;53us;55us;54us;45us;55us;34us;56us;33us;9us;32768us;4us;67us;45us;40us;46us;38us;47us;43us;49us;35us;53us;55us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;0us;16416us;1us;32768us;54us;46us;1us;32768us;36us;77us;1us;32768us;34us;78us;1us;32768us;54us;46us;0us;16417us;1us;32768us;34us;81us;1us;32768us;54us;46us;1us;32768us;36us;83us;0us;16418us;1us;32768us;54us;46us;1us;32768us;39us;86us;1us;32768us;54us;46us;0us;16419us;1us;32768us;35us;89us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;1us;16421us;36us;92us;0us;16424us;27us;32768us;11us;128us;12us;132us;13us;136us;14us;156us;15us;150us;16us;146us;17us;160us;18us;166us;19us;120us;20us;122us;21us;99us;22us;102us;23us;104us;24us;106us;25us;108us;26us;110us;27us;112us;28us;114us;29us;116us;30us;118us;31us;124us;32us;140us;38us;84us;40us;96us;41us;94us;42us;101us;54us;45us;0us;16422us;1us;32768us;54us;46us;0us;16423us;1us;32768us;47us;97us;9us;32768us;4us;67us;45us;40us;46us;38us;47us;43us;49us;35us;53us;55us;54us;45us;55us;34us;56us;33us;27us;32768us;11us;128us;12us;132us;13us;136us;14us;156us;15us;150us;16us;146us;17us;160us;18us;166us;19us;120us;20us;122us;21us;99us;22us;102us;23us;104us;24us;106us;25us;108us;26us;110us;27us;112us;28us;114us;29us;116us;30us;118us;31us;124us;32us;140us;38us;84us;40us;96us;41us;94us;42us;101us;54us;45us;1us;32768us;54us;46us;0us;16425us;0us;16426us;1us;32768us;54us;46us;0us;16427us;1us;32768us;54us;46us;0us;16428us;1us;32768us;54us;46us;0us;16429us;1us;32768us;54us;46us;0us;16430us;1us;32768us;54us;46us;0us;16431us;1us;32768us;54us;46us;0us;16432us;1us;32768us;54us;46us;0us;16433us;1us;32768us;54us;46us;0us;16434us;1us;32768us;54us;46us;0us;16435us;1us;32768us;54us;46us;0us;16436us;1us;32768us;54us;46us;0us;16437us;1us;32768us;47us;125us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;1us;32768us;54us;46us;0us;16438us;1us;32768us;47us;129us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;1us;32768us;54us;46us;0us;16439us;1us;32768us;47us;133us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;1us;32768us;54us;46us;0us;16440us;1us;32768us;47us;137us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;1us;32768us;54us;46us;0us;16441us;1us;32768us;47us;141us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;1us;32768us;54us;46us;0us;16442us;1us;32768us;54us;46us;1us;32768us;37us;148us;1us;32768us;54us;46us;0us;16443us;1us;32768us;54us;46us;1us;32768us;37us;152us;1us;32768us;54us;46us;1us;32768us;37us;154us;1us;32768us;54us;46us;0us;16444us;1us;32768us;54us;46us;1us;32768us;37us;158us;1us;32768us;54us;46us;0us;16445us;1us;32768us;47us;161us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;1us;32768us;54us;46us;1us;32768us;37us;164us;1us;32768us;54us;46us;0us;16446us;1us;32768us;47us;167us;7us;32768us;45us;40us;46us;38us;47us;42us;49us;35us;54us;45us;55us;34us;56us;33us;1us;32768us;54us;46us;1us;32768us;37us;170us;1us;32768us;54us;46us;0us;16447us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;31us;34us;35us;36us;37us;40us;43us;49us;61us;72us;77us;82us;87us;92us;97us;102us;107us;113us;119us;125us;131us;137us;143us;149us;155us;161us;169us;177us;185us;193us;194us;195us;196us;197us;198us;203us;211us;212us;220us;221us;229us;239us;240us;241us;271us;273us;275us;277us;278us;280us;283us;285us;286us;287us;288us;291us;292us;295us;296us;302us;308us;318us;328us;338us;348us;358us;366us;374us;382us;390us;398us;406us;407us;409us;411us;413us;415us;416us;418us;420us;422us;423us;425us;427us;429us;430us;432us;440us;442us;443us;471us;472us;474us;475us;477us;487us;515us;517us;518us;519us;521us;522us;524us;525us;527us;528us;530us;531us;533us;534us;536us;537us;539us;540us;542us;543us;545us;546us;548us;549us;551us;552us;554us;562us;564us;565us;567us;575us;577us;578us;580us;588us;590us;591us;593us;601us;603us;604us;606us;614us;622us;630us;632us;633us;635us;637us;639us;640us;642us;644us;646us;648us;650us;651us;653us;655us;657us;658us;660us;668us;670us;672us;674us;675us;677us;685us;687us;689us;691us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;3us;3us;3us;3us;1us;1us;1us;1us;1us;2us;2us;3us;1us;1us;4us;1us;3us;1us;1us;3us;3us;3us;3us;2us;3us;3us;3us;3us;3us;3us;3us;5us;6us;4us;3us;3us;1us;2us;5us;2us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;5us;5us;5us;5us;9us;4us;6us;4us;7us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;3us;3us;3us;3us;3us;3us;3us;4us;5us;5us;6us;6us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;7us;8us;8us;9us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;10us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;16385us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;16391us;16392us;16393us;16394us;65535us;65535us;16395us;65535us;16396us;65535us;65535us;16397us;16398us;65535us;65535us;65535us;65535us;16400us;65535us;65535us;65535us;16402us;16403us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16416us;65535us;65535us;65535us;65535us;16417us;65535us;65535us;65535us;16418us;65535us;65535us;65535us;16419us;65535us;65535us;65535us;65535us;65535us;16422us;65535us;16423us;65535us;65535us;65535us;65535us;16425us;16426us;65535us;16427us;65535us;16428us;65535us;16429us;65535us;16430us;65535us;16431us;65535us;16432us;65535us;16433us;65535us;16434us;65535us;16435us;65535us;16436us;65535us;16437us;65535us;65535us;65535us;16438us;65535us;65535us;65535us;16439us;65535us;65535us;65535us;16440us;65535us;65535us;65535us;16441us;65535us;65535us;65535us;65535us;65535us;16442us;65535us;65535us;65535us;16443us;65535us;65535us;65535us;65535us;65535us;16444us;65535us;65535us;65535us;16445us;65535us;65535us;65535us;65535us;65535us;16446us;65535us;65535us;65535us;65535us;65535us;16447us;|]
let _fsyacc_reductions = lazy [|
# 474 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 483 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            let _2 = parseState.GetInput(2) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                   _1 
                   )
# 48 "Parser.fsy"
                 : AST.operator));
# 495 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                           TimesExpr(_1,_3) 
                   )
# 59 "Parser.fsy"
                 : arithExpr));
# 507 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                           DivExpr(_1,_3) 
                   )
# 60 "Parser.fsy"
                 : arithExpr));
# 519 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                           PlusExpr(_1,_3) 
                   )
# 61 "Parser.fsy"
                 : arithExpr));
# 531 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                           MinusExpr(_1,_3) 
                   )
# 62 "Parser.fsy"
                 : arithExpr));
# 543 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                           _1 
                   )
# 63 "Parser.fsy"
                 : arithExpr));
# 554 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                           Num(_1) 
                   )
# 66 "Parser.fsy"
                 : arithExpr));
# 565 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                           Float(_1) 
                   )
# 67 "Parser.fsy"
                 : arithExpr));
# 576 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                           Pi 
                   )
# 68 "Parser.fsy"
                 : arithExpr));
# 586 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                           StrA(_1) 
                   )
# 69 "Parser.fsy"
                 : arithExpr));
# 597 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                           UMinusExpr(_2) 
                   )
# 70 "Parser.fsy"
                 : arithExpr));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                           UPlusExpr(_2) 
                   )
# 71 "Parser.fsy"
                 : arithExpr));
# 619 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                           _2 
                   )
# 72 "Parser.fsy"
                 : arithExpr));
# 630 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                           _1 
                   )
# 76 "Parser.fsy"
                 : 'gentype_str));
# 641 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                           BitS(_1) 
                   )
# 80 "Parser.fsy"
                 : bit));
# 652 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                           BitA(_1, _3) 
                   )
# 81 "Parser.fsy"
                 : bit));
# 664 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                               _1 
                   )
# 85 "Parser.fsy"
                 : bit));
# 675 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            let _3 = parseState.GetInput(3) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                               BitSeq(_1, _3) 
                   )
# 86 "Parser.fsy"
                 : bit));
# 687 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                   Bool(_1) 
                   )
# 92 "Parser.fsy"
                 : boolExpr));
# 698 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                   StrB(_1) 
                   )
# 93 "Parser.fsy"
                 : boolExpr));
# 709 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                   ShortCircuitAnd(_1,_3) 
                   )
# 94 "Parser.fsy"
                 : boolExpr));
# 721 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                                   ShortCircuitOr(_1,_3) 
                   )
# 95 "Parser.fsy"
                 : boolExpr));
# 733 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                                   LogAnd(_1,_3) 
                   )
# 96 "Parser.fsy"
                 : boolExpr));
# 745 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                   LogOr(_1,_3) 
                   )
# 97 "Parser.fsy"
                 : boolExpr));
# 757 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                                   Neg(_2)
                   )
# 98 "Parser.fsy"
                 : boolExpr));
# 768 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                   Equal(_1,_3) 
                   )
# 99 "Parser.fsy"
                 : boolExpr));
# 780 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                                   NotEqual(_1,_3) 
                   )
# 100 "Parser.fsy"
                 : boolExpr));
# 792 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                                   Greater(_1,_3) 
                   )
# 101 "Parser.fsy"
                 : boolExpr));
# 804 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                                   GreaterEqual(_1,_3) 
                   )
# 102 "Parser.fsy"
                 : boolExpr));
# 816 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                   Less(_1,_3) 
                   )
# 103 "Parser.fsy"
                 : boolExpr));
# 828 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                   LessEqual(_1,_3) 
                   )
# 104 "Parser.fsy"
                 : boolExpr));
# 840 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                                   _2 
                   )
# 105 "Parser.fsy"
                 : boolExpr));
# 851 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                                           AllocSeq(_2, _5) 
                   )
# 110 "Parser.fsy"
                 : operator));
# 863 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                                           AllocQC(_2, _5) 
                   )
# 111 "Parser.fsy"
                 : operator));
# 875 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                   Measure(_2, _4) 
                   )
# 116 "Parser.fsy"
                 : operator));
# 887 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                         Assign(_1, _3) 
                   )
# 121 "Parser.fsy"
                 : operator));
# 899 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            let _3 = parseState.GetInput(3) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                                         Order(_1,_3)
                   )
# 122 "Parser.fsy"
                 : operator));
# 911 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                         _1 
                   )
# 123 "Parser.fsy"
                 : operator));
# 922 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                                         Reset(_2) 
                   )
# 124 "Parser.fsy"
                 : operator));
# 933 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> boolExpr in
            let _5 = parseState.GetInput(5) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                                         Condition(_3, _5) 
                   )
# 125 "Parser.fsy"
                 : operator));
# 945 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                         Barrier(_2) 
                   )
# 126 "Parser.fsy"
                 : operator));
# 956 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                                         PhaseDisk 
                   )
# 127 "Parser.fsy"
                 : operator));
# 966 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                   H(_2) 
                   )
# 131 "Parser.fsy"
                 : operator));
# 977 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                   I(_2) 
                   )
# 132 "Parser.fsy"
                 : operator));
# 988 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                   X(_2) 
                   )
# 133 "Parser.fsy"
                 : operator));
# 999 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                   Y(_2) 
                   )
# 134 "Parser.fsy"
                 : operator));
# 1010 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                   Z(_2) 
                   )
# 135 "Parser.fsy"
                 : operator));
# 1021 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                   TDG(_2) 
                   )
# 136 "Parser.fsy"
                 : operator));
# 1032 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                   T(_2) 
                   )
# 137 "Parser.fsy"
                 : operator));
# 1043 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                   S(_2) 
                   )
# 138 "Parser.fsy"
                 : operator));
# 1054 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                   SDG(_2) 
                   )
# 139 "Parser.fsy"
                 : operator));
# 1065 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                   SX(_2) 
                   )
# 140 "Parser.fsy"
                 : operator));
# 1076 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                   SXDG(_2) 
                   )
# 141 "Parser.fsy"
                 : operator));
# 1087 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                              P(_3, _5) 
                   )
# 143 "Parser.fsy"
                 : operator));
# 1099 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                              RZ(_3, _5) 
                   )
# 144 "Parser.fsy"
                 : operator));
# 1111 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                              RY(_3, _5) 
                   )
# 145 "Parser.fsy"
                 : operator));
# 1123 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                              RX(_3, _5) 
                   )
# 146 "Parser.fsy"
                 : operator));
# 1135 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> arithExpr in
            let _7 = parseState.GetInput(7) :?> arithExpr in
            let _9 = parseState.GetInput(9) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                                                              U(_3, _5, _7, _9) 
                   )
# 147 "Parser.fsy"
                 : operator));
# 1149 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                              CNOT(_2, _4) 
                   )
# 149 "Parser.fsy"
                 : operator));
# 1161 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            let _6 = parseState.GetInput(6) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                              CCX(_2, _4, _6) 
                   )
# 150 "Parser.fsy"
                 : operator));
# 1174 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                              AST.SWAP(_2, _4) 
                   )
# 151 "Parser.fsy"
                 : operator));
# 1186 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            let _7 = parseState.GetInput(7) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                                           RXX(_3, _5, _7) 
                   )
# 153 "Parser.fsy"
                 : operator));
# 1199 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            let _7 = parseState.GetInput(7) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                                           RZZ(_3, _5, _7) 
                   )
# 154 "Parser.fsy"
                 : operator));
|]
# 1213 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 60;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : AST.operator =
    engine lexer lexbuf 0 :?> _
