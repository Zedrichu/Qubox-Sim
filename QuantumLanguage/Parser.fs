// Implementation file for parser generated by fsyacc
module internal QuantumLanguage.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | BVAR
  | SAND
  | SOR
  | AND
  | OR
  | NEG
  | EQUAL
  | ISQ
  | NOTEQ
  | GREATER
  | LESS
  | GREATEREQ
  | LESSEQ
  | RZGATE
  | RYGATE
  | RXGATE
  | SWAP
  | TOFFOLI
  | CTRLNOT
  | SYMMRXX
  | SYMMRZZ
  | SQRTNOT
  | SQRTXDG
  | BARRIER
  | HADAMARD
  | IDENTITY
  | PAULIX
  | PAULIY
  | PAULIZ
  | TDAGGER
  | TGATE
  | SGATE
  | SDAGGER
  | PHASE
  | UNITARY
  | QUANTREG
  | CLASSREG
  | ASSIGN
  | BASSIGN
  | ORDER
  | COMMA
  | MEASURE
  | MESHOST
  | CONDITIONAL
  | RESET
  | PHASEDISK
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | MOD
  | LPAR
  | RPAR
  | MATHPI
  | CLICK
  | NOCLICK
  | EOF
  | LBRAK
  | RBRAK
  | BOOL of (bool)
  | VARIABLE of (string)
  | FLOAT of (float)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_BVAR
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_ISQ
    | TOKEN_NOTEQ
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATEREQ
    | TOKEN_LESSEQ
    | TOKEN_RZGATE
    | TOKEN_RYGATE
    | TOKEN_RXGATE
    | TOKEN_SWAP
    | TOKEN_TOFFOLI
    | TOKEN_CTRLNOT
    | TOKEN_SYMMRXX
    | TOKEN_SYMMRZZ
    | TOKEN_SQRTNOT
    | TOKEN_SQRTXDG
    | TOKEN_BARRIER
    | TOKEN_HADAMARD
    | TOKEN_IDENTITY
    | TOKEN_PAULIX
    | TOKEN_PAULIY
    | TOKEN_PAULIZ
    | TOKEN_TDAGGER
    | TOKEN_TGATE
    | TOKEN_SGATE
    | TOKEN_SDAGGER
    | TOKEN_PHASE
    | TOKEN_UNITARY
    | TOKEN_QUANTREG
    | TOKEN_CLASSREG
    | TOKEN_ASSIGN
    | TOKEN_BASSIGN
    | TOKEN_ORDER
    | TOKEN_COMMA
    | TOKEN_MEASURE
    | TOKEN_MESHOST
    | TOKEN_CONDITIONAL
    | TOKEN_RESET
    | TOKEN_PHASEDISK
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_MOD
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MATHPI
    | TOKEN_CLICK
    | TOKEN_NOCLICK
    | TOKEN_EOF
    | TOKEN_LBRAK
    | TOKEN_RBRAK
    | TOKEN_BOOL
    | TOKEN_VARIABLE
    | TOKEN_FLOAT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_allocation
    | NONTERM_qallocation
    | NONTERM_callocation
    | NONTERM_expression
    | NONTERM_expression1
    | NONTERM_str
    | NONTERM_statement
    | NONTERM_result
    | NONTERM_bit
    | NONTERM_bitsequence
    | NONTERM_boolexpression
    | NONTERM_measurement
    | NONTERM_operator

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | BVAR  -> 0 
  | SAND  -> 1 
  | SOR  -> 2 
  | AND  -> 3 
  | OR  -> 4 
  | NEG  -> 5 
  | EQUAL  -> 6 
  | ISQ  -> 7 
  | NOTEQ  -> 8 
  | GREATER  -> 9 
  | LESS  -> 10 
  | GREATEREQ  -> 11 
  | LESSEQ  -> 12 
  | RZGATE  -> 13 
  | RYGATE  -> 14 
  | RXGATE  -> 15 
  | SWAP  -> 16 
  | TOFFOLI  -> 17 
  | CTRLNOT  -> 18 
  | SYMMRXX  -> 19 
  | SYMMRZZ  -> 20 
  | SQRTNOT  -> 21 
  | SQRTXDG  -> 22 
  | BARRIER  -> 23 
  | HADAMARD  -> 24 
  | IDENTITY  -> 25 
  | PAULIX  -> 26 
  | PAULIY  -> 27 
  | PAULIZ  -> 28 
  | TDAGGER  -> 29 
  | TGATE  -> 30 
  | SGATE  -> 31 
  | SDAGGER  -> 32 
  | PHASE  -> 33 
  | UNITARY  -> 34 
  | QUANTREG  -> 35 
  | CLASSREG  -> 36 
  | ASSIGN  -> 37 
  | BASSIGN  -> 38 
  | ORDER  -> 39 
  | COMMA  -> 40 
  | MEASURE  -> 41 
  | MESHOST  -> 42 
  | CONDITIONAL  -> 43 
  | RESET  -> 44 
  | PHASEDISK  -> 45 
  | TIMES  -> 46 
  | DIV  -> 47 
  | PLUS  -> 48 
  | MINUS  -> 49 
  | POW  -> 50 
  | MOD  -> 51 
  | LPAR  -> 52 
  | RPAR  -> 53 
  | MATHPI  -> 54 
  | CLICK  -> 55 
  | NOCLICK  -> 56 
  | EOF  -> 57 
  | LBRAK  -> 58 
  | RBRAK  -> 59 
  | BOOL _ -> 60 
  | VARIABLE _ -> 61 
  | FLOAT _ -> 62 
  | NUM _ -> 63 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_BVAR 
  | 1 -> TOKEN_SAND 
  | 2 -> TOKEN_SOR 
  | 3 -> TOKEN_AND 
  | 4 -> TOKEN_OR 
  | 5 -> TOKEN_NEG 
  | 6 -> TOKEN_EQUAL 
  | 7 -> TOKEN_ISQ 
  | 8 -> TOKEN_NOTEQ 
  | 9 -> TOKEN_GREATER 
  | 10 -> TOKEN_LESS 
  | 11 -> TOKEN_GREATEREQ 
  | 12 -> TOKEN_LESSEQ 
  | 13 -> TOKEN_RZGATE 
  | 14 -> TOKEN_RYGATE 
  | 15 -> TOKEN_RXGATE 
  | 16 -> TOKEN_SWAP 
  | 17 -> TOKEN_TOFFOLI 
  | 18 -> TOKEN_CTRLNOT 
  | 19 -> TOKEN_SYMMRXX 
  | 20 -> TOKEN_SYMMRZZ 
  | 21 -> TOKEN_SQRTNOT 
  | 22 -> TOKEN_SQRTXDG 
  | 23 -> TOKEN_BARRIER 
  | 24 -> TOKEN_HADAMARD 
  | 25 -> TOKEN_IDENTITY 
  | 26 -> TOKEN_PAULIX 
  | 27 -> TOKEN_PAULIY 
  | 28 -> TOKEN_PAULIZ 
  | 29 -> TOKEN_TDAGGER 
  | 30 -> TOKEN_TGATE 
  | 31 -> TOKEN_SGATE 
  | 32 -> TOKEN_SDAGGER 
  | 33 -> TOKEN_PHASE 
  | 34 -> TOKEN_UNITARY 
  | 35 -> TOKEN_QUANTREG 
  | 36 -> TOKEN_CLASSREG 
  | 37 -> TOKEN_ASSIGN 
  | 38 -> TOKEN_BASSIGN 
  | 39 -> TOKEN_ORDER 
  | 40 -> TOKEN_COMMA 
  | 41 -> TOKEN_MEASURE 
  | 42 -> TOKEN_MESHOST 
  | 43 -> TOKEN_CONDITIONAL 
  | 44 -> TOKEN_RESET 
  | 45 -> TOKEN_PHASEDISK 
  | 46 -> TOKEN_TIMES 
  | 47 -> TOKEN_DIV 
  | 48 -> TOKEN_PLUS 
  | 49 -> TOKEN_MINUS 
  | 50 -> TOKEN_POW 
  | 51 -> TOKEN_MOD 
  | 52 -> TOKEN_LPAR 
  | 53 -> TOKEN_RPAR 
  | 54 -> TOKEN_MATHPI 
  | 55 -> TOKEN_CLICK 
  | 56 -> TOKEN_NOCLICK 
  | 57 -> TOKEN_EOF 
  | 58 -> TOKEN_LBRAK 
  | 59 -> TOKEN_RBRAK 
  | 60 -> TOKEN_BOOL 
  | 61 -> TOKEN_VARIABLE 
  | 62 -> TOKEN_FLOAT 
  | 63 -> TOKEN_NUM 
  | 66 -> TOKEN_end_of_input
  | 64 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_allocation 
    | 4 -> NONTERM_qallocation 
    | 5 -> NONTERM_qallocation 
    | 6 -> NONTERM_callocation 
    | 7 -> NONTERM_callocation 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression 
    | 13 -> NONTERM_expression 
    | 14 -> NONTERM_expression 
    | 15 -> NONTERM_expression1 
    | 16 -> NONTERM_expression1 
    | 17 -> NONTERM_expression1 
    | 18 -> NONTERM_expression1 
    | 19 -> NONTERM_expression1 
    | 20 -> NONTERM_expression1 
    | 21 -> NONTERM_expression1 
    | 22 -> NONTERM_str 
    | 23 -> NONTERM_statement 
    | 24 -> NONTERM_statement 
    | 25 -> NONTERM_statement 
    | 26 -> NONTERM_result 
    | 27 -> NONTERM_result 
    | 28 -> NONTERM_bit 
    | 29 -> NONTERM_bit 
    | 30 -> NONTERM_bitsequence 
    | 31 -> NONTERM_bitsequence 
    | 32 -> NONTERM_boolexpression 
    | 33 -> NONTERM_boolexpression 
    | 34 -> NONTERM_boolexpression 
    | 35 -> NONTERM_boolexpression 
    | 36 -> NONTERM_boolexpression 
    | 37 -> NONTERM_boolexpression 
    | 38 -> NONTERM_boolexpression 
    | 39 -> NONTERM_boolexpression 
    | 40 -> NONTERM_boolexpression 
    | 41 -> NONTERM_boolexpression 
    | 42 -> NONTERM_boolexpression 
    | 43 -> NONTERM_boolexpression 
    | 44 -> NONTERM_boolexpression 
    | 45 -> NONTERM_boolexpression 
    | 46 -> NONTERM_boolexpression 
    | 47 -> NONTERM_measurement 
    | 48 -> NONTERM_operator 
    | 49 -> NONTERM_operator 
    | 50 -> NONTERM_operator 
    | 51 -> NONTERM_operator 
    | 52 -> NONTERM_operator 
    | 53 -> NONTERM_operator 
    | 54 -> NONTERM_operator 
    | 55 -> NONTERM_operator 
    | 56 -> NONTERM_operator 
    | 57 -> NONTERM_operator 
    | 58 -> NONTERM_operator 
    | 59 -> NONTERM_operator 
    | 60 -> NONTERM_operator 
    | 61 -> NONTERM_operator 
    | 62 -> NONTERM_operator 
    | 63 -> NONTERM_operator 
    | 64 -> NONTERM_operator 
    | 65 -> NONTERM_operator 
    | 66 -> NONTERM_operator 
    | 67 -> NONTERM_operator 
    | 68 -> NONTERM_operator 
    | 69 -> NONTERM_operator 
    | 70 -> NONTERM_operator 
    | 71 -> NONTERM_operator 
    | 72 -> NONTERM_operator 
    | 73 -> NONTERM_operator 
    | 74 -> NONTERM_operator 
    | 75 -> NONTERM_operator 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 66 
let _fsyacc_tagOfErrorTerminal = 64

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | BVAR  -> "BVAR" 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | ISQ  -> "ISQ" 
  | NOTEQ  -> "NOTEQ" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATEREQ  -> "GREATEREQ" 
  | LESSEQ  -> "LESSEQ" 
  | RZGATE  -> "RZGATE" 
  | RYGATE  -> "RYGATE" 
  | RXGATE  -> "RXGATE" 
  | SWAP  -> "SWAP" 
  | TOFFOLI  -> "TOFFOLI" 
  | CTRLNOT  -> "CTRLNOT" 
  | SYMMRXX  -> "SYMMRXX" 
  | SYMMRZZ  -> "SYMMRZZ" 
  | SQRTNOT  -> "SQRTNOT" 
  | SQRTXDG  -> "SQRTXDG" 
  | BARRIER  -> "BARRIER" 
  | HADAMARD  -> "HADAMARD" 
  | IDENTITY  -> "IDENTITY" 
  | PAULIX  -> "PAULIX" 
  | PAULIY  -> "PAULIY" 
  | PAULIZ  -> "PAULIZ" 
  | TDAGGER  -> "TDAGGER" 
  | TGATE  -> "TGATE" 
  | SGATE  -> "SGATE" 
  | SDAGGER  -> "SDAGGER" 
  | PHASE  -> "PHASE" 
  | UNITARY  -> "UNITARY" 
  | QUANTREG  -> "QUANTREG" 
  | CLASSREG  -> "CLASSREG" 
  | ASSIGN  -> "ASSIGN" 
  | BASSIGN  -> "BASSIGN" 
  | ORDER  -> "ORDER" 
  | COMMA  -> "COMMA" 
  | MEASURE  -> "MEASURE" 
  | MESHOST  -> "MESHOST" 
  | CONDITIONAL  -> "CONDITIONAL" 
  | RESET  -> "RESET" 
  | PHASEDISK  -> "PHASEDISK" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | MOD  -> "MOD" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | MATHPI  -> "MATHPI" 
  | CLICK  -> "CLICK" 
  | NOCLICK  -> "NOCLICK" 
  | EOF  -> "EOF" 
  | LBRAK  -> "LBRAK" 
  | RBRAK  -> "RBRAK" 
  | BOOL _ -> "BOOL" 
  | VARIABLE _ -> "VARIABLE" 
  | FLOAT _ -> "FLOAT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | BVAR  -> (null : System.Object) 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | ISQ  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATEREQ  -> (null : System.Object) 
  | LESSEQ  -> (null : System.Object) 
  | RZGATE  -> (null : System.Object) 
  | RYGATE  -> (null : System.Object) 
  | RXGATE  -> (null : System.Object) 
  | SWAP  -> (null : System.Object) 
  | TOFFOLI  -> (null : System.Object) 
  | CTRLNOT  -> (null : System.Object) 
  | SYMMRXX  -> (null : System.Object) 
  | SYMMRZZ  -> (null : System.Object) 
  | SQRTNOT  -> (null : System.Object) 
  | SQRTXDG  -> (null : System.Object) 
  | BARRIER  -> (null : System.Object) 
  | HADAMARD  -> (null : System.Object) 
  | IDENTITY  -> (null : System.Object) 
  | PAULIX  -> (null : System.Object) 
  | PAULIY  -> (null : System.Object) 
  | PAULIZ  -> (null : System.Object) 
  | TDAGGER  -> (null : System.Object) 
  | TGATE  -> (null : System.Object) 
  | SGATE  -> (null : System.Object) 
  | SDAGGER  -> (null : System.Object) 
  | PHASE  -> (null : System.Object) 
  | UNITARY  -> (null : System.Object) 
  | QUANTREG  -> (null : System.Object) 
  | CLASSREG  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | BASSIGN  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MEASURE  -> (null : System.Object) 
  | MESHOST  -> (null : System.Object) 
  | CONDITIONAL  -> (null : System.Object) 
  | RESET  -> (null : System.Object) 
  | PHASEDISK  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | MATHPI  -> (null : System.Object) 
  | CLICK  -> (null : System.Object) 
  | NOCLICK  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LBRAK  -> (null : System.Object) 
  | RBRAK  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;1us;65535us;0us;6us;1us;65535us;6us;7us;34us;65535us;2us;26us;3us;26us;43us;18us;44us;19us;45us;20us;46us;21us;47us;22us;48us;23us;57us;24us;58us;25us;65us;26us;84us;26us;85us;26us;86us;26us;87us;26us;88us;26us;89us;26us;93us;27us;94us;28us;95us;29us;96us;30us;97us;31us;98us;32us;109us;33us;112us;26us;140us;34us;144us;35us;148us;36us;152us;37us;156us;38us;157us;39us;158us;40us;176us;41us;182us;42us;36us;65535us;2us;49us;3us;49us;43us;49us;44us;49us;45us;49us;46us;49us;47us;49us;48us;49us;53us;54us;55us;56us;57us;49us;58us;49us;65us;49us;84us;49us;85us;49us;86us;49us;87us;49us;88us;49us;89us;49us;93us;49us;94us;49us;95us;49us;96us;49us;97us;49us;98us;49us;109us;49us;112us;49us;140us;49us;144us;49us;148us;49us;152us;49us;156us;49us;157us;49us;158us;49us;176us;49us;182us;49us;71us;65535us;2us;62us;3us;62us;8us;70us;13us;70us;43us;60us;44us;60us;45us;60us;46us;60us;47us;60us;48us;60us;53us;60us;55us;60us;57us;60us;58us;61us;65us;62us;74us;70us;84us;62us;85us;61us;86us;61us;87us;61us;88us;61us;89us;61us;93us;60us;94us;60us;95us;60us;96us;60us;97us;60us;98us;60us;102us;70us;104us;70us;107us;70us;109us;60us;110us;111us;112us;61us;114us;70us;117us;70us;119us;70us;121us;70us;123us;70us;125us;70us;127us;70us;129us;70us;131us;70us;133us;70us;135us;70us;137us;70us;140us;60us;141us;70us;144us;60us;145us;70us;148us;60us;149us;70us;152us;60us;153us;70us;156us;60us;157us;60us;158us;60us;159us;70us;161us;70us;163us;70us;165us;70us;167us;70us;169us;70us;171us;70us;173us;70us;176us;60us;177us;70us;179us;70us;182us;60us;183us;70us;185us;70us;3us;65535us;2us;3us;3us;65us;65us;65us;1us;65535us;91us;92us;45us;65535us;2us;90us;3us;90us;8us;11us;13us;16us;58us;90us;65us;90us;74us;75us;84us;90us;85us;90us;86us;90us;87us;90us;88us;90us;89us;90us;102us;103us;104us;105us;107us;108us;112us;90us;114us;115us;117us;118us;119us;120us;121us;122us;123us;124us;125us;126us;127us;128us;129us;130us;131us;132us;133us;134us;135us;136us;137us;138us;141us;142us;145us;146us;149us;150us;153us;154us;159us;160us;161us;162us;163us;164us;165us;166us;167us;168us;169us;170us;171us;172us;173us;174us;177us;178us;179us;180us;183us;184us;185us;186us;2us;65535us;8us;9us;13us;14us;11us;65535us;2us;83us;3us;83us;58us;82us;65us;83us;84us;83us;85us;77us;86us;78us;87us;79us;88us;80us;89us;81us;112us;84us;4us;65535us;2us;106us;3us;106us;65us;106us;84us;106us;4us;65535us;2us;66us;3us;66us;65us;66us;84us;113us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;7us;9us;44us;81us;153us;157us;159us;205us;208us;220us;225us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;1us;23us;1us;1us;1us;2us;1us;3us;1us;3us;2us;4us;5us;1us;4us;1us;4us;3us;5us;30us;31us;1us;5us;2us;6us;7us;1us;6us;1us;6us;3us;7us;30us;31us;1us;7us;7us;8us;8us;9us;10us;11us;12us;13us;7us;8us;9us;9us;10us;11us;12us;13us;7us;8us;9us;10us;10us;11us;12us;13us;7us;8us;9us;10us;11us;11us;12us;13us;7us;8us;9us;10us;11us;12us;12us;13us;7us;8us;9us;10us;11us;12us;13us;13us;7us;8us;9us;10us;11us;12us;13us;20us;13us;8us;9us;10us;11us;12us;13us;20us;39us;40us;41us;42us;43us;44us;12us;8us;9us;10us;11us;12us;13us;39us;40us;41us;42us;43us;44us;7us;8us;9us;10us;11us;12us;13us;39us;7us;8us;9us;10us;11us;12us;13us;40us;7us;8us;9us;10us;11us;12us;13us;41us;7us;8us;9us;10us;11us;12us;13us;42us;7us;8us;9us;10us;11us;12us;13us;43us;7us;8us;9us;10us;11us;12us;13us;44us;7us;8us;9us;10us;11us;12us;13us;50us;7us;8us;9us;10us;11us;12us;13us;66us;7us;8us;9us;10us;11us;12us;13us;67us;7us;8us;9us;10us;11us;12us;13us;68us;7us;8us;9us;10us;11us;12us;13us;69us;7us;8us;9us;10us;11us;12us;13us;70us;7us;8us;9us;10us;11us;12us;13us;70us;7us;8us;9us;10us;11us;12us;13us;70us;7us;8us;9us;10us;11us;12us;13us;74us;7us;8us;9us;10us;11us;12us;13us;75us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;18us;1us;19us;1us;19us;1us;20us;2us;20us;45us;1us;20us;1us;21us;2us;21us;29us;3us;21us;29us;50us;1us;22us;2us;22us;28us;2us;23us;23us;1us;24us;1us;24us;1us;26us;1us;27us;1us;29us;1us;29us;1us;29us;1us;29us;1us;31us;1us;31us;1us;32us;5us;33us;33us;34us;35us;36us;5us;33us;34us;34us;35us;36us;5us;33us;34us;35us;35us;36us;5us;33us;34us;35us;36us;36us;5us;33us;34us;35us;36us;37us;5us;33us;34us;35us;36us;45us;5us;33us;34us;35us;36us;51us;5us;33us;34us;35us;36us;52us;1us;33us;1us;34us;1us;35us;1us;36us;1us;37us;1us;38us;1us;38us;1us;38us;1us;39us;1us;40us;1us;41us;1us;42us;1us;43us;1us;44us;1us;45us;1us;46us;1us;46us;1us;47us;1us;47us;1us;47us;1us;47us;1us;48us;1us;49us;1us;49us;1us;50us;1us;51us;1us;51us;1us;52us;1us;52us;1us;53us;1us;53us;1us;54us;1us;55us;1us;55us;1us;56us;1us;56us;1us;57us;1us;57us;1us;58us;1us;58us;1us;59us;1us;59us;1us;60us;1us;60us;1us;61us;1us;61us;1us;62us;1us;62us;1us;63us;1us;63us;1us;64us;1us;64us;1us;65us;1us;65us;1us;66us;1us;66us;1us;66us;1us;66us;1us;67us;1us;67us;1us;67us;1us;67us;1us;68us;1us;68us;1us;68us;1us;68us;1us;69us;1us;69us;1us;69us;1us;69us;1us;70us;1us;70us;1us;70us;1us;70us;1us;70us;1us;70us;1us;71us;1us;71us;1us;71us;1us;71us;1us;72us;1us;72us;1us;72us;1us;72us;1us;72us;1us;72us;1us;73us;1us;73us;1us;73us;1us;73us;1us;74us;1us;74us;1us;74us;1us;74us;1us;74us;1us;74us;1us;75us;1us;75us;1us;75us;1us;75us;1us;75us;1us;75us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;13us;15us;17us;20us;22us;24us;28us;30us;33us;35us;37us;41us;43us;51us;59us;67us;75us;83us;91us;99us;113us;126us;134us;142us;150us;158us;166us;174us;182us;190us;198us;206us;214us;222us;230us;238us;246us;254us;256us;258us;260us;262us;264us;266us;268us;270us;272us;274us;276us;278us;280us;282us;284us;287us;289us;291us;294us;298us;300us;303us;306us;308us;310us;312us;314us;316us;318us;320us;322us;324us;326us;328us;334us;340us;346us;352us;358us;364us;370us;376us;378us;380us;382us;384us;386us;388us;390us;392us;394us;396us;398us;400us;402us;404us;406us;408us;410us;412us;414us;416us;418us;420us;422us;424us;426us;428us;430us;432us;434us;436us;438us;440us;442us;444us;446us;448us;450us;452us;454us;456us;458us;460us;462us;464us;466us;468us;470us;472us;474us;476us;478us;480us;482us;484us;486us;488us;490us;492us;494us;496us;498us;500us;502us;504us;506us;508us;510us;512us;514us;516us;518us;520us;522us;524us;526us;528us;530us;532us;534us;536us;538us;540us;542us;544us;546us;548us;550us;552us;554us;556us;558us;560us;562us;564us;566us;568us;570us;572us;574us;576us;578us;|]
let _fsyacc_action_rows = 187
let _fsyacc_actionTableElements = [|2us;32768us;35us;8us;57us;5us;0us;49152us;36us;16409us;0us;100us;5us;89us;13us;143us;14us;147us;15us;151us;16us;171us;17us;165us;18us;161us;19us;175us;20us;181us;21us;135us;22us;137us;23us;114us;24us;117us;25us;119us;26us;121us;27us;123us;28us;125us;29us;127us;30us;129us;31us;131us;32us;133us;33us;139us;34us;155us;41us;102us;43us;112us;44us;107us;45us;116us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;37us;16409us;0us;100us;5us;89us;13us;143us;14us;147us;15us;151us;16us;171us;17us;165us;18us;161us;19us;175us;20us;181us;21us;135us;22us;137us;23us;114us;24us;117us;25us;119us;26us;121us;27us;123us;28us;125us;29us;127us;30us;129us;31us;131us;32us;133us;33us;139us;34us;155us;41us;102us;43us;112us;44us;107us;45us;116us;48us;55us;49us;53us;52us;58us;54us;50us;57us;4us;60us;76us;61us;64us;62us;52us;63us;51us;0us;16385us;0us;16386us;1us;32768us;36us;13us;0us;16387us;1us;32768us;61us;64us;1us;32768us;39us;10us;0us;16388us;2us;16414us;39us;12us;40us;74us;0us;16389us;1us;32768us;61us;64us;1us;32768us;39us;15us;0us;16390us;2us;16414us;39us;17us;40us;74us;0us;16391us;1us;16392us;50us;47us;1us;16393us;50us;47us;4us;16394us;46us;43us;47us;44us;50us;47us;51us;48us;4us;16395us;46us;43us;47us;44us;50us;47us;51us;48us;1us;16396us;50us;47us;1us;16397us;50us;47us;7us;32768us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;59us;13us;32768us;6us;93us;8us;94us;9us;95us;10us;97us;11us;96us;12us;98us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;59us;12us;32768us;6us;93us;8us;94us;9us;95us;10us;97us;11us;96us;12us;98us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;6us;16423us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;6us;16424us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;6us;16425us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;6us;16426us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;6us;16427us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;6us;16428us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;6us;16434us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;7us;32768us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;141us;7us;32768us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;145us;7us;32768us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;149us;7us;32768us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;153us;7us;32768us;40us;157us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;7us;32768us;40us;158us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;7us;32768us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;159us;7us;32768us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;177us;7us;32768us;46us;43us;47us;44us;48us;45us;49us;46us;50us;47us;51us;48us;53us;183us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;0us;16398us;0us;16399us;0us;16400us;0us;16401us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;0us;16402us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;0us;16403us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;10us;32768us;0us;100us;5us;89us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;0us;16404us;0us;16405us;1us;16405us;58us;71us;2us;16405us;37us;109us;58us;71us;0us;16406us;4us;16406us;7us;16412us;39us;16412us;40us;16412us;42us;16412us;36us;16407us;0us;100us;5us;89us;13us;143us;14us;147us;15us;151us;16us;171us;17us;165us;18us;161us;19us;175us;20us;181us;21us;135us;22us;137us;23us;114us;24us;117us;25us;119us;26us;121us;27us;123us;28us;125us;29us;127us;30us;129us;31us;131us;32us;133us;33us;139us;34us;155us;41us;102us;43us;112us;44us;107us;45us;116us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;1us;32768us;39us;67us;0us;16408us;0us;16410us;0us;16411us;1us;32768us;58us;71us;1us;32768us;63us;72us;1us;32768us;59us;73us;0us;16413us;1us;32768us;61us;64us;0us;16415us;0us;16416us;0us;16417us;2us;16418us;1us;85us;3us;87us;0us;16419us;2us;16420us;1us;85us;3us;87us;0us;16421us;5us;32768us;1us;85us;2us;86us;3us;87us;4us;88us;53us;99us;5us;32768us;1us;85us;2us;86us;3us;87us;4us;88us;38us;110us;40us;32768us;0us;100us;1us;85us;2us;86us;3us;87us;4us;88us;5us;89us;13us;143us;14us;147us;15us;151us;16us;171us;17us;165us;18us;161us;19us;175us;20us;181us;21us;135us;22us;137us;23us;114us;24us;117us;25us;119us;26us;121us;27us;123us;28us;125us;29us;127us;30us;129us;31us;131us;32us;133us;33us;139us;34us;155us;41us;102us;43us;112us;44us;107us;45us;116us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;10us;32768us;0us;100us;5us;89us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;10us;32768us;0us;100us;5us;89us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;10us;32768us;0us;100us;5us;89us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;10us;32768us;0us;100us;5us;89us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;10us;32768us;0us;100us;5us;89us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;1us;32768us;7us;91us;2us;32768us;55us;68us;56us;69us;0us;16422us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;0us;16429us;1us;32768us;61us;101us;0us;16430us;1us;32768us;61us;64us;1us;32768us;42us;104us;1us;32768us;61us;64us;0us;16431us;0us;16432us;1us;32768us;61us;64us;0us;16433us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;1us;32768us;61us;63us;0us;16435us;10us;32768us;0us;100us;5us;89us;48us;55us;49us;53us;52us;58us;54us;50us;60us;76us;61us;64us;62us;52us;63us;51us;0us;16436us;1us;32768us;61us;64us;0us;16437us;0us;16438us;1us;32768us;61us;64us;0us;16439us;1us;32768us;61us;64us;0us;16440us;1us;32768us;61us;64us;0us;16441us;1us;32768us;61us;64us;0us;16442us;1us;32768us;61us;64us;0us;16443us;1us;32768us;61us;64us;0us;16444us;1us;32768us;61us;64us;0us;16445us;1us;32768us;61us;64us;0us;16446us;1us;32768us;61us;64us;0us;16447us;1us;32768us;61us;64us;0us;16448us;1us;32768us;61us;64us;0us;16449us;1us;32768us;52us;140us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;1us;32768us;61us;64us;0us;16450us;1us;32768us;52us;144us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;1us;32768us;61us;64us;0us;16451us;1us;32768us;52us;148us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;1us;32768us;61us;64us;0us;16452us;1us;32768us;52us;152us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;1us;32768us;61us;64us;0us;16453us;1us;32768us;52us;156us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;1us;32768us;61us;64us;0us;16454us;1us;32768us;61us;64us;1us;32768us;40us;163us;1us;32768us;61us;64us;0us;16455us;1us;32768us;61us;64us;1us;32768us;40us;167us;1us;32768us;61us;64us;1us;32768us;40us;169us;1us;32768us;61us;64us;0us;16456us;1us;32768us;61us;64us;1us;32768us;40us;173us;1us;32768us;61us;64us;0us;16457us;1us;32768us;52us;176us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;1us;32768us;61us;64us;1us;32768us;40us;179us;1us;32768us;61us;64us;0us;16458us;1us;32768us;52us;182us;7us;32768us;48us;55us;49us;53us;52us;57us;54us;50us;61us;63us;62us;52us;63us;51us;1us;32768us;61us;64us;1us;32768us;40us;185us;1us;32768us;61us;64us;0us;16459us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;41us;79us;80us;81us;83us;84us;86us;88us;89us;92us;93us;95us;97us;98us;101us;102us;104us;106us;111us;116us;118us;120us;128us;142us;155us;162us;169us;176us;183us;190us;197us;204us;212us;220us;228us;236us;244us;252us;260us;268us;276us;284us;292us;300us;308us;316us;324us;325us;326us;327us;328us;336us;337us;345us;346us;354us;365us;366us;367us;369us;372us;373us;378us;415us;417us;418us;419us;420us;422us;424us;426us;427us;429us;430us;431us;432us;435us;436us;439us;440us;446us;452us;493us;504us;515us;526us;537us;548us;550us;553us;554us;562us;570us;578us;586us;594us;602us;603us;605us;606us;608us;610us;612us;613us;614us;616us;617us;625us;627us;628us;639us;640us;642us;643us;644us;646us;647us;649us;650us;652us;653us;655us;656us;658us;659us;661us;662us;664us;665us;667us;668us;670us;671us;673us;674us;676us;677us;679us;687us;689us;690us;692us;700us;702us;703us;705us;713us;715us;716us;718us;726us;728us;729us;731us;739us;747us;755us;757us;758us;760us;762us;764us;765us;767us;769us;771us;773us;775us;776us;778us;780us;782us;783us;785us;793us;795us;797us;799us;800us;802us;810us;812us;814us;816us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;1us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;1us;1us;2us;2us;3us;1us;1us;2us;2us;0us;1us;1us;1us;4us;1us;3us;1us;3us;3us;3us;3us;2us;3us;3us;3us;3us;3us;3us;3us;3us;2us;4us;1us;2us;3us;3us;3us;2us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;5us;5us;5us;5us;9us;4us;6us;4us;7us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;3us;3us;4us;4us;5us;5us;5us;5us;5us;5us;5us;6us;6us;6us;6us;6us;6us;6us;7us;8us;8us;8us;9us;9us;10us;10us;11us;11us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;12us;13us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;16385us;16386us;65535us;16387us;65535us;65535us;16388us;65535us;16389us;65535us;65535us;16390us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16398us;16399us;16400us;16401us;65535us;16402us;65535us;16403us;65535us;65535us;16404us;16405us;65535us;65535us;16406us;65535us;65535us;65535us;16408us;16410us;16411us;65535us;65535us;65535us;16413us;65535us;16415us;16416us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16422us;65535us;65535us;65535us;65535us;65535us;65535us;16429us;65535us;16430us;65535us;65535us;65535us;16431us;16432us;65535us;16433us;65535us;65535us;16435us;65535us;16436us;65535us;16437us;16438us;65535us;16439us;65535us;16440us;65535us;16441us;65535us;16442us;65535us;16443us;65535us;16444us;65535us;16445us;65535us;16446us;65535us;16447us;65535us;16448us;65535us;16449us;65535us;65535us;65535us;16450us;65535us;65535us;65535us;16451us;65535us;65535us;65535us;16452us;65535us;65535us;65535us;16453us;65535us;65535us;65535us;65535us;65535us;16454us;65535us;65535us;65535us;16455us;65535us;65535us;65535us;65535us;65535us;16456us;65535us;65535us;65535us;16457us;65535us;65535us;65535us;65535us;65535us;16458us;65535us;65535us;65535us;65535us;65535us;16459us;|]
let _fsyacc_reductions = lazy [|
# 532 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.operator * AST.operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            let _2 = parseState.GetInput(2) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                     (_1, _2) 
                   )
# 51 "Parser.fsy"
                 : AST.operator * AST.operator));
# 553 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                     (NOP, NOP) 
                   )
# 52 "Parser.fsy"
                 : AST.operator * AST.operator));
# 563 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qallocation in
            let _2 = parseState.GetInput(2) :?> 'gentype_callocation in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                               AllocQC(_1, _2) 
                   )
# 61 "Parser.fsy"
                 : operator));
# 575 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                           _2 
                   )
# 64 "Parser.fsy"
                 : 'gentype_qallocation));
# 586 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                           _2 
                   )
# 65 "Parser.fsy"
                 : 'gentype_qallocation));
# 597 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                           _2 
                   )
# 69 "Parser.fsy"
                 : 'gentype_callocation));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                           _2 
                   )
# 70 "Parser.fsy"
                 : 'gentype_callocation));
# 619 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                           TimesExpr(_1,_3) 
                   )
# 77 "Parser.fsy"
                 : arithExpr));
# 631 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                           DivExpr(_1,_3) 
                   )
# 78 "Parser.fsy"
                 : arithExpr));
# 643 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                           PlusExpr(_1,_3) 
                   )
# 79 "Parser.fsy"
                 : arithExpr));
# 655 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                           MinusExpr(_1,_3) 
                   )
# 80 "Parser.fsy"
                 : arithExpr));
# 667 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                           PowExpr(_1,_3) 
                   )
# 81 "Parser.fsy"
                 : arithExpr));
# 679 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                           ModExpr(_1,_3) 
                   )
# 82 "Parser.fsy"
                 : arithExpr));
# 691 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                           _1 
                   )
# 83 "Parser.fsy"
                 : arithExpr));
# 702 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                           Pi 
                   )
# 86 "Parser.fsy"
                 : arithExpr));
# 712 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                           Num(_1) 
                   )
# 87 "Parser.fsy"
                 : arithExpr));
# 723 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                           Float(_1) 
                   )
# 88 "Parser.fsy"
                 : arithExpr));
# 734 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                           UMinusExpr(_2) 
                   )
# 89 "Parser.fsy"
                 : arithExpr));
# 745 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                           UPlusExpr(_2) 
                   )
# 90 "Parser.fsy"
                 : arithExpr));
# 756 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                           _2 
                   )
# 91 "Parser.fsy"
                 : arithExpr));
# 767 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                           VarA(_1) 
                   )
# 92 "Parser.fsy"
                 : arithExpr));
# 778 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                           _1 
                   )
# 96 "Parser.fsy"
                 : 'gentype_str));
# 789 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            let _2 = parseState.GetInput(2) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                         Order(_1, _2) 
                   )
# 100 "Parser.fsy"
                 : 'gentype_statement));
# 801 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                         _1 
                   )
# 101 "Parser.fsy"
                 : 'gentype_statement));
# 812 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                         NOP 
                   )
# 102 "Parser.fsy"
                 : 'gentype_statement));
# 822 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                            Click 
                   )
# 107 "Parser.fsy"
                 : result));
# 832 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                            NoClick 
                   )
# 108 "Parser.fsy"
                 : result));
# 842 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                           BitS(_1) 
                   )
# 112 "Parser.fsy"
                 : bit));
# 853 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                           BitA(_1, _3) 
                   )
# 113 "Parser.fsy"
                 : bit));
# 865 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                               _1 
                   )
# 117 "Parser.fsy"
                 : bit));
# 876 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            let _3 = parseState.GetInput(3) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                               BitSeq(_1, _3) 
                   )
# 118 "Parser.fsy"
                 : bit));
# 888 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                                   Bool(_1) 
                   )
# 124 "Parser.fsy"
                 : boolExpr));
# 899 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                                   LogAnd(_1,_3) 
                   )
# 125 "Parser.fsy"
                 : boolExpr));
# 911 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                   LogOr(_1,_3) 
                   )
# 126 "Parser.fsy"
                 : boolExpr));
# 923 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                                   LogAnd(_1,_3) 
                   )
# 127 "Parser.fsy"
                 : boolExpr));
# 935 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                                   LogOr(_1,_3) 
                   )
# 128 "Parser.fsy"
                 : boolExpr));
# 947 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                                   Neg(_2)
                   )
# 129 "Parser.fsy"
                 : boolExpr));
# 958 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            let _3 = parseState.GetInput(3) :?> result in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                                   Check(_1,_3) 
                   )
# 130 "Parser.fsy"
                 : boolExpr));
# 970 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                                   Equal(_1,_3) 
                   )
# 131 "Parser.fsy"
                 : boolExpr));
# 982 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                                   NotEqual(_1,_3) 
                   )
# 132 "Parser.fsy"
                 : boolExpr));
# 994 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                                   Greater(_1,_3) 
                   )
# 133 "Parser.fsy"
                 : boolExpr));
# 1006 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                                   GreaterEqual(_1,_3) 
                   )
# 134 "Parser.fsy"
                 : boolExpr));
# 1018 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                                   Less(_1,_3) 
                   )
# 135 "Parser.fsy"
                 : boolExpr));
# 1030 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                                   LessEqual(_1,_3) 
                   )
# 136 "Parser.fsy"
                 : boolExpr));
# 1042 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                                   _2 
                   )
# 137 "Parser.fsy"
                 : boolExpr));
# 1053 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                                   VarB(_2) 
                   )
# 138 "Parser.fsy"
                 : boolExpr));
# 1064 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                   Measure(_2, _4) 
                   )
# 144 "Parser.fsy"
                 : operator));
# 1076 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                                         _1 
                   )
# 149 "Parser.fsy"
                 : operator));
# 1087 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                                         Reset(_2) 
                   )
# 150 "Parser.fsy"
                 : operator));
# 1098 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                                         Assign(_1, _3) 
                   )
# 151 "Parser.fsy"
                 : operator));
# 1110 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                                         AssignB(_3, _1) 
                   )
# 152 "Parser.fsy"
                 : operator));
# 1122 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                                         Condition(_2, _3) 
                   )
# 153 "Parser.fsy"
                 : operator));
# 1134 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                                         Barrier(_2) 
                   )
# 154 "Parser.fsy"
                 : operator));
# 1145 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                                         PhaseDisk 
                   )
# 155 "Parser.fsy"
                 : operator));
# 1155 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                   H(_2) 
                   )
# 159 "Parser.fsy"
                 : operator));
# 1166 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                   I(_2) 
                   )
# 160 "Parser.fsy"
                 : operator));
# 1177 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                   X(_2) 
                   )
# 161 "Parser.fsy"
                 : operator));
# 1188 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                   Y(_2) 
                   )
# 162 "Parser.fsy"
                 : operator));
# 1199 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                   Z(_2) 
                   )
# 163 "Parser.fsy"
                 : operator));
# 1210 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                   TDG(_2) 
                   )
# 164 "Parser.fsy"
                 : operator));
# 1221 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                   T(_2) 
                   )
# 165 "Parser.fsy"
                 : operator));
# 1232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                   S(_2) 
                   )
# 166 "Parser.fsy"
                 : operator));
# 1243 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                   SDG(_2) 
                   )
# 167 "Parser.fsy"
                 : operator));
# 1254 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                   SX(_2) 
                   )
# 168 "Parser.fsy"
                 : operator));
# 1265 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                   SXDG(_2) 
                   )
# 169 "Parser.fsy"
                 : operator));
# 1276 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                              P(_3, _5) 
                   )
# 171 "Parser.fsy"
                 : operator));
# 1288 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                              RZ(_3, _5) 
                   )
# 172 "Parser.fsy"
                 : operator));
# 1300 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                              RY(_3, _5) 
                   )
# 173 "Parser.fsy"
                 : operator));
# 1312 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                              RX(_3, _5) 
                   )
# 174 "Parser.fsy"
                 : operator));
# 1324 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> arithExpr in
            let _7 = parseState.GetInput(7) :?> arithExpr in
            let _9 = parseState.GetInput(9) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                                                              U(_3, _5, _7, _9) 
                   )
# 175 "Parser.fsy"
                 : operator));
# 1338 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                              CNOT(_2, _4) 
                   )
# 177 "Parser.fsy"
                 : operator));
# 1350 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            let _6 = parseState.GetInput(6) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                              CCX(_2, _4, _6) 
                   )
# 178 "Parser.fsy"
                 : operator));
# 1363 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                              AST.SWAP(_2, _4) 
                   )
# 179 "Parser.fsy"
                 : operator));
# 1375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            let _7 = parseState.GetInput(7) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                                           RXX(_3, _5, _7) 
                   )
# 181 "Parser.fsy"
                 : operator));
# 1388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            let _7 = parseState.GetInput(7) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                                           RZZ(_3, _5, _7) 
                   )
# 182 "Parser.fsy"
                 : operator));
|]
# 1402 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 67;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : AST.operator * AST.operator =
    engine lexer lexbuf 0 :?> _
