// Implementation file for parser generated by fsyacc
module QuantumLanguage.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SAND
  | SOR
  | AND
  | OR
  | NEG
  | EQUAL
  | ISQ
  | NOTEQ
  | GREATER
  | LESS
  | GREATEREQ
  | LESSEQ
  | RZGATE
  | RYGATE
  | RXGATE
  | SWAP
  | TOFFOLI
  | CTRLNOT
  | SYMMRXX
  | SYMMRZZ
  | SQRTNOT
  | SQRTXDG
  | BARRIER
  | HADAMARD
  | IDENTITY
  | PAULIX
  | PAULIY
  | PAULIZ
  | TDAGGER
  | TGATE
  | SGATE
  | SDAGGER
  | PHASE
  | UNITARY
  | QUANTREG
  | CLASSREG
  | ASSIGN
  | ORDER
  | COMMA
  | MEASURE
  | MESHOST
  | CONDITIONAL
  | RESET
  | PHASEDISK
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | LPAR
  | RPAR
  | MATHPI
  | CLICK
  | NOCLICK
  | EOF
  | LBRAK
  | RBRAK
  | BOOL of (bool)
  | VARIABLE of (string)
  | FLOAT of (float)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_ISQ
    | TOKEN_NOTEQ
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATEREQ
    | TOKEN_LESSEQ
    | TOKEN_RZGATE
    | TOKEN_RYGATE
    | TOKEN_RXGATE
    | TOKEN_SWAP
    | TOKEN_TOFFOLI
    | TOKEN_CTRLNOT
    | TOKEN_SYMMRXX
    | TOKEN_SYMMRZZ
    | TOKEN_SQRTNOT
    | TOKEN_SQRTXDG
    | TOKEN_BARRIER
    | TOKEN_HADAMARD
    | TOKEN_IDENTITY
    | TOKEN_PAULIX
    | TOKEN_PAULIY
    | TOKEN_PAULIZ
    | TOKEN_TDAGGER
    | TOKEN_TGATE
    | TOKEN_SGATE
    | TOKEN_SDAGGER
    | TOKEN_PHASE
    | TOKEN_UNITARY
    | TOKEN_QUANTREG
    | TOKEN_CLASSREG
    | TOKEN_ASSIGN
    | TOKEN_ORDER
    | TOKEN_COMMA
    | TOKEN_MEASURE
    | TOKEN_MESHOST
    | TOKEN_CONDITIONAL
    | TOKEN_RESET
    | TOKEN_PHASEDISK
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MATHPI
    | TOKEN_CLICK
    | TOKEN_NOCLICK
    | TOKEN_EOF
    | TOKEN_LBRAK
    | TOKEN_RBRAK
    | TOKEN_BOOL
    | TOKEN_VARIABLE
    | TOKEN_FLOAT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_allocation
    | NONTERM_qallocation
    | NONTERM_callocation
    | NONTERM_expression
    | NONTERM_expression1
    | NONTERM_str
    | NONTERM_result
    | NONTERM_bit
    | NONTERM_bitsequence
    | NONTERM_boolexpression
    | NONTERM_measurement
    | NONTERM_operator

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | SAND  -> 0 
  | SOR  -> 1 
  | AND  -> 2 
  | OR  -> 3 
  | NEG  -> 4 
  | EQUAL  -> 5 
  | ISQ  -> 6 
  | NOTEQ  -> 7 
  | GREATER  -> 8 
  | LESS  -> 9 
  | GREATEREQ  -> 10 
  | LESSEQ  -> 11 
  | RZGATE  -> 12 
  | RYGATE  -> 13 
  | RXGATE  -> 14 
  | SWAP  -> 15 
  | TOFFOLI  -> 16 
  | CTRLNOT  -> 17 
  | SYMMRXX  -> 18 
  | SYMMRZZ  -> 19 
  | SQRTNOT  -> 20 
  | SQRTXDG  -> 21 
  | BARRIER  -> 22 
  | HADAMARD  -> 23 
  | IDENTITY  -> 24 
  | PAULIX  -> 25 
  | PAULIY  -> 26 
  | PAULIZ  -> 27 
  | TDAGGER  -> 28 
  | TGATE  -> 29 
  | SGATE  -> 30 
  | SDAGGER  -> 31 
  | PHASE  -> 32 
  | UNITARY  -> 33 
  | QUANTREG  -> 34 
  | CLASSREG  -> 35 
  | ASSIGN  -> 36 
  | ORDER  -> 37 
  | COMMA  -> 38 
  | MEASURE  -> 39 
  | MESHOST  -> 40 
  | CONDITIONAL  -> 41 
  | RESET  -> 42 
  | PHASEDISK  -> 43 
  | TIMES  -> 44 
  | DIV  -> 45 
  | PLUS  -> 46 
  | MINUS  -> 47 
  | LPAR  -> 48 
  | RPAR  -> 49 
  | MATHPI  -> 50 
  | CLICK  -> 51 
  | NOCLICK  -> 52 
  | EOF  -> 53 
  | LBRAK  -> 54 
  | RBRAK  -> 55 
  | BOOL _ -> 56 
  | VARIABLE _ -> 57 
  | FLOAT _ -> 58 
  | NUM _ -> 59 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SAND 
  | 1 -> TOKEN_SOR 
  | 2 -> TOKEN_AND 
  | 3 -> TOKEN_OR 
  | 4 -> TOKEN_NEG 
  | 5 -> TOKEN_EQUAL 
  | 6 -> TOKEN_ISQ 
  | 7 -> TOKEN_NOTEQ 
  | 8 -> TOKEN_GREATER 
  | 9 -> TOKEN_LESS 
  | 10 -> TOKEN_GREATEREQ 
  | 11 -> TOKEN_LESSEQ 
  | 12 -> TOKEN_RZGATE 
  | 13 -> TOKEN_RYGATE 
  | 14 -> TOKEN_RXGATE 
  | 15 -> TOKEN_SWAP 
  | 16 -> TOKEN_TOFFOLI 
  | 17 -> TOKEN_CTRLNOT 
  | 18 -> TOKEN_SYMMRXX 
  | 19 -> TOKEN_SYMMRZZ 
  | 20 -> TOKEN_SQRTNOT 
  | 21 -> TOKEN_SQRTXDG 
  | 22 -> TOKEN_BARRIER 
  | 23 -> TOKEN_HADAMARD 
  | 24 -> TOKEN_IDENTITY 
  | 25 -> TOKEN_PAULIX 
  | 26 -> TOKEN_PAULIY 
  | 27 -> TOKEN_PAULIZ 
  | 28 -> TOKEN_TDAGGER 
  | 29 -> TOKEN_TGATE 
  | 30 -> TOKEN_SGATE 
  | 31 -> TOKEN_SDAGGER 
  | 32 -> TOKEN_PHASE 
  | 33 -> TOKEN_UNITARY 
  | 34 -> TOKEN_QUANTREG 
  | 35 -> TOKEN_CLASSREG 
  | 36 -> TOKEN_ASSIGN 
  | 37 -> TOKEN_ORDER 
  | 38 -> TOKEN_COMMA 
  | 39 -> TOKEN_MEASURE 
  | 40 -> TOKEN_MESHOST 
  | 41 -> TOKEN_CONDITIONAL 
  | 42 -> TOKEN_RESET 
  | 43 -> TOKEN_PHASEDISK 
  | 44 -> TOKEN_TIMES 
  | 45 -> TOKEN_DIV 
  | 46 -> TOKEN_PLUS 
  | 47 -> TOKEN_MINUS 
  | 48 -> TOKEN_LPAR 
  | 49 -> TOKEN_RPAR 
  | 50 -> TOKEN_MATHPI 
  | 51 -> TOKEN_CLICK 
  | 52 -> TOKEN_NOCLICK 
  | 53 -> TOKEN_EOF 
  | 54 -> TOKEN_LBRAK 
  | 55 -> TOKEN_RBRAK 
  | 56 -> TOKEN_BOOL 
  | 57 -> TOKEN_VARIABLE 
  | 58 -> TOKEN_FLOAT 
  | 59 -> TOKEN_NUM 
  | 62 -> TOKEN_end_of_input
  | 60 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_allocation 
    | 4 -> NONTERM_qallocation 
    | 5 -> NONTERM_qallocation 
    | 6 -> NONTERM_callocation 
    | 7 -> NONTERM_callocation 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression 
    | 13 -> NONTERM_expression1 
    | 14 -> NONTERM_expression1 
    | 15 -> NONTERM_expression1 
    | 16 -> NONTERM_expression1 
    | 17 -> NONTERM_expression1 
    | 18 -> NONTERM_expression1 
    | 19 -> NONTERM_expression1 
    | 20 -> NONTERM_str 
    | 21 -> NONTERM_result 
    | 22 -> NONTERM_result 
    | 23 -> NONTERM_bit 
    | 24 -> NONTERM_bit 
    | 25 -> NONTERM_bitsequence 
    | 26 -> NONTERM_bitsequence 
    | 27 -> NONTERM_boolexpression 
    | 28 -> NONTERM_boolexpression 
    | 29 -> NONTERM_boolexpression 
    | 30 -> NONTERM_boolexpression 
    | 31 -> NONTERM_boolexpression 
    | 32 -> NONTERM_boolexpression 
    | 33 -> NONTERM_boolexpression 
    | 34 -> NONTERM_boolexpression 
    | 35 -> NONTERM_boolexpression 
    | 36 -> NONTERM_boolexpression 
    | 37 -> NONTERM_boolexpression 
    | 38 -> NONTERM_boolexpression 
    | 39 -> NONTERM_boolexpression 
    | 40 -> NONTERM_boolexpression 
    | 41 -> NONTERM_boolexpression 
    | 42 -> NONTERM_measurement 
    | 43 -> NONTERM_operator 
    | 44 -> NONTERM_operator 
    | 45 -> NONTERM_operator 
    | 46 -> NONTERM_operator 
    | 47 -> NONTERM_operator 
    | 48 -> NONTERM_operator 
    | 49 -> NONTERM_operator 
    | 50 -> NONTERM_operator 
    | 51 -> NONTERM_operator 
    | 52 -> NONTERM_operator 
    | 53 -> NONTERM_operator 
    | 54 -> NONTERM_operator 
    | 55 -> NONTERM_operator 
    | 56 -> NONTERM_operator 
    | 57 -> NONTERM_operator 
    | 58 -> NONTERM_operator 
    | 59 -> NONTERM_operator 
    | 60 -> NONTERM_operator 
    | 61 -> NONTERM_operator 
    | 62 -> NONTERM_operator 
    | 63 -> NONTERM_operator 
    | 64 -> NONTERM_operator 
    | 65 -> NONTERM_operator 
    | 66 -> NONTERM_operator 
    | 67 -> NONTERM_operator 
    | 68 -> NONTERM_operator 
    | 69 -> NONTERM_operator 
    | 70 -> NONTERM_operator 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 62 
let _fsyacc_tagOfErrorTerminal = 60

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | ISQ  -> "ISQ" 
  | NOTEQ  -> "NOTEQ" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATEREQ  -> "GREATEREQ" 
  | LESSEQ  -> "LESSEQ" 
  | RZGATE  -> "RZGATE" 
  | RYGATE  -> "RYGATE" 
  | RXGATE  -> "RXGATE" 
  | SWAP  -> "SWAP" 
  | TOFFOLI  -> "TOFFOLI" 
  | CTRLNOT  -> "CTRLNOT" 
  | SYMMRXX  -> "SYMMRXX" 
  | SYMMRZZ  -> "SYMMRZZ" 
  | SQRTNOT  -> "SQRTNOT" 
  | SQRTXDG  -> "SQRTXDG" 
  | BARRIER  -> "BARRIER" 
  | HADAMARD  -> "HADAMARD" 
  | IDENTITY  -> "IDENTITY" 
  | PAULIX  -> "PAULIX" 
  | PAULIY  -> "PAULIY" 
  | PAULIZ  -> "PAULIZ" 
  | TDAGGER  -> "TDAGGER" 
  | TGATE  -> "TGATE" 
  | SGATE  -> "SGATE" 
  | SDAGGER  -> "SDAGGER" 
  | PHASE  -> "PHASE" 
  | UNITARY  -> "UNITARY" 
  | QUANTREG  -> "QUANTREG" 
  | CLASSREG  -> "CLASSREG" 
  | ASSIGN  -> "ASSIGN" 
  | ORDER  -> "ORDER" 
  | COMMA  -> "COMMA" 
  | MEASURE  -> "MEASURE" 
  | MESHOST  -> "MESHOST" 
  | CONDITIONAL  -> "CONDITIONAL" 
  | RESET  -> "RESET" 
  | PHASEDISK  -> "PHASEDISK" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | MATHPI  -> "MATHPI" 
  | CLICK  -> "CLICK" 
  | NOCLICK  -> "NOCLICK" 
  | EOF  -> "EOF" 
  | LBRAK  -> "LBRAK" 
  | RBRAK  -> "RBRAK" 
  | BOOL _ -> "BOOL" 
  | VARIABLE _ -> "VARIABLE" 
  | FLOAT _ -> "FLOAT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | ISQ  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATEREQ  -> (null : System.Object) 
  | LESSEQ  -> (null : System.Object) 
  | RZGATE  -> (null : System.Object) 
  | RYGATE  -> (null : System.Object) 
  | RXGATE  -> (null : System.Object) 
  | SWAP  -> (null : System.Object) 
  | TOFFOLI  -> (null : System.Object) 
  | CTRLNOT  -> (null : System.Object) 
  | SYMMRXX  -> (null : System.Object) 
  | SYMMRZZ  -> (null : System.Object) 
  | SQRTNOT  -> (null : System.Object) 
  | SQRTXDG  -> (null : System.Object) 
  | BARRIER  -> (null : System.Object) 
  | HADAMARD  -> (null : System.Object) 
  | IDENTITY  -> (null : System.Object) 
  | PAULIX  -> (null : System.Object) 
  | PAULIY  -> (null : System.Object) 
  | PAULIZ  -> (null : System.Object) 
  | TDAGGER  -> (null : System.Object) 
  | TGATE  -> (null : System.Object) 
  | SGATE  -> (null : System.Object) 
  | SDAGGER  -> (null : System.Object) 
  | PHASE  -> (null : System.Object) 
  | UNITARY  -> (null : System.Object) 
  | QUANTREG  -> (null : System.Object) 
  | CLASSREG  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MEASURE  -> (null : System.Object) 
  | MESHOST  -> (null : System.Object) 
  | CONDITIONAL  -> (null : System.Object) 
  | RESET  -> (null : System.Object) 
  | PHASEDISK  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | MATHPI  -> (null : System.Object) 
  | CLICK  -> (null : System.Object) 
  | NOCLICK  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LBRAK  -> (null : System.Object) 
  | RBRAK  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;1us;65535us;0us;6us;1us;65535us;6us;7us;28us;65535us;41us;18us;42us;19us;43us;20us;44us;21us;55us;22us;56us;23us;76us;24us;77us;24us;78us;24us;79us;24us;80us;24us;84us;25us;85us;26us;86us;27us;87us;28us;88us;29us;89us;30us;96us;31us;104us;24us;132us;32us;136us;33us;140us;34us;144us;35us;148us;36us;149us;37us;150us;38us;168us;39us;174us;40us;30us;65535us;41us;45us;42us;45us;43us;45us;44us;45us;51us;52us;53us;54us;55us;45us;56us;45us;76us;45us;77us;45us;78us;45us;79us;45us;80us;45us;84us;45us;85us;45us;86us;45us;87us;45us;88us;45us;89us;45us;96us;45us;104us;45us;132us;45us;136us;45us;140us;45us;144us;45us;148us;45us;149us;45us;150us;45us;168us;45us;174us;45us;67us;65535us;2us;95us;8us;62us;13us;62us;41us;49us;42us;49us;43us;49us;44us;49us;51us;49us;53us;49us;55us;49us;56us;50us;66us;62us;76us;50us;77us;50us;78us;50us;79us;50us;80us;50us;84us;49us;85us;49us;86us;49us;87us;49us;88us;49us;89us;49us;91us;62us;93us;62us;96us;49us;99us;95us;101us;62us;104us;50us;105us;95us;106us;62us;109us;62us;111us;62us;113us;62us;115us;62us;117us;62us;119us;62us;121us;62us;123us;62us;125us;62us;127us;62us;129us;62us;132us;49us;133us;62us;136us;49us;137us;62us;140us;49us;141us;62us;144us;49us;145us;62us;148us;49us;149us;49us;150us;49us;151us;62us;153us;62us;155us;62us;157us;62us;159us;62us;161us;62us;163us;62us;165us;62us;168us;49us;169us;62us;171us;62us;174us;49us;175us;62us;177us;62us;1us;65535us;82us;83us;41us;65535us;8us;11us;13us;16us;56us;81us;66us;67us;76us;81us;77us;81us;78us;81us;79us;81us;80us;81us;91us;92us;93us;94us;101us;102us;104us;81us;106us;107us;109us;110us;111us;112us;113us;114us;115us;116us;117us;118us;119us;120us;121us;122us;123us;124us;125us;126us;127us;128us;129us;130us;133us;134us;137us;138us;141us;142us;145us;146us;151us;152us;153us;154us;155us;156us;157us;158us;159us;160us;161us;162us;163us;164us;165us;166us;169us;170us;171us;172us;175us;176us;177us;178us;2us;65535us;8us;9us;13us;14us;7us;65535us;56us;74us;76us;69us;77us;70us;78us;71us;79us;72us;80us;73us;104us;75us;3us;65535us;2us;100us;99us;100us;105us;100us;3us;65535us;2us;3us;99us;97us;105us;98us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;7us;9us;38us;69us;137us;139us;181us;184us;192us;196us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;1us;44us;1us;1us;1us;2us;1us;3us;1us;3us;2us;4us;5us;1us;4us;1us;4us;3us;5us;25us;26us;1us;5us;2us;6us;7us;1us;6us;1us;6us;3us;7us;25us;26us;1us;7us;5us;8us;8us;9us;10us;11us;5us;8us;9us;9us;10us;11us;5us;8us;9us;10us;10us;11us;5us;8us;9us;10us;11us;11us;5us;8us;9us;10us;11us;19us;11us;8us;9us;10us;11us;19us;35us;36us;37us;38us;39us;40us;10us;8us;9us;10us;11us;35us;36us;37us;38us;39us;40us;5us;8us;9us;10us;11us;35us;5us;8us;9us;10us;11us;36us;5us;8us;9us;10us;11us;37us;5us;8us;9us;10us;11us;38us;5us;8us;9us;10us;11us;39us;5us;8us;9us;10us;11us;40us;5us;8us;9us;10us;11us;43us;5us;8us;9us;10us;11us;61us;5us;8us;9us;10us;11us;62us;5us;8us;9us;10us;11us;63us;5us;8us;9us;10us;11us;64us;5us;8us;9us;10us;11us;65us;5us;8us;9us;10us;11us;65us;5us;8us;9us;10us;11us;65us;5us;8us;9us;10us;11us;69us;5us;8us;9us;10us;11us;70us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;3us;16us;24us;28us;1us;17us;1us;17us;1us;18us;1us;18us;1us;19us;2us;19us;41us;1us;19us;1us;20us;2us;20us;23us;1us;21us;1us;22us;1us;24us;1us;24us;1us;24us;1us;24us;1us;26us;1us;26us;1us;27us;5us;29us;29us;30us;31us;32us;5us;29us;30us;30us;31us;32us;5us;29us;30us;31us;31us;32us;5us;29us;30us;31us;32us;32us;5us;29us;30us;31us;32us;33us;5us;29us;30us;31us;32us;41us;5us;29us;30us;31us;32us;47us;1us;29us;1us;30us;1us;31us;1us;32us;1us;33us;1us;34us;1us;34us;1us;34us;1us;35us;1us;36us;1us;37us;1us;38us;1us;39us;1us;40us;1us;41us;1us;42us;1us;42us;1us;42us;1us;42us;1us;43us;1us;43us;2us;44us;44us;2us;44us;47us;1us;44us;1us;45us;1us;46us;1us;46us;1us;47us;1us;47us;1us;47us;1us;48us;1us;48us;1us;49us;1us;50us;1us;50us;1us;51us;1us;51us;1us;52us;1us;52us;1us;53us;1us;53us;1us;54us;1us;54us;1us;55us;1us;55us;1us;56us;1us;56us;1us;57us;1us;57us;1us;58us;1us;58us;1us;59us;1us;59us;1us;60us;1us;60us;1us;61us;1us;61us;1us;61us;1us;61us;1us;62us;1us;62us;1us;62us;1us;62us;1us;63us;1us;63us;1us;63us;1us;63us;1us;64us;1us;64us;1us;64us;1us;64us;1us;65us;1us;65us;1us;65us;1us;65us;1us;65us;1us;65us;1us;66us;1us;66us;1us;66us;1us;66us;1us;67us;1us;67us;1us;67us;1us;67us;1us;67us;1us;67us;1us;68us;1us;68us;1us;68us;1us;68us;1us;69us;1us;69us;1us;69us;1us;69us;1us;69us;1us;69us;1us;70us;1us;70us;1us;70us;1us;70us;1us;70us;1us;70us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;13us;15us;17us;20us;22us;24us;28us;30us;33us;35us;37us;41us;43us;49us;55us;61us;67us;73us;85us;96us;102us;108us;114us;120us;126us;132us;138us;144us;150us;156us;162us;168us;174us;180us;186us;192us;194us;196us;198us;200us;202us;204us;206us;208us;210us;214us;216us;218us;220us;222us;224us;227us;229us;231us;234us;236us;238us;240us;242us;244us;246us;248us;250us;252us;258us;264us;270us;276us;282us;288us;294us;296us;298us;300us;302us;304us;306us;308us;310us;312us;314us;316us;318us;320us;322us;324us;326us;328us;330us;332us;334us;336us;339us;342us;344us;346us;348us;350us;352us;354us;356us;358us;360us;362us;364us;366us;368us;370us;372us;374us;376us;378us;380us;382us;384us;386us;388us;390us;392us;394us;396us;398us;400us;402us;404us;406us;408us;410us;412us;414us;416us;418us;420us;422us;424us;426us;428us;430us;432us;434us;436us;438us;440us;442us;444us;446us;448us;450us;452us;454us;456us;458us;460us;462us;464us;466us;468us;470us;472us;474us;476us;478us;480us;482us;484us;486us;488us;490us;492us;494us;496us;498us;500us;|]
let _fsyacc_action_rows = 179
let _fsyacc_actionTableElements = [|2us;32768us;34us;8us;53us;5us;0us;49152us;27us;32768us;12us;135us;13us;139us;14us;143us;15us;163us;16us;157us;17us;153us;18us;167us;19us;173us;20us;127us;21us;129us;22us;106us;23us;109us;24us;111us;25us;113us;26us;115us;27us;117us;28us;119us;29us;121us;30us;123us;31us;125us;32us;131us;33us;147us;39us;91us;41us;103us;42us;101us;43us;108us;57us;58us;2us;32768us;37us;99us;53us;4us;0us;16385us;0us;16386us;1us;32768us;35us;13us;0us;16387us;1us;32768us;57us;59us;1us;32768us;37us;10us;0us;16388us;2us;16409us;37us;12us;38us;66us;0us;16389us;1us;32768us;57us;59us;1us;32768us;37us;15us;0us;16390us;2us;16409us;37us;17us;38us;66us;0us;16391us;0us;16392us;0us;16393us;2us;16394us;44us;41us;45us;42us;2us;16395us;44us;41us;45us;42us;5us;32768us;44us;41us;45us;42us;46us;43us;47us;44us;49us;57us;11us;32768us;5us;84us;7us;85us;8us;86us;9us;88us;10us;87us;11us;89us;44us;41us;45us;42us;46us;43us;47us;44us;49us;57us;10us;32768us;5us;84us;7us;85us;8us;86us;9us;88us;10us;87us;11us;89us;44us;41us;45us;42us;46us;43us;47us;44us;4us;16419us;44us;41us;45us;42us;46us;43us;47us;44us;4us;16420us;44us;41us;45us;42us;46us;43us;47us;44us;4us;16421us;44us;41us;45us;42us;46us;43us;47us;44us;4us;16422us;44us;41us;45us;42us;46us;43us;47us;44us;4us;16423us;44us;41us;45us;42us;46us;43us;47us;44us;4us;16424us;44us;41us;45us;42us;46us;43us;47us;44us;4us;16427us;44us;41us;45us;42us;46us;43us;47us;44us;5us;32768us;44us;41us;45us;42us;46us;43us;47us;44us;49us;133us;5us;32768us;44us;41us;45us;42us;46us;43us;47us;44us;49us;137us;5us;32768us;44us;41us;45us;42us;46us;43us;47us;44us;49us;141us;5us;32768us;44us;41us;45us;42us;46us;43us;47us;44us;49us;145us;5us;32768us;38us;149us;44us;41us;45us;42us;46us;43us;47us;44us;5us;32768us;38us;150us;44us;41us;45us;42us;46us;43us;47us;44us;5us;32768us;44us;41us;45us;42us;46us;43us;47us;44us;49us;151us;5us;32768us;44us;41us;45us;42us;46us;43us;47us;44us;49us;169us;5us;32768us;44us;41us;45us;42us;46us;43us;47us;44us;49us;175us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;0us;16396us;0us;16397us;0us;16398us;0us;16399us;0us;16400us;5us;16400us;0us;16412us;1us;16412us;2us;16412us;3us;16412us;54us;63us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;0us;16401us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;0us;16402us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;9us;32768us;4us;80us;46us;53us;47us;51us;48us;56us;50us;48us;56us;68us;57us;59us;58us;47us;59us;46us;0us;16403us;0us;16404us;5us;16404us;6us;16407us;37us;16407us;38us;16407us;40us;16407us;53us;16407us;0us;16405us;0us;16406us;1us;32768us;54us;63us;1us;32768us;59us;64us;1us;32768us;55us;65us;0us;16408us;1us;32768us;57us;59us;0us;16410us;0us;16411us;0us;16413us;2us;16414us;0us;76us;2us;78us;0us;16415us;2us;16416us;0us;76us;2us;78us;0us;16417us;5us;32768us;0us;76us;1us;77us;2us;78us;3us;79us;49us;90us;5us;32768us;0us;76us;1us;77us;2us;78us;3us;79us;49us;105us;9us;32768us;4us;80us;46us;53us;47us;51us;48us;56us;50us;48us;56us;68us;57us;59us;58us;47us;59us;46us;9us;32768us;4us;80us;46us;53us;47us;51us;48us;56us;50us;48us;56us;68us;57us;59us;58us;47us;59us;46us;9us;32768us;4us;80us;46us;53us;47us;51us;48us;56us;50us;48us;56us;68us;57us;59us;58us;47us;59us;46us;9us;32768us;4us;80us;46us;53us;47us;51us;48us;56us;50us;48us;56us;68us;57us;59us;58us;47us;59us;46us;9us;32768us;4us;80us;46us;53us;47us;51us;48us;56us;50us;48us;56us;68us;57us;59us;58us;47us;59us;46us;1us;32768us;6us;82us;2us;32768us;51us;60us;52us;61us;0us;16418us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;0us;16425us;1us;32768us;57us;59us;1us;32768us;40us;93us;1us;32768us;57us;59us;0us;16426us;1us;32768us;36us;96us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;1us;16428us;37us;99us;0us;16431us;27us;32768us;12us;135us;13us;139us;14us;143us;15us;163us;16us;157us;17us;153us;18us;167us;19us;173us;20us;127us;21us;129us;22us;106us;23us;109us;24us;111us;25us;113us;26us;115us;27us;117us;28us;119us;29us;121us;30us;123us;31us;125us;32us;131us;33us;147us;39us;91us;41us;103us;42us;101us;43us;108us;57us;58us;0us;16429us;1us;32768us;57us;59us;0us;16430us;1us;32768us;48us;104us;9us;32768us;4us;80us;46us;53us;47us;51us;48us;56us;50us;48us;56us;68us;57us;59us;58us;47us;59us;46us;27us;32768us;12us;135us;13us;139us;14us;143us;15us;163us;16us;157us;17us;153us;18us;167us;19us;173us;20us;127us;21us;129us;22us;106us;23us;109us;24us;111us;25us;113us;26us;115us;27us;117us;28us;119us;29us;121us;30us;123us;31us;125us;32us;131us;33us;147us;39us;91us;41us;103us;42us;101us;43us;108us;57us;58us;1us;32768us;57us;59us;0us;16432us;0us;16433us;1us;32768us;57us;59us;0us;16434us;1us;32768us;57us;59us;0us;16435us;1us;32768us;57us;59us;0us;16436us;1us;32768us;57us;59us;0us;16437us;1us;32768us;57us;59us;0us;16438us;1us;32768us;57us;59us;0us;16439us;1us;32768us;57us;59us;0us;16440us;1us;32768us;57us;59us;0us;16441us;1us;32768us;57us;59us;0us;16442us;1us;32768us;57us;59us;0us;16443us;1us;32768us;57us;59us;0us;16444us;1us;32768us;48us;132us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;1us;32768us;57us;59us;0us;16445us;1us;32768us;48us;136us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;1us;32768us;57us;59us;0us;16446us;1us;32768us;48us;140us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;1us;32768us;57us;59us;0us;16447us;1us;32768us;48us;144us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;1us;32768us;57us;59us;0us;16448us;1us;32768us;48us;148us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;1us;32768us;57us;59us;0us;16449us;1us;32768us;57us;59us;1us;32768us;38us;155us;1us;32768us;57us;59us;0us;16450us;1us;32768us;57us;59us;1us;32768us;38us;159us;1us;32768us;57us;59us;1us;32768us;38us;161us;1us;32768us;57us;59us;0us;16451us;1us;32768us;57us;59us;1us;32768us;38us;165us;1us;32768us;57us;59us;0us;16452us;1us;32768us;48us;168us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;1us;32768us;57us;59us;1us;32768us;38us;171us;1us;32768us;57us;59us;0us;16453us;1us;32768us;48us;174us;7us;32768us;46us;53us;47us;51us;48us;55us;50us;48us;57us;58us;58us;47us;59us;46us;1us;32768us;57us;59us;1us;32768us;38us;177us;1us;32768us;57us;59us;0us;16454us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;32us;35us;36us;37us;39us;40us;42us;44us;45us;48us;49us;51us;53us;54us;57us;58us;59us;60us;63us;66us;72us;84us;95us;100us;105us;110us;115us;120us;125us;130us;136us;142us;148us;154us;160us;166us;172us;178us;184us;192us;200us;208us;216us;217us;218us;219us;220us;221us;227us;235us;236us;244us;245us;253us;263us;264us;265us;271us;272us;273us;275us;277us;279us;280us;282us;283us;284us;285us;288us;289us;292us;293us;299us;305us;315us;325us;335us;345us;355us;357us;360us;361us;369us;377us;385us;393us;401us;409us;410us;412us;414us;416us;417us;419us;427us;429us;430us;458us;459us;461us;462us;464us;474us;502us;504us;505us;506us;508us;509us;511us;512us;514us;515us;517us;518us;520us;521us;523us;524us;526us;527us;529us;530us;532us;533us;535us;536us;538us;539us;541us;549us;551us;552us;554us;562us;564us;565us;567us;575us;577us;578us;580us;588us;590us;591us;593us;601us;609us;617us;619us;620us;622us;624us;626us;627us;629us;631us;633us;635us;637us;638us;640us;642us;644us;645us;647us;655us;657us;659us;661us;662us;664us;672us;674us;676us;678us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;1us;2us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;1us;1us;1us;2us;2us;3us;1us;1us;1us;1us;4us;1us;3us;1us;1us;3us;3us;3us;3us;2us;3us;3us;3us;3us;3us;3us;3us;3us;4us;3us;3us;1us;2us;5us;2us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;5us;5us;5us;5us;9us;4us;6us;4us;7us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;3us;3us;4us;4us;5us;5us;5us;5us;5us;6us;6us;6us;6us;6us;6us;6us;7us;8us;8us;9us;9us;10us;10us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;12us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;16385us;16386us;65535us;16387us;65535us;65535us;16388us;65535us;16389us;65535us;65535us;16390us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16396us;16397us;16398us;16399us;16400us;65535us;65535us;16401us;65535us;16402us;65535us;65535us;16403us;16404us;65535us;16405us;16406us;65535us;65535us;65535us;16408us;65535us;16410us;16411us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16418us;65535us;65535us;65535us;65535us;65535us;65535us;16425us;65535us;65535us;65535us;16426us;65535us;65535us;65535us;65535us;65535us;16429us;65535us;16430us;65535us;65535us;65535us;65535us;16432us;16433us;65535us;16434us;65535us;16435us;65535us;16436us;65535us;16437us;65535us;16438us;65535us;16439us;65535us;16440us;65535us;16441us;65535us;16442us;65535us;16443us;65535us;16444us;65535us;65535us;65535us;16445us;65535us;65535us;65535us;16446us;65535us;65535us;65535us;16447us;65535us;65535us;65535us;16448us;65535us;65535us;65535us;65535us;65535us;16449us;65535us;65535us;65535us;16450us;65535us;65535us;65535us;65535us;65535us;16451us;65535us;65535us;65535us;16452us;65535us;65535us;65535us;65535us;65535us;16453us;65535us;65535us;65535us;65535us;65535us;16454us;|]
let _fsyacc_reductions = lazy [|
# 502 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.operator * AST.operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            let _2 = parseState.GetInput(2) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                       (_1, _2) 
                   )
# 50 "Parser.fsy"
                 : AST.operator * AST.operator));
# 523 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                       (NOP, NOP) 
                   )
# 51 "Parser.fsy"
                 : AST.operator * AST.operator));
# 533 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qallocation in
            let _2 = parseState.GetInput(2) :?> 'gentype_callocation in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                               AllocQC(_1, _2) 
                   )
# 60 "Parser.fsy"
                 : operator));
# 545 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                           _2 
                   )
# 63 "Parser.fsy"
                 : 'gentype_qallocation));
# 556 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                           _2 
                   )
# 64 "Parser.fsy"
                 : 'gentype_qallocation));
# 567 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                           _2 
                   )
# 68 "Parser.fsy"
                 : 'gentype_callocation));
# 578 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                           _2 
                   )
# 69 "Parser.fsy"
                 : 'gentype_callocation));
# 589 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                           TimesExpr(_1,_3) 
                   )
# 76 "Parser.fsy"
                 : arithExpr));
# 601 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                           DivExpr(_1,_3) 
                   )
# 77 "Parser.fsy"
                 : arithExpr));
# 613 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                           PlusExpr(_1,_3) 
                   )
# 78 "Parser.fsy"
                 : arithExpr));
# 625 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                           MinusExpr(_1,_3) 
                   )
# 79 "Parser.fsy"
                 : arithExpr));
# 637 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                           _1 
                   )
# 80 "Parser.fsy"
                 : arithExpr));
# 648 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                           Num(_1) 
                   )
# 83 "Parser.fsy"
                 : arithExpr));
# 659 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                           Float(_1) 
                   )
# 84 "Parser.fsy"
                 : arithExpr));
# 670 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                           Pi 
                   )
# 85 "Parser.fsy"
                 : arithExpr));
# 680 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                           StrA(_1) 
                   )
# 86 "Parser.fsy"
                 : arithExpr));
# 691 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                           UMinusExpr(_2) 
                   )
# 87 "Parser.fsy"
                 : arithExpr));
# 702 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                           UPlusExpr(_2) 
                   )
# 88 "Parser.fsy"
                 : arithExpr));
# 713 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                           _2 
                   )
# 89 "Parser.fsy"
                 : arithExpr));
# 724 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                           _1 
                   )
# 93 "Parser.fsy"
                 : 'gentype_str));
# 735 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                            Click 
                   )
# 98 "Parser.fsy"
                 : result));
# 745 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                            NoClick 
                   )
# 99 "Parser.fsy"
                 : result));
# 755 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                           BitS(_1) 
                   )
# 103 "Parser.fsy"
                 : bit));
# 766 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                           BitA(_1, _3) 
                   )
# 104 "Parser.fsy"
                 : bit));
# 778 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                               _1 
                   )
# 108 "Parser.fsy"
                 : bit));
# 789 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            let _3 = parseState.GetInput(3) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                               BitSeq(_1, _3) 
                   )
# 109 "Parser.fsy"
                 : bit));
# 801 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                                   Bool(_1) 
                   )
# 115 "Parser.fsy"
                 : boolExpr));
# 812 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                                   StrB(_1) 
                   )
# 116 "Parser.fsy"
                 : boolExpr));
# 823 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                                   ShortCircuitAnd(_1,_3) 
                   )
# 117 "Parser.fsy"
                 : boolExpr));
# 835 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                                   ShortCircuitOr(_1,_3) 
                   )
# 118 "Parser.fsy"
                 : boolExpr));
# 847 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                                   LogAnd(_1,_3) 
                   )
# 119 "Parser.fsy"
                 : boolExpr));
# 859 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> boolExpr in
            let _3 = parseState.GetInput(3) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                   LogOr(_1,_3) 
                   )
# 120 "Parser.fsy"
                 : boolExpr));
# 871 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                   Neg(_2)
                   )
# 121 "Parser.fsy"
                 : boolExpr));
# 882 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bit in
            let _3 = parseState.GetInput(3) :?> result in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                                   Check(_1,_3) 
                   )
# 122 "Parser.fsy"
                 : boolExpr));
# 894 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                   Equal(_1,_3) 
                   )
# 123 "Parser.fsy"
                 : boolExpr));
# 906 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                                   NotEqual(_1,_3) 
                   )
# 124 "Parser.fsy"
                 : boolExpr));
# 918 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                                   Greater(_1,_3) 
                   )
# 125 "Parser.fsy"
                 : boolExpr));
# 930 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                   GreaterEqual(_1,_3) 
                   )
# 126 "Parser.fsy"
                 : boolExpr));
# 942 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                                   Less(_1,_3) 
                   )
# 127 "Parser.fsy"
                 : boolExpr));
# 954 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> arithExpr in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                                   LessEqual(_1,_3) 
                   )
# 128 "Parser.fsy"
                 : boolExpr));
# 966 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> boolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                                   _2 
                   )
# 129 "Parser.fsy"
                 : boolExpr));
# 977 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                   Measure(_2, _4) 
                   )
# 135 "Parser.fsy"
                 : operator));
# 989 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> arithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                         Assign(_1, _3) 
                   )
# 140 "Parser.fsy"
                 : operator));
# 1001 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            let _3 = parseState.GetInput(3) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                                         Order(_1,_3)
                   )
# 141 "Parser.fsy"
                 : operator));
# 1013 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                                         _1 
                   )
# 142 "Parser.fsy"
                 : operator));
# 1024 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                                         Reset(_2) 
                   )
# 143 "Parser.fsy"
                 : operator));
# 1035 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> boolExpr in
            let _5 = parseState.GetInput(5) :?> operator in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                                         Condition(_3, _5) 
                   )
# 144 "Parser.fsy"
                 : operator));
# 1047 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                                         Barrier(_2) 
                   )
# 145 "Parser.fsy"
                 : operator));
# 1058 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                                         PhaseDisk 
                   )
# 146 "Parser.fsy"
                 : operator));
# 1068 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                   H(_2) 
                   )
# 150 "Parser.fsy"
                 : operator));
# 1079 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                   I(_2) 
                   )
# 151 "Parser.fsy"
                 : operator));
# 1090 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                   X(_2) 
                   )
# 152 "Parser.fsy"
                 : operator));
# 1101 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                   Y(_2) 
                   )
# 153 "Parser.fsy"
                 : operator));
# 1112 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                   Z(_2) 
                   )
# 154 "Parser.fsy"
                 : operator));
# 1123 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                   TDG(_2) 
                   )
# 155 "Parser.fsy"
                 : operator));
# 1134 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                                   T(_2) 
                   )
# 156 "Parser.fsy"
                 : operator));
# 1145 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                   S(_2) 
                   )
# 157 "Parser.fsy"
                 : operator));
# 1156 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                   SDG(_2) 
                   )
# 158 "Parser.fsy"
                 : operator));
# 1167 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                   SX(_2) 
                   )
# 159 "Parser.fsy"
                 : operator));
# 1178 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                   SXDG(_2) 
                   )
# 160 "Parser.fsy"
                 : operator));
# 1189 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                              P(_3, _5) 
                   )
# 162 "Parser.fsy"
                 : operator));
# 1201 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                              RZ(_3, _5) 
                   )
# 163 "Parser.fsy"
                 : operator));
# 1213 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                              RY(_3, _5) 
                   )
# 164 "Parser.fsy"
                 : operator));
# 1225 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                              RX(_3, _5) 
                   )
# 165 "Parser.fsy"
                 : operator));
# 1237 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> arithExpr in
            let _7 = parseState.GetInput(7) :?> arithExpr in
            let _9 = parseState.GetInput(9) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                                                              U(_3, _5, _7, _9) 
                   )
# 166 "Parser.fsy"
                 : operator));
# 1251 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                              CNOT(_2, _4) 
                   )
# 168 "Parser.fsy"
                 : operator));
# 1263 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            let _6 = parseState.GetInput(6) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                              CCX(_2, _4, _6) 
                   )
# 169 "Parser.fsy"
                 : operator));
# 1276 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> bit in
            let _4 = parseState.GetInput(4) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                              AST.SWAP(_2, _4) 
                   )
# 170 "Parser.fsy"
                 : operator));
# 1288 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            let _7 = parseState.GetInput(7) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                                           RXX(_3, _5, _7) 
                   )
# 172 "Parser.fsy"
                 : operator));
# 1301 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> arithExpr in
            let _5 = parseState.GetInput(5) :?> bit in
            let _7 = parseState.GetInput(7) :?> bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                                           RZZ(_3, _5, _7) 
                   )
# 173 "Parser.fsy"
                 : operator));
|]
# 1315 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 63;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : AST.operator * AST.operator =
    engine lexer lexbuf 0 :?> _
