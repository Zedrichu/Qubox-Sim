// Implementation file for parser generated by fsyacc
module internal QuantumLanguage.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open Tags
open AST

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | BVAR
  | SAND
  | SOR
  | AND
  | XOR
  | OR
  | NEG
  | EQUAL
  | ISQ
  | NOTEQ
  | GREATER
  | LESS
  | GREATEREQ
  | LESSEQ
  | RZGATE
  | RYGATE
  | RXGATE
  | SWAP
  | TOFFOLI
  | CTRLH
  | CTRLS
  | CTRLNOT
  | SYMMRXX
  | SYMMRZZ
  | SYMMRYY
  | SQRTNOT
  | SQRTXDG
  | BARRIER
  | HADAMARD
  | IDENTITY
  | PAULIX
  | PAULIY
  | PAULIZ
  | TDAGGER
  | TGATE
  | SGATE
  | SDAGGER
  | PHASE
  | UNITARY
  | QUANTREG
  | CLASSREG
  | ASSIGN
  | BASSIGN
  | DEL
  | SEP
  | MEASURE
  | MESHOST
  | CONDITIONAL
  | RESET
  | PHASEDISK
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | MOD
  | LPAR
  | RPAR
  | MATHPI
  | CLICK
  | NOCLICK
  | EOF
  | LBRAK
  | RBRAK
  | BOOL of (bool)
  | VARIABLE of (string)
  | FLOAT of (float)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_BVAR
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_AND
    | TOKEN_XOR
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_ISQ
    | TOKEN_NOTEQ
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATEREQ
    | TOKEN_LESSEQ
    | TOKEN_RZGATE
    | TOKEN_RYGATE
    | TOKEN_RXGATE
    | TOKEN_SWAP
    | TOKEN_TOFFOLI
    | TOKEN_CTRLH
    | TOKEN_CTRLS
    | TOKEN_CTRLNOT
    | TOKEN_SYMMRXX
    | TOKEN_SYMMRZZ
    | TOKEN_SYMMRYY
    | TOKEN_SQRTNOT
    | TOKEN_SQRTXDG
    | TOKEN_BARRIER
    | TOKEN_HADAMARD
    | TOKEN_IDENTITY
    | TOKEN_PAULIX
    | TOKEN_PAULIY
    | TOKEN_PAULIZ
    | TOKEN_TDAGGER
    | TOKEN_TGATE
    | TOKEN_SGATE
    | TOKEN_SDAGGER
    | TOKEN_PHASE
    | TOKEN_UNITARY
    | TOKEN_QUANTREG
    | TOKEN_CLASSREG
    | TOKEN_ASSIGN
    | TOKEN_BASSIGN
    | TOKEN_DEL
    | TOKEN_SEP
    | TOKEN_MEASURE
    | TOKEN_MESHOST
    | TOKEN_CONDITIONAL
    | TOKEN_RESET
    | TOKEN_PHASEDISK
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_MOD
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MATHPI
    | TOKEN_CLICK
    | TOKEN_NOCLICK
    | TOKEN_EOF
    | TOKEN_LBRAK
    | TOKEN_RBRAK
    | TOKEN_BOOL
    | TOKEN_VARIABLE
    | TOKEN_FLOAT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstartBool
    | NONTERM__startstartArith
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_startArith
    | NONTERM_startBool
    | NONTERM_allocation
    | NONTERM_qallocation
    | NONTERM_callocation
    | NONTERM_arithmetic
    | NONTERM_arithmetic1
    | NONTERM_str
    | NONTERM_statements
    | NONTERM_result
    | NONTERM_bit
    | NONTERM_bitsequence
    | NONTERM_boolean
    | NONTERM_operator

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | BVAR  -> 0 
  | SAND  -> 1 
  | SOR  -> 2 
  | AND  -> 3 
  | XOR  -> 4 
  | OR  -> 5 
  | NEG  -> 6 
  | EQUAL  -> 7 
  | ISQ  -> 8 
  | NOTEQ  -> 9 
  | GREATER  -> 10 
  | LESS  -> 11 
  | GREATEREQ  -> 12 
  | LESSEQ  -> 13 
  | RZGATE  -> 14 
  | RYGATE  -> 15 
  | RXGATE  -> 16 
  | SWAP  -> 17 
  | TOFFOLI  -> 18 
  | CTRLH  -> 19 
  | CTRLS  -> 20 
  | CTRLNOT  -> 21 
  | SYMMRXX  -> 22 
  | SYMMRZZ  -> 23 
  | SYMMRYY  -> 24 
  | SQRTNOT  -> 25 
  | SQRTXDG  -> 26 
  | BARRIER  -> 27 
  | HADAMARD  -> 28 
  | IDENTITY  -> 29 
  | PAULIX  -> 30 
  | PAULIY  -> 31 
  | PAULIZ  -> 32 
  | TDAGGER  -> 33 
  | TGATE  -> 34 
  | SGATE  -> 35 
  | SDAGGER  -> 36 
  | PHASE  -> 37 
  | UNITARY  -> 38 
  | QUANTREG  -> 39 
  | CLASSREG  -> 40 
  | ASSIGN  -> 41 
  | BASSIGN  -> 42 
  | DEL  -> 43 
  | SEP  -> 44 
  | MEASURE  -> 45 
  | MESHOST  -> 46 
  | CONDITIONAL  -> 47 
  | RESET  -> 48 
  | PHASEDISK  -> 49 
  | TIMES  -> 50 
  | DIV  -> 51 
  | PLUS  -> 52 
  | MINUS  -> 53 
  | POW  -> 54 
  | MOD  -> 55 
  | LPAR  -> 56 
  | RPAR  -> 57 
  | MATHPI  -> 58 
  | CLICK  -> 59 
  | NOCLICK  -> 60 
  | EOF  -> 61 
  | LBRAK  -> 62 
  | RBRAK  -> 63 
  | BOOL _ -> 64 
  | VARIABLE _ -> 65 
  | FLOAT _ -> 66 
  | NUM _ -> 67 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_BVAR 
  | 1 -> TOKEN_SAND 
  | 2 -> TOKEN_SOR 
  | 3 -> TOKEN_AND 
  | 4 -> TOKEN_XOR 
  | 5 -> TOKEN_OR 
  | 6 -> TOKEN_NEG 
  | 7 -> TOKEN_EQUAL 
  | 8 -> TOKEN_ISQ 
  | 9 -> TOKEN_NOTEQ 
  | 10 -> TOKEN_GREATER 
  | 11 -> TOKEN_LESS 
  | 12 -> TOKEN_GREATEREQ 
  | 13 -> TOKEN_LESSEQ 
  | 14 -> TOKEN_RZGATE 
  | 15 -> TOKEN_RYGATE 
  | 16 -> TOKEN_RXGATE 
  | 17 -> TOKEN_SWAP 
  | 18 -> TOKEN_TOFFOLI 
  | 19 -> TOKEN_CTRLH 
  | 20 -> TOKEN_CTRLS 
  | 21 -> TOKEN_CTRLNOT 
  | 22 -> TOKEN_SYMMRXX 
  | 23 -> TOKEN_SYMMRZZ 
  | 24 -> TOKEN_SYMMRYY 
  | 25 -> TOKEN_SQRTNOT 
  | 26 -> TOKEN_SQRTXDG 
  | 27 -> TOKEN_BARRIER 
  | 28 -> TOKEN_HADAMARD 
  | 29 -> TOKEN_IDENTITY 
  | 30 -> TOKEN_PAULIX 
  | 31 -> TOKEN_PAULIY 
  | 32 -> TOKEN_PAULIZ 
  | 33 -> TOKEN_TDAGGER 
  | 34 -> TOKEN_TGATE 
  | 35 -> TOKEN_SGATE 
  | 36 -> TOKEN_SDAGGER 
  | 37 -> TOKEN_PHASE 
  | 38 -> TOKEN_UNITARY 
  | 39 -> TOKEN_QUANTREG 
  | 40 -> TOKEN_CLASSREG 
  | 41 -> TOKEN_ASSIGN 
  | 42 -> TOKEN_BASSIGN 
  | 43 -> TOKEN_DEL 
  | 44 -> TOKEN_SEP 
  | 45 -> TOKEN_MEASURE 
  | 46 -> TOKEN_MESHOST 
  | 47 -> TOKEN_CONDITIONAL 
  | 48 -> TOKEN_RESET 
  | 49 -> TOKEN_PHASEDISK 
  | 50 -> TOKEN_TIMES 
  | 51 -> TOKEN_DIV 
  | 52 -> TOKEN_PLUS 
  | 53 -> TOKEN_MINUS 
  | 54 -> TOKEN_POW 
  | 55 -> TOKEN_MOD 
  | 56 -> TOKEN_LPAR 
  | 57 -> TOKEN_RPAR 
  | 58 -> TOKEN_MATHPI 
  | 59 -> TOKEN_CLICK 
  | 60 -> TOKEN_NOCLICK 
  | 61 -> TOKEN_EOF 
  | 62 -> TOKEN_LBRAK 
  | 63 -> TOKEN_RBRAK 
  | 64 -> TOKEN_BOOL 
  | 65 -> TOKEN_VARIABLE 
  | 66 -> TOKEN_FLOAT 
  | 67 -> TOKEN_NUM 
  | 70 -> TOKEN_end_of_input
  | 68 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstartBool 
    | 1 -> NONTERM__startstartArith 
    | 2 -> NONTERM__startstart 
    | 3 -> NONTERM_start 
    | 4 -> NONTERM_start 
    | 5 -> NONTERM_startArith 
    | 6 -> NONTERM_startArith 
    | 7 -> NONTERM_startBool 
    | 8 -> NONTERM_startBool 
    | 9 -> NONTERM_allocation 
    | 10 -> NONTERM_qallocation 
    | 11 -> NONTERM_qallocation 
    | 12 -> NONTERM_callocation 
    | 13 -> NONTERM_callocation 
    | 14 -> NONTERM_arithmetic 
    | 15 -> NONTERM_arithmetic 
    | 16 -> NONTERM_arithmetic 
    | 17 -> NONTERM_arithmetic 
    | 18 -> NONTERM_arithmetic 
    | 19 -> NONTERM_arithmetic 
    | 20 -> NONTERM_arithmetic 
    | 21 -> NONTERM_arithmetic1 
    | 22 -> NONTERM_arithmetic1 
    | 23 -> NONTERM_arithmetic1 
    | 24 -> NONTERM_arithmetic1 
    | 25 -> NONTERM_arithmetic1 
    | 26 -> NONTERM_arithmetic1 
    | 27 -> NONTERM_arithmetic1 
    | 28 -> NONTERM_str 
    | 29 -> NONTERM_statements 
    | 30 -> NONTERM_statements 
    | 31 -> NONTERM_statements 
    | 32 -> NONTERM_result 
    | 33 -> NONTERM_result 
    | 34 -> NONTERM_bit 
    | 35 -> NONTERM_bit 
    | 36 -> NONTERM_bitsequence 
    | 37 -> NONTERM_bitsequence 
    | 38 -> NONTERM_boolean 
    | 39 -> NONTERM_boolean 
    | 40 -> NONTERM_boolean 
    | 41 -> NONTERM_boolean 
    | 42 -> NONTERM_boolean 
    | 43 -> NONTERM_boolean 
    | 44 -> NONTERM_boolean 
    | 45 -> NONTERM_boolean 
    | 46 -> NONTERM_boolean 
    | 47 -> NONTERM_boolean 
    | 48 -> NONTERM_boolean 
    | 49 -> NONTERM_boolean 
    | 50 -> NONTERM_boolean 
    | 51 -> NONTERM_boolean 
    | 52 -> NONTERM_boolean 
    | 53 -> NONTERM_boolean 
    | 54 -> NONTERM_operator 
    | 55 -> NONTERM_operator 
    | 56 -> NONTERM_operator 
    | 57 -> NONTERM_operator 
    | 58 -> NONTERM_operator 
    | 59 -> NONTERM_operator 
    | 60 -> NONTERM_operator 
    | 61 -> NONTERM_operator 
    | 62 -> NONTERM_operator 
    | 63 -> NONTERM_operator 
    | 64 -> NONTERM_operator 
    | 65 -> NONTERM_operator 
    | 66 -> NONTERM_operator 
    | 67 -> NONTERM_operator 
    | 68 -> NONTERM_operator 
    | 69 -> NONTERM_operator 
    | 70 -> NONTERM_operator 
    | 71 -> NONTERM_operator 
    | 72 -> NONTERM_operator 
    | 73 -> NONTERM_operator 
    | 74 -> NONTERM_operator 
    | 75 -> NONTERM_operator 
    | 76 -> NONTERM_operator 
    | 77 -> NONTERM_operator 
    | 78 -> NONTERM_operator 
    | 79 -> NONTERM_operator 
    | 80 -> NONTERM_operator 
    | 81 -> NONTERM_operator 
    | 82 -> NONTERM_operator 
    | 83 -> NONTERM_operator 
    | 84 -> NONTERM_operator 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 70 
let _fsyacc_tagOfErrorTerminal = 68

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | BVAR  -> "BVAR" 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | AND  -> "AND" 
  | XOR  -> "XOR" 
  | OR  -> "OR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | ISQ  -> "ISQ" 
  | NOTEQ  -> "NOTEQ" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATEREQ  -> "GREATEREQ" 
  | LESSEQ  -> "LESSEQ" 
  | RZGATE  -> "RZGATE" 
  | RYGATE  -> "RYGATE" 
  | RXGATE  -> "RXGATE" 
  | SWAP  -> "SWAP" 
  | TOFFOLI  -> "TOFFOLI" 
  | CTRLH  -> "CTRLH" 
  | CTRLS  -> "CTRLS" 
  | CTRLNOT  -> "CTRLNOT" 
  | SYMMRXX  -> "SYMMRXX" 
  | SYMMRZZ  -> "SYMMRZZ" 
  | SYMMRYY  -> "SYMMRYY" 
  | SQRTNOT  -> "SQRTNOT" 
  | SQRTXDG  -> "SQRTXDG" 
  | BARRIER  -> "BARRIER" 
  | HADAMARD  -> "HADAMARD" 
  | IDENTITY  -> "IDENTITY" 
  | PAULIX  -> "PAULIX" 
  | PAULIY  -> "PAULIY" 
  | PAULIZ  -> "PAULIZ" 
  | TDAGGER  -> "TDAGGER" 
  | TGATE  -> "TGATE" 
  | SGATE  -> "SGATE" 
  | SDAGGER  -> "SDAGGER" 
  | PHASE  -> "PHASE" 
  | UNITARY  -> "UNITARY" 
  | QUANTREG  -> "QUANTREG" 
  | CLASSREG  -> "CLASSREG" 
  | ASSIGN  -> "ASSIGN" 
  | BASSIGN  -> "BASSIGN" 
  | DEL  -> "DEL" 
  | SEP  -> "SEP" 
  | MEASURE  -> "MEASURE" 
  | MESHOST  -> "MESHOST" 
  | CONDITIONAL  -> "CONDITIONAL" 
  | RESET  -> "RESET" 
  | PHASEDISK  -> "PHASEDISK" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | MOD  -> "MOD" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | MATHPI  -> "MATHPI" 
  | CLICK  -> "CLICK" 
  | NOCLICK  -> "NOCLICK" 
  | EOF  -> "EOF" 
  | LBRAK  -> "LBRAK" 
  | RBRAK  -> "RBRAK" 
  | BOOL _ -> "BOOL" 
  | VARIABLE _ -> "VARIABLE" 
  | FLOAT _ -> "FLOAT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | BVAR  -> (null : System.Object) 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | XOR  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | ISQ  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATEREQ  -> (null : System.Object) 
  | LESSEQ  -> (null : System.Object) 
  | RZGATE  -> (null : System.Object) 
  | RYGATE  -> (null : System.Object) 
  | RXGATE  -> (null : System.Object) 
  | SWAP  -> (null : System.Object) 
  | TOFFOLI  -> (null : System.Object) 
  | CTRLH  -> (null : System.Object) 
  | CTRLS  -> (null : System.Object) 
  | CTRLNOT  -> (null : System.Object) 
  | SYMMRXX  -> (null : System.Object) 
  | SYMMRZZ  -> (null : System.Object) 
  | SYMMRYY  -> (null : System.Object) 
  | SQRTNOT  -> (null : System.Object) 
  | SQRTXDG  -> (null : System.Object) 
  | BARRIER  -> (null : System.Object) 
  | HADAMARD  -> (null : System.Object) 
  | IDENTITY  -> (null : System.Object) 
  | PAULIX  -> (null : System.Object) 
  | PAULIY  -> (null : System.Object) 
  | PAULIZ  -> (null : System.Object) 
  | TDAGGER  -> (null : System.Object) 
  | TGATE  -> (null : System.Object) 
  | SGATE  -> (null : System.Object) 
  | SDAGGER  -> (null : System.Object) 
  | PHASE  -> (null : System.Object) 
  | UNITARY  -> (null : System.Object) 
  | QUANTREG  -> (null : System.Object) 
  | CLASSREG  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | BASSIGN  -> (null : System.Object) 
  | DEL  -> (null : System.Object) 
  | SEP  -> (null : System.Object) 
  | MEASURE  -> (null : System.Object) 
  | MESHOST  -> (null : System.Object) 
  | CONDITIONAL  -> (null : System.Object) 
  | RESET  -> (null : System.Object) 
  | PHASEDISK  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | MATHPI  -> (null : System.Object) 
  | CLICK  -> (null : System.Object) 
  | NOCLICK  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LBRAK  -> (null : System.Object) 
  | RBRAK  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;0us;65535us;0us;65535us;1us;65535us;4us;5us;1us;65535us;2us;3us;1us;65535us;0us;1us;1us;65535us;4us;6us;1us;65535us;4us;16us;1us;65535us;16us;17us;38us;65535us;0us;36us;2us;10us;6us;36us;7us;36us;54us;28us;55us;29us;56us;30us;57us;31us;58us;32us;59us;33us;68us;34us;69us;35us;76us;36us;97us;36us;98us;36us;99us;36us;100us;36us;101us;36us;102us;36us;103us;36us;107us;37us;108us;38us;109us;39us;110us;40us;111us;41us;112us;42us;116us;43us;119us;36us;153us;44us;157us;45us;161us;46us;165us;47us;169us;48us;170us;49us;171us;50us;197us;51us;203us;52us;209us;53us;40us;65535us;0us;60us;2us;60us;6us;60us;7us;60us;54us;60us;55us;60us;56us;60us;57us;60us;58us;60us;59us;60us;64us;65us;66us;67us;68us;60us;69us;60us;76us;60us;97us;60us;98us;60us;99us;60us;100us;60us;101us;60us;102us;60us;103us;60us;107us;60us;108us;60us;109us;60us;110us;60us;111us;60us;112us;60us;116us;60us;119us;60us;153us;60us;157us;60us;161us;60us;165us;60us;169us;60us;170us;60us;171us;60us;197us;60us;203us;60us;209us;60us;81us;65535us;0us;72us;2us;71us;6us;73us;7us;73us;18us;81us;23us;81us;54us;71us;55us;71us;56us;71us;57us;71us;58us;71us;59us;71us;64us;71us;66us;71us;68us;71us;69us;72us;76us;73us;86us;81us;97us;73us;98us;72us;99us;72us;100us;72us;101us;72us;102us;72us;103us;72us;107us;71us;108us;71us;109us;71us;110us;71us;111us;71us;112us;71us;116us;71us;117us;118us;119us;72us;121us;81us;123us;81us;125us;81us;127us;81us;130us;81us;132us;81us;134us;81us;136us;81us;138us;81us;140us;81us;142us;81us;144us;81us;146us;81us;148us;81us;150us;81us;153us;71us;154us;81us;157us;71us;158us;81us;161us;71us;162us;81us;165us;71us;166us;81us;169us;71us;170us;71us;171us;71us;172us;81us;174us;81us;176us;81us;178us;81us;180us;81us;182us;81us;184us;81us;186us;81us;188us;81us;190us;81us;192us;81us;194us;81us;197us;71us;198us;81us;200us;81us;203us;71us;204us;81us;206us;81us;209us;71us;210us;81us;212us;81us;3us;65535us;6us;7us;7us;76us;76us;76us;1us;65535us;105us;106us;53us;65535us;0us;104us;6us;104us;7us;104us;18us;21us;23us;26us;69us;104us;76us;104us;86us;85us;97us;104us;98us;104us;99us;104us;100us;104us;101us;104us;102us;104us;103us;104us;119us;104us;121us;122us;123us;124us;125us;126us;127us;128us;130us;131us;132us;133us;134us;135us;136us;137us;138us;139us;140us;141us;142us;143us;144us;145us;146us;147us;148us;149us;150us;151us;154us;155us;158us;159us;162us;163us;166us;167us;172us;173us;174us;175us;176us;177us;178us;179us;180us;181us;182us;183us;184us;185us;186us;187us;188us;189us;190us;191us;192us;193us;194us;195us;198us;199us;200us;201us;204us;205us;206us;207us;210us;211us;212us;213us;3us;65535us;18us;19us;23us;24us;86us;87us;13us;65535us;0us;13us;6us;96us;7us;96us;69us;95us;76us;96us;97us;96us;98us;89us;99us;90us;100us;91us;101us;92us;102us;93us;103us;94us;119us;97us;4us;65535us;6us;77us;7us;77us;76us;77us;97us;120us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;2us;3us;5us;7us;9us;11us;13us;15us;54us;95us;177us;181us;183us;237us;241us;255us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;2us;1us;3us;2us;3us;29us;1us;3us;1us;4us;7us;5us;14us;15us;16us;17us;18us;19us;1us;5us;1us;6us;6us;7us;39us;40us;41us;42us;43us;1us;7us;1us;8us;1us;9us;1us;9us;2us;10us;11us;1us;10us;1us;10us;3us;11us;36us;37us;1us;11us;2us;12us;13us;1us;12us;1us;12us;3us;13us;36us;37us;1us;13us;7us;14us;14us;15us;16us;17us;18us;19us;7us;14us;15us;15us;16us;17us;18us;19us;7us;14us;15us;16us;16us;17us;18us;19us;7us;14us;15us;16us;17us;17us;18us;19us;7us;14us;15us;16us;17us;18us;18us;19us;7us;14us;15us;16us;17us;18us;19us;19us;7us;14us;15us;16us;17us;18us;19us;26us;13us;14us;15us;16us;17us;18us;19us;26us;46us;47us;48us;49us;50us;51us;12us;14us;15us;16us;17us;18us;19us;46us;47us;48us;49us;50us;51us;7us;14us;15us;16us;17us;18us;19us;46us;7us;14us;15us;16us;17us;18us;19us;47us;7us;14us;15us;16us;17us;18us;19us;48us;7us;14us;15us;16us;17us;18us;19us;49us;7us;14us;15us;16us;17us;18us;19us;50us;7us;14us;15us;16us;17us;18us;19us;51us;7us;14us;15us;16us;17us;18us;19us;54us;7us;14us;15us;16us;17us;18us;19us;72us;7us;14us;15us;16us;17us;18us;19us;73us;7us;14us;15us;16us;17us;18us;19us;74us;7us;14us;15us;16us;17us;18us;19us;75us;7us;14us;15us;16us;17us;18us;19us;76us;7us;14us;15us;16us;17us;18us;19us;76us;7us;14us;15us;16us;17us;18us;19us;76us;7us;14us;15us;16us;17us;18us;19us;82us;7us;14us;15us;16us;17us;18us;19us;83us;7us;14us;15us;16us;17us;18us;19us;84us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;1us;24us;1us;25us;1us;25us;1us;26us;2us;26us;52us;1us;26us;1us;27us;2us;27us;35us;3us;27us;35us;54us;1us;28us;2us;28us;34us;2us;29us;29us;1us;30us;1us;30us;1us;32us;1us;33us;1us;35us;1us;35us;1us;35us;1us;35us;2us;36us;37us;1us;37us;1us;37us;1us;38us;6us;39us;39us;40us;41us;42us;43us;6us;39us;40us;40us;41us;42us;43us;6us;39us;40us;41us;41us;42us;43us;6us;39us;40us;41us;42us;42us;43us;6us;39us;40us;41us;42us;43us;43us;6us;39us;40us;41us;42us;43us;44us;6us;39us;40us;41us;42us;43us;52us;6us;39us;40us;41us;42us;43us;55us;6us;39us;40us;41us;42us;43us;56us;1us;39us;1us;40us;1us;41us;1us;42us;1us;43us;1us;44us;1us;45us;1us;45us;1us;45us;1us;46us;1us;47us;1us;48us;1us;49us;1us;50us;1us;51us;1us;52us;1us;53us;1us;53us;1us;54us;1us;55us;1us;55us;1us;56us;1us;56us;1us;57us;1us;57us;1us;57us;1us;57us;1us;58us;1us;58us;1us;59us;1us;59us;1us;60us;1us;61us;1us;61us;1us;62us;1us;62us;1us;63us;1us;63us;1us;64us;1us;64us;1us;65us;1us;65us;1us;66us;1us;66us;1us;67us;1us;67us;1us;68us;1us;68us;1us;69us;1us;69us;1us;70us;1us;70us;1us;71us;1us;71us;1us;72us;1us;72us;1us;72us;1us;72us;1us;73us;1us;73us;1us;73us;1us;73us;1us;74us;1us;74us;1us;74us;1us;74us;1us;75us;1us;75us;1us;75us;1us;75us;1us;76us;1us;76us;1us;76us;1us;76us;1us;76us;1us;76us;1us;77us;1us;77us;1us;77us;1us;77us;1us;78us;1us;78us;1us;78us;1us;78us;1us;79us;1us;79us;1us;79us;1us;79us;1us;80us;1us;80us;1us;80us;1us;80us;1us;80us;1us;80us;1us;81us;1us;81us;1us;81us;1us;81us;1us;82us;1us;82us;1us;82us;1us;82us;1us;82us;1us;82us;1us;83us;1us;83us;1us;83us;1us;83us;1us;83us;1us;83us;1us;84us;1us;84us;1us;84us;1us;84us;1us;84us;1us;84us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;17us;19us;21us;29us;31us;33us;40us;42us;44us;46us;48us;51us;53us;55us;59us;61us;64us;66us;68us;72us;74us;82us;90us;98us;106us;114us;122us;130us;144us;157us;165us;173us;181us;189us;197us;205us;213us;221us;229us;237us;245us;253us;261us;269us;277us;285us;293us;295us;297us;299us;301us;303us;305us;307us;309us;311us;313us;315us;317us;319us;321us;323us;326us;328us;330us;333us;337us;339us;342us;345us;347us;349us;351us;353us;355us;357us;359us;361us;364us;366us;368us;370us;377us;384us;391us;398us;405us;412us;419us;426us;433us;435us;437us;439us;441us;443us;445us;447us;449us;451us;453us;455us;457us;459us;461us;463us;465us;467us;469us;471us;473us;475us;477us;479us;481us;483us;485us;487us;489us;491us;493us;495us;497us;499us;501us;503us;505us;507us;509us;511us;513us;515us;517us;519us;521us;523us;525us;527us;529us;531us;533us;535us;537us;539us;541us;543us;545us;547us;549us;551us;553us;555us;557us;559us;561us;563us;565us;567us;569us;571us;573us;575us;577us;579us;581us;583us;585us;587us;589us;591us;593us;595us;597us;599us;601us;603us;605us;607us;609us;611us;613us;615us;617us;619us;621us;623us;625us;627us;629us;631us;633us;635us;637us;639us;641us;643us;645us;647us;649us;651us;653us;655us;657us;659us;661us;663us;|]
let _fsyacc_action_rows = 214
let _fsyacc_actionTableElements = [|11us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;61us;15us;64us;88us;65us;75us;66us;63us;67us;62us;0us;49152us;8us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;61us;12us;65us;74us;66us;63us;67us;62us;0us;49152us;2us;32768us;39us;18us;61us;9us;0us;49152us;39us;16415us;0us;114us;6us;103us;14us;156us;15us;160us;16us;164us;17us;192us;18us;186us;19us;174us;20us;178us;21us;182us;22us;196us;23us;208us;24us;202us;25us;148us;26us;150us;27us;127us;28us;130us;29us;132us;30us;134us;31us;136us;32us;138us;33us;140us;34us;142us;35us;144us;36us;146us;37us;152us;38us;168us;45us;121us;47us;119us;48us;125us;49us;129us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;40us;16415us;0us;114us;6us;103us;14us;156us;15us;160us;16us;164us;17us;192us;18us;186us;19us;174us;20us;178us;21us;182us;22us;196us;23us;208us;24us;202us;25us;148us;26us;150us;27us;127us;28us;130us;29us;132us;30us;134us;31us;136us;32us;138us;33us;140us;34us;142us;35us;144us;36us;146us;37us;152us;38us;168us;45us;121us;47us;119us;48us;125us;49us;129us;52us;66us;53us;64us;56us;69us;58us;61us;61us;8us;64us;88us;65us;75us;66us;63us;67us;62us;0us;16387us;0us;16388us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;61us;11us;0us;16389us;0us;16390us;6us;32768us;1us;98us;2us;99us;3us;100us;4us;102us;5us;101us;61us;14us;0us;16391us;0us;16392us;1us;32768us;40us;23us;0us;16393us;1us;32768us;65us;75us;1us;32768us;43us;20us;0us;16394us;2us;16420us;43us;22us;44us;86us;0us;16395us;1us;32768us;65us;75us;1us;32768us;43us;25us;0us;16396us;2us;16420us;43us;27us;44us;86us;0us;16397us;1us;16398us;54us;58us;1us;16399us;54us;58us;4us;16400us;50us;54us;51us;55us;54us;58us;55us;59us;4us;16401us;50us;54us;51us;55us;54us;58us;55us;59us;1us;16402us;54us;58us;1us;16403us;54us;58us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;70us;13us;32768us;7us;107us;9us;108us;10us;109us;11us;111us;12us;110us;13us;112us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;70us;12us;32768us;7us;107us;9us;108us;10us;109us;11us;111us;12us;110us;13us;112us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;6us;16430us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;6us;16431us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;6us;16432us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;6us;16433us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;6us;16434us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;6us;16435us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;6us;16438us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;154us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;158us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;162us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;166us;7us;32768us;44us;170us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;7us;32768us;44us;171us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;172us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;198us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;204us;7us;32768us;50us;54us;51us;55us;52us;56us;53us;57us;54us;58us;55us;59us;57us;210us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;0us;16404us;0us;16405us;0us;16406us;0us;16407us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;0us;16408us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;0us;16409us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;10us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;0us;16410us;0us;16411us;1us;16411us;62us;82us;2us;16411us;41us;116us;62us;82us;0us;16412us;4us;16412us;8us;16418us;43us;16418us;44us;16418us;46us;16418us;39us;16413us;0us;114us;6us;103us;14us;156us;15us;160us;16us;164us;17us;192us;18us;186us;19us;174us;20us;178us;21us;182us;22us;196us;23us;208us;24us;202us;25us;148us;26us;150us;27us;127us;28us;130us;29us;132us;30us;134us;31us;136us;32us;138us;33us;140us;34us;142us;35us;144us;36us;146us;37us;152us;38us;168us;45us;121us;47us;119us;48us;125us;49us;129us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;1us;32768us;43us;78us;0us;16414us;0us;16416us;0us;16417us;1us;32768us;62us;82us;1us;32768us;67us;83us;1us;32768us;63us;84us;0us;16419us;1us;16420us;44us;86us;1us;32768us;65us;75us;0us;16421us;0us;16422us;1us;16423us;4us;102us;3us;16424us;1us;98us;3us;100us;4us;102us;1us;16425us;4us;102us;3us;16426us;1us;98us;3us;100us;4us;102us;5us;16427us;1us;98us;2us;99us;3us;100us;4us;102us;5us;101us;1us;16428us;4us;102us;6us;32768us;1us;98us;2us;99us;3us;100us;4us;102us;5us;101us;57us;113us;6us;32768us;1us;98us;2us;99us;3us;100us;4us;102us;5us;101us;42us;117us;44us;32768us;0us;114us;1us;98us;2us;99us;3us;100us;4us;102us;5us;101us;6us;103us;14us;156us;15us;160us;16us;164us;17us;192us;18us;186us;19us;174us;20us;178us;21us;182us;22us;196us;23us;208us;24us;202us;25us;148us;26us;150us;27us;127us;28us;130us;29us;132us;30us;134us;31us;136us;32us;138us;33us;140us;34us;142us;35us;144us;36us;146us;37us;152us;38us;168us;45us;121us;47us;119us;48us;125us;49us;129us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;10us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;10us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;10us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;10us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;10us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;10us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;1us;32768us;8us;105us;2us;32768us;59us;79us;60us;80us;0us;16429us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;0us;16436us;1us;32768us;65us;115us;0us;16437us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;74us;0us;16439us;10us;32768us;0us;114us;6us;103us;52us;66us;53us;64us;56us;69us;58us;61us;64us;88us;65us;75us;66us;63us;67us;62us;0us;16440us;1us;32768us;65us;75us;1us;32768us;46us;123us;1us;32768us;65us;75us;0us;16441us;1us;32768us;65us;75us;0us;16442us;1us;32768us;65us;75us;0us;16443us;0us;16444us;1us;32768us;65us;75us;0us;16445us;1us;32768us;65us;75us;0us;16446us;1us;32768us;65us;75us;0us;16447us;1us;32768us;65us;75us;0us;16448us;1us;32768us;65us;75us;0us;16449us;1us;32768us;65us;75us;0us;16450us;1us;32768us;65us;75us;0us;16451us;1us;32768us;65us;75us;0us;16452us;1us;32768us;65us;75us;0us;16453us;1us;32768us;65us;75us;0us;16454us;1us;32768us;65us;75us;0us;16455us;1us;32768us;56us;153us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;75us;0us;16456us;1us;32768us;56us;157us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;75us;0us;16457us;1us;32768us;56us;161us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;75us;0us;16458us;1us;32768us;56us;165us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;75us;0us;16459us;1us;32768us;56us;169us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;75us;0us;16460us;1us;32768us;65us;75us;1us;32768us;44us;176us;1us;32768us;65us;75us;0us;16461us;1us;32768us;65us;75us;1us;32768us;44us;180us;1us;32768us;65us;75us;0us;16462us;1us;32768us;65us;75us;1us;32768us;44us;184us;1us;32768us;65us;75us;0us;16463us;1us;32768us;65us;75us;1us;32768us;44us;188us;1us;32768us;65us;75us;1us;32768us;44us;190us;1us;32768us;65us;75us;0us;16464us;1us;32768us;65us;75us;1us;32768us;44us;194us;1us;32768us;65us;75us;0us;16465us;1us;32768us;56us;197us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;75us;1us;32768us;44us;200us;1us;32768us;65us;75us;0us;16466us;1us;32768us;56us;203us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;75us;1us;32768us;44us;206us;1us;32768us;65us;75us;0us;16467us;1us;32768us;56us;209us;7us;32768us;52us;66us;53us;64us;56us;68us;58us;61us;65us;74us;66us;63us;67us;62us;1us;32768us;65us;75us;1us;32768us;44us;212us;1us;32768us;65us;75us;0us;16468us;|]
let _fsyacc_actionTableRowOffsets = [|0us;12us;13us;22us;23us;26us;27us;67us;108us;109us;110us;118us;119us;120us;127us;128us;129us;131us;132us;134us;136us;137us;140us;141us;143us;145us;146us;149us;150us;152us;154us;159us;164us;166us;168us;176us;190us;203us;210us;217us;224us;231us;238us;245us;252us;260us;268us;276us;284us;292us;300us;308us;316us;324us;332us;340us;348us;356us;364us;372us;380us;381us;382us;383us;384us;392us;393us;401us;402us;410us;421us;422us;423us;425us;428us;429us;434us;474us;476us;477us;478us;479us;481us;483us;485us;486us;488us;490us;491us;492us;494us;498us;500us;504us;510us;512us;519us;526us;571us;582us;593us;604us;615us;626us;637us;639us;642us;643us;651us;659us;667us;675us;683us;691us;692us;694us;695us;703us;705us;706us;717us;718us;720us;722us;724us;725us;727us;728us;730us;731us;732us;734us;735us;737us;738us;740us;741us;743us;744us;746us;747us;749us;750us;752us;753us;755us;756us;758us;759us;761us;762us;764us;765us;767us;775us;777us;778us;780us;788us;790us;791us;793us;801us;803us;804us;806us;814us;816us;817us;819us;827us;835us;843us;845us;846us;848us;850us;852us;853us;855us;857us;859us;860us;862us;864us;866us;867us;869us;871us;873us;875us;877us;878us;880us;882us;884us;885us;887us;895us;897us;899us;901us;902us;904us;912us;914us;916us;918us;919us;921us;929us;931us;933us;935us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;3us;1us;2us;1us;2us;1us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;1us;1us;2us;2us;3us;1us;1us;2us;2us;0us;1us;1us;1us;4us;1us;3us;1us;3us;3us;3us;3us;3us;2us;3us;3us;3us;3us;3us;3us;3us;3us;2us;3us;3us;3us;4us;2us;2us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;5us;5us;5us;5us;9us;4us;4us;4us;6us;4us;7us;7us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;3us;3us;4us;4us;5us;5us;6us;7us;7us;8us;8us;9us;9us;9us;9us;9us;9us;9us;10us;10us;10us;10us;10us;10us;10us;11us;12us;12us;12us;13us;13us;14us;14us;15us;15us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;49152us;65535us;49152us;65535us;65535us;16387us;16388us;65535us;16389us;16390us;65535us;16391us;16392us;65535us;16393us;65535us;65535us;16394us;65535us;16395us;65535us;65535us;16396us;65535us;16397us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16404us;16405us;16406us;16407us;65535us;16408us;65535us;16409us;65535us;65535us;16410us;16411us;65535us;65535us;16412us;65535us;65535us;65535us;16414us;16416us;16417us;65535us;65535us;65535us;16419us;65535us;65535us;16421us;16422us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16429us;65535us;65535us;65535us;65535us;65535us;65535us;16436us;65535us;16437us;65535us;65535us;16439us;65535us;16440us;65535us;65535us;65535us;16441us;65535us;16442us;65535us;16443us;16444us;65535us;16445us;65535us;16446us;65535us;16447us;65535us;16448us;65535us;16449us;65535us;16450us;65535us;16451us;65535us;16452us;65535us;16453us;65535us;16454us;65535us;16455us;65535us;65535us;65535us;16456us;65535us;65535us;65535us;16457us;65535us;65535us;65535us;16458us;65535us;65535us;65535us;16459us;65535us;65535us;65535us;65535us;65535us;16460us;65535us;65535us;65535us;16461us;65535us;65535us;65535us;16462us;65535us;65535us;65535us;16463us;65535us;65535us;65535us;65535us;65535us;16464us;65535us;65535us;65535us;16465us;65535us;65535us;65535us;65535us;65535us;16466us;65535us;65535us;65535us;65535us;65535us;16467us;65535us;65535us;65535us;65535us;65535us;16468us;|]
let _fsyacc_reductions = lazy [|
# 569 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.BoolExpr option in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstartBool));
# 578 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.ArithExpr option in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstartArith));
# 587 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Circuit option in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 596 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Allocation in
            let _2 = parseState.GetInput(2) :?> Statement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                               Some (_1, Flow _2) 
                   )
# 56 "Parser.fsy"
                 : AST.Circuit option));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                               None 
                   )
# 57 "Parser.fsy"
                 : AST.Circuit option));
# 618 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                               Some _1 
                   )
# 60 "Parser.fsy"
                 : AST.ArithExpr option));
# 629 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                               None 
                   )
# 61 "Parser.fsy"
                 : AST.ArithExpr option));
# 639 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> BoolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                               Some _1 
                   )
# 64 "Parser.fsy"
                 : AST.BoolExpr option));
# 650 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                               None 
                   )
# 65 "Parser.fsy"
                 : AST.BoolExpr option));
# 660 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qallocation in
            let _2 = parseState.GetInput(2) :?> 'gentype_callocation in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                               AllocQC(_1, _2) 
                   )
# 74 "Parser.fsy"
                 : AST.Allocation));
# 672 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                         _2 
                   )
# 77 "Parser.fsy"
                 : 'gentype_qallocation));
# 683 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                         _2 
                   )
# 78 "Parser.fsy"
                 : 'gentype_qallocation));
# 694 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                         _2 
                   )
# 82 "Parser.fsy"
                 : 'gentype_callocation));
# 705 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                         _2 
                   )
# 83 "Parser.fsy"
                 : 'gentype_callocation));
# 716 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                           BinaryOp(_1, Mul, _3) 
                   )
# 90 "Parser.fsy"
                 : ArithExpr));
# 728 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                           BinaryOp(_1, Div, _3) 
                   )
# 91 "Parser.fsy"
                 : ArithExpr));
# 740 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                           BinaryOp(_1, Add, _3) 
                   )
# 92 "Parser.fsy"
                 : ArithExpr));
# 752 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                           BinaryOp(_1, Sub, _3) 
                   )
# 93 "Parser.fsy"
                 : ArithExpr));
# 764 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                           BinaryOp(_1, Pow, _3) 
                   )
# 94 "Parser.fsy"
                 : ArithExpr));
# 776 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                           BinaryOp(_1, Mod, _3) 
                   )
# 95 "Parser.fsy"
                 : ArithExpr));
# 788 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                           _1 
                   )
# 96 "Parser.fsy"
                 : ArithExpr));
# 799 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                           Pi 
                   )
# 99 "Parser.fsy"
                 : ArithExpr));
# 809 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                           Num(_1) 
                   )
# 100 "Parser.fsy"
                 : ArithExpr));
# 820 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                           Float(_1) 
                   )
# 101 "Parser.fsy"
                 : ArithExpr));
# 831 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                           UnaryOp(Minus, _2) 
                   )
# 102 "Parser.fsy"
                 : ArithExpr));
# 842 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                           UnaryOp(Plus, _2) 
                   )
# 103 "Parser.fsy"
                 : ArithExpr));
# 853 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                           _2 
                   )
# 104 "Parser.fsy"
                 : ArithExpr));
# 864 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                           VarA(_1) 
                   )
# 105 "Parser.fsy"
                 : ArithExpr));
# 875 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                           _1 
                   )
# 109 "Parser.fsy"
                 : 'gentype_str));
# 886 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Statement list in
            let _2 = parseState.GetInput(2) :?> Statement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                           _1 @ _2 
                   )
# 113 "Parser.fsy"
                 : Statement list));
# 898 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                           [_1] 
                   )
# 114 "Parser.fsy"
                 : Statement list));
# 909 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                           [] 
                   )
# 115 "Parser.fsy"
                 : Statement list));
# 919 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                            Click 
                   )
# 120 "Parser.fsy"
                 : Result));
# 929 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                            NoClick 
                   )
# 121 "Parser.fsy"
                 : Result));
# 939 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                           BitS(_1) 
                   )
# 125 "Parser.fsy"
                 : Bit));
# 950 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                           BitA(_1, _3) 
                   )
# 126 "Parser.fsy"
                 : Bit));
# 962 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                       _1 
                   )
# 130 "Parser.fsy"
                 : Bit));
# 973 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Bit in
            let _3 = parseState.GetInput(3) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                       BitSeq(_1, _3) 
                   )
# 131 "Parser.fsy"
                 : Bit));
# 985 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                               B (_1) 
                   )
# 137 "Parser.fsy"
                 : BoolExpr));
# 996 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> BoolExpr in
            let _3 = parseState.GetInput(3) :?> BoolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                               LogicOp(_1, And, _3) 
                   )
# 138 "Parser.fsy"
                 : BoolExpr));
# 1008 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> BoolExpr in
            let _3 = parseState.GetInput(3) :?> BoolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                               LogicOp(_1, Or, _3) 
                   )
# 139 "Parser.fsy"
                 : BoolExpr));
# 1020 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> BoolExpr in
            let _3 = parseState.GetInput(3) :?> BoolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                               LogicOp(_1, And, _3) 
                   )
# 140 "Parser.fsy"
                 : BoolExpr));
# 1032 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> BoolExpr in
            let _3 = parseState.GetInput(3) :?> BoolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                               LogicOp(_1, Or, _3) 
                   )
# 141 "Parser.fsy"
                 : BoolExpr));
# 1044 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> BoolExpr in
            let _3 = parseState.GetInput(3) :?> BoolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                               LogicOp(_1, Xor, _3) 
                   )
# 142 "Parser.fsy"
                 : BoolExpr));
# 1056 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> BoolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                               Not(_2)
                   )
# 143 "Parser.fsy"
                 : BoolExpr));
# 1067 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Bit in
            let _3 = parseState.GetInput(3) :?> Result in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                               Check(_1,_3) 
                   )
# 144 "Parser.fsy"
                 : BoolExpr));
# 1079 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                               RelationOp(_1, EQ, _3) 
                   )
# 145 "Parser.fsy"
                 : BoolExpr));
# 1091 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                               RelationOp(_1, NEQ, _3) 
                   )
# 146 "Parser.fsy"
                 : BoolExpr));
# 1103 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                               RelationOp(_1, GT, _3) 
                   )
# 147 "Parser.fsy"
                 : BoolExpr));
# 1115 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                               RelationOp(_1, GTE, _3) 
                   )
# 148 "Parser.fsy"
                 : BoolExpr));
# 1127 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                               RelationOp(_1, LT, _3) 
                   )
# 149 "Parser.fsy"
                 : BoolExpr));
# 1139 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ArithExpr in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                               RelationOp(_1, LTE, _3) 
                   )
# 150 "Parser.fsy"
                 : BoolExpr));
# 1151 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> BoolExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                               _2 
                   )
# 151 "Parser.fsy"
                 : BoolExpr));
# 1162 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                               VarB(_2) 
                   )
# 152 "Parser.fsy"
                 : BoolExpr));
# 1173 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_str in
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                                       Assign(_1, _3) 
                   )
# 158 "Parser.fsy"
                 : Statement));
# 1185 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> BoolExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_str in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                                       AssignB(_3, _1) 
                   )
# 159 "Parser.fsy"
                 : Statement));
# 1197 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> BoolExpr in
            let _3 = parseState.GetInput(3) :?> Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                                       Condition(_2, _3) 
                   )
# 160 "Parser.fsy"
                 : Statement));
# 1209 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            let _4 = parseState.GetInput(4) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                                       Measure(_2, _4) 
                   )
# 161 "Parser.fsy"
                 : Statement));
# 1221 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                                       Reset(_2) 
                   )
# 162 "Parser.fsy"
                 : Statement));
# 1232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                                       Barrier(_2) 
                   )
# 163 "Parser.fsy"
                 : Statement));
# 1243 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                                       PhaseDisk 
                   )
# 164 "Parser.fsy"
                 : Statement));
# 1253 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                   UnaryGate(H, _2) 
                   )
# 168 "Parser.fsy"
                 : Statement));
# 1264 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                   UnaryGate(ID, _2) 
                   )
# 169 "Parser.fsy"
                 : Statement));
# 1275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                   UnaryGate(X, _2) 
                   )
# 170 "Parser.fsy"
                 : Statement));
# 1286 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                   UnaryGate(Y, _2) 
                   )
# 171 "Parser.fsy"
                 : Statement));
# 1297 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                   UnaryGate(Z, _2) 
                   )
# 172 "Parser.fsy"
                 : Statement));
# 1308 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                   UnaryGate(TDG, _2) 
                   )
# 173 "Parser.fsy"
                 : Statement));
# 1319 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                   UnaryGate(T, _2) 
                   )
# 174 "Parser.fsy"
                 : Statement));
# 1330 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                   UnaryGate(S, _2) 
                   )
# 175 "Parser.fsy"
                 : Statement));
# 1341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                                   UnaryGate(SDG, _2) 
                   )
# 176 "Parser.fsy"
                 : Statement));
# 1352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                   UnaryGate(SX, _2) 
                   )
# 177 "Parser.fsy"
                 : Statement));
# 1363 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                   UnaryGate(SXDG, _2) 
                   )
# 178 "Parser.fsy"
                 : Statement));
# 1374 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            let _5 = parseState.GetInput(5) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                              ParamGate(P, _3, _5) 
                   )
# 180 "Parser.fsy"
                 : Statement));
# 1386 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            let _5 = parseState.GetInput(5) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                              ParamGate(RX, _3, _5) 
                   )
# 181 "Parser.fsy"
                 : Statement));
# 1398 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            let _5 = parseState.GetInput(5) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                              ParamGate(RY, _3, _5) 
                   )
# 182 "Parser.fsy"
                 : Statement));
# 1410 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            let _5 = parseState.GetInput(5) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                              ParamGate(RZ, _3, _5) 
                   )
# 183 "Parser.fsy"
                 : Statement));
# 1422 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            let _5 = parseState.GetInput(5) :?> ArithExpr in
            let _7 = parseState.GetInput(7) :?> ArithExpr in
            let _9 = parseState.GetInput(9) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                                                                          Unitary(_3, _5, _7, _9) 
                   )
# 184 "Parser.fsy"
                 : Statement));
# 1436 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            let _4 = parseState.GetInput(4) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                               BinaryGate(CH, _2, _4) 
                   )
# 186 "Parser.fsy"
                 : Statement));
# 1448 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            let _4 = parseState.GetInput(4) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                               BinaryGate(CS, _2, _4) 
                   )
# 187 "Parser.fsy"
                 : Statement));
# 1460 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            let _4 = parseState.GetInput(4) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                                               BinaryGate(CNOT, _2, _4) 
                   )
# 188 "Parser.fsy"
                 : Statement));
# 1472 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            let _4 = parseState.GetInput(4) :?> Bit in
            let _6 = parseState.GetInput(6) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                               Toffoli(_2, _4, _6) 
                   )
# 189 "Parser.fsy"
                 : Statement));
# 1485 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Bit in
            let _4 = parseState.GetInput(4) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                               BinaryGate(Tags.SWAP, _2, _4) 
                   )
# 190 "Parser.fsy"
                 : Statement));
# 1497 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            let _5 = parseState.GetInput(5) :?> Bit in
            let _7 = parseState.GetInput(7) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                                                         BinaryParamGate(RXX, _3, _5, _7) 
                   )
# 192 "Parser.fsy"
                 : Statement));
# 1510 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            let _5 = parseState.GetInput(5) :?> Bit in
            let _7 = parseState.GetInput(7) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                                         BinaryParamGate(RYY, _3, _5, _7) 
                   )
# 193 "Parser.fsy"
                 : Statement));
# 1523 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> ArithExpr in
            let _5 = parseState.GetInput(5) :?> Bit in
            let _7 = parseState.GetInput(7) :?> Bit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                                                         BinaryParamGate(RZZ, _3, _5, _7) 
                   )
# 194 "Parser.fsy"
                 : Statement));
|]
# 1537 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 71;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let startBool lexer lexbuf : AST.BoolExpr option =
    engine lexer lexbuf 0 :?> _
let startArith lexer lexbuf : AST.ArithExpr option =
    engine lexer lexbuf 2 :?> _
let start lexer lexbuf : AST.Circuit option =
    engine lexer lexbuf 4 :?> _
